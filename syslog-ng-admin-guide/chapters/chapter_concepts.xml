<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter SYSTEM "../../xml-stylesheet/pdf/dtd/docbookx.dtd"[  
<!ENTITY % entities SYSTEM "../syslog-ng-entities.ent">
  %entities;]>  
<chapter id="chapter_concepts">
    <title>The concepts of syslog-ng</title>
    <para>This chapter discusses the technical concepts of syslog-ng.</para>
    <section>
        <title>The philosophy of syslog-ng</title>
        <para>Typically, syslog-ng is used to manage log messages and implement centralized logging,
            where the aim is to collect the log messages of several devices on a single, central log
            server. The different devices &mdash; called syslog-ng clients &mdash; all run
            syslog-ng, and collect the log messages from the various applications, files, and other
                <emphasis>sources</emphasis>. The clients send all important log messages to the
            remote syslog-ng server, where the server sorts and stores them. </para>
    </section>
    <section id="concepts_logging_with_syslog_ng">
        <title>Logging with syslog-ng</title>
        <indexterm>
            <primary>sources</primary>
        </indexterm>
        <para id="concepts_para1">The syslog-ng application reads incoming messages and forwards
            them to the selected <emphasis>destinations</emphasis>. The syslog-ng application can
            receive messages from files, remote hosts, and other <emphasis>sources</emphasis>.</para>
        <indexterm>
            <primary>destinations</primary>
        </indexterm>
        <para id="concepts_para2">Log messages enter syslog-ng in one of the defined sources, and
            are sent to one or more <emphasis>destinations</emphasis>.</para>
        <indexterm>
            <primary>log paths</primary>
        </indexterm>
        <indexterm>
            <primary>log statements</primary>
            <see>log paths</see>
        </indexterm>
        <para id="concepts_para3">Sources and destinations are independent objects; <emphasis>log
                paths</emphasis> define what syslog-ng does with a message, connecting the sources
            to the destinations. A log path consists of one or more sources and one or more
            destinations; messages arriving to a source are sent to every destination listed in the
            log path. A log path defined in syslog-ng is called a <emphasis>log
            statement</emphasis>.</para>
        <indexterm>
            <primary>filters</primary>
        </indexterm>
        <para id="concepts_para4">Optionally, log paths can include <emphasis>filters</emphasis>.
            Filters are rules that select only certain messages, for example, selecting only
            messages sent by a specific application. If a log path includes filters, syslog-ng sends
            only the messages satisfying the filter rules to the destinations set in the log path.</para>
        <indexterm>
            <primary>parsers</primary>
        </indexterm>
        <indexterm>
            <primary>rewrite rules</primary>
        </indexterm>
        <para>Other optional elements that can appear in log statements are
            <emphasis>parsers</emphasis> and <emphasis>rewriting rules</emphasis>. Parsers segment
            messages into different fields to help processing the messages, while rewrite rules
            modify the messages by adding, replacing, or removing parts of the messages.</para>

        <para>The following procedure illustrates the route of a log message from its source on the
            syslog-ng client to its final destination on the central syslog-ng server. </para>
        <procedure id="concepts_route_of_a_message">
            <title>The route of a log message in syslog-ng</title>
            <indexterm>
                <primary>logging procedure</primary>
            </indexterm>
            <figure>
                <title>The route of a log message</title>
                <mediaobject>
                    <imageobject role="html">
                        <imagedata format="PNG" align="center" fileref="logging01.png"/>
                    </imageobject>
                    <imageobject role="fo">
                        <imagedata format="PNG" fileref="&imgroot;/logging01.png"/>
                    </imageobject>
                </mediaobject>
            </figure>
            <step>
                <para>A device or application sends a log message to a source on the syslog-ng
                    client. For example, an Apache web server running on Linux enters a message into
                    the <filename>/var/log/apache</filename> file.</para>
            </step>
            <step>
                <para>The syslog-ng client running on the web server reads the message from its
                        <filename>/var/log/apache</filename> source. </para>
            </step>
            <step>
                <para>The syslog-ng client processes the first log statement that includes the
                        <filename>/var/log/apache</filename> source.</para>
            </step>
            <step>
                <para>The syslog-ng client performs optional operations (message filtering, parsing,
                    and rewriting) on the message; for example, it compares the message to the
                    filters of the log statement (if any). If the message complies with all filter
                    rules, syslog-ng sends the message to the destinations set in the log statement,
                    for example, to the remote syslog-ng server.</para>
                <warning>
                    <para>Message filtering, parsing, and rewriting is performed in the order that
                        the operations appear in the log statement.</para>
                </warning>
                <note>
                    <para>The syslog-ng client sends a message to <emphasis>all</emphasis> matching
                        destinations by default. As a result, a message may be sent to a destination
                        more than once, if the destination is used in multiple log statements. To
                        prevent such situations, use the <parameter>final</parameter> flag in the
                        destination statements. See <xref linkend="logflags"/> for details. </para>
                </note>
            </step>
            <step>
                <para>The syslog-ng client processes the next log statement that includes the
                        <filename>/var/log/apache</filename> source, repeating Steps 3-4.</para>
            </step>
            <step>
                <para>The message sent by the syslog-ng client arrives to a source set in the
                    syslog-ng server.</para>
            </step>
            <step>
                <para>The syslog-ng server reads the message from its source and processes the first
                    log statement that includes that source.</para>
            </step>
            <step>
                <para>The syslog-ng server performs optional operations (message filtering, parsing,
                    and rewriting) on the message; for example, it compares the message to the
                    filters of the log statement (if any). If the message complies with all filter
                    rules, syslog-ng sends the message to the destinations set in the log statement. </para>
                <warning>
                    <para>Message filtering, parsing, and rewriting is performed in the order that
                        the operations appear in the log statement.</para>
                </warning>
            </step>
            <step>
                <para>The syslog-ng server processes the next log statement, repeating Steps
                7-9.</para>
            </step>
        </procedure>
        <note>
            <para>The syslog-ng application can stop reading messages from its sources if the
                destinations cannot process the sent messages. This feature is called flow-control
                and is detailed in <xref linkend="concepts_flow_control"/>.</para>
        </note>
        <section id="concepts_embedded_logpaths">
            <title>Embedded log statements</title>
            <indexterm>
                <primary>embedded log statements</primary>
            </indexterm>
            <indexterm>
                <primary>log pipes</primary>
                <see>embedded log statements</see>
            </indexterm>
            <indexterm significance="preferred">
                <primary>log statements</primary>
                <secondary>embedded</secondary>
            </indexterm>
            <para>Starting from version 3.0, syslog-ng can handle embedded log statements (also
                called log pipes). Embedded log statements are useful for creating complex,
                multi-level log paths with several destinations and use filters, parsers, and
                rewrite rules.</para>
            <para>For example, if you want to filter your incoming messages based on the facility
                parameter, and then use further filters to send messages arriving from different
                hosts to different destinations, you would use embedded log statements.</para>
            <figure>
                <title>Embedded log statement</title>
                <mediaobject>
                    <imageobject role="html">
                        <imagedata format="PNG" align="center"
                            fileref="syslog-ng-embedded-log-statement-2.png"/>
                    </imageobject>
                    <imageobject role="fo">
                        <imagedata format="PNG"
                            fileref="&imgroot;/syslog-ng-embedded-log-statement-2.png"/>
                    </imageobject>
                </mediaobject>
            </figure>
            <para>Embedded log statements include sources &mdash; and usually filters, parsers,
                rewrite rules, or destinations &mdash; and other log statements that can include
                filters, parsers, rewrite rules, and destinations. The following rules apply to
                embedded log statements:</para>
            <itemizedlist>
                <listitem>
                    <para>Only the beginning (also called top-level) log statement can include
                        sources.</para>
                </listitem>
                <listitem>
                    <para>Embedded log statements can include multiple log statements on the same
                        level (i.e., a top-level log statement can include two or more log
                        statements).</para>
                </listitem>
                <listitem>
                    <para>Embedded log statements can include several levels of log statements
                        (i.e., a top-level log statement can include a log statement that includes
                        another log statement, and so on).</para>
                </listitem>
                <listitem>
                    <para>Only another log statement can follow an embedded log statement, filters
                        or other rules cannot.</para>
                </listitem>
                <listitem>
                    <para>Embedded log statements that are on the same level receive the same
                        messages from the higher-level log statement. For example, if the top-level
                        log statement includes a filter, the lower-level log statements receive only
                        the messages that pass the filter.</para>
                </listitem>
            </itemizedlist>
            <figure>
                <title>Embedded log statements</title>
                <mediaobject>
                    <imageobject role="html">
                        <imagedata format="PNG" align="center"
                            fileref="syslog-ng-embedded-log-statement.png"/>
                    </imageobject>
                    <imageobject role="fo">
                        <imagedata format="PNG"
                            fileref="&imgroot;/syslog-ng-embedded-log-statement.png"/>
                    </imageobject>
                </mediaobject>
            </figure>
            <para>Embedded log filters can be used to optimize the processing of log messages, for
                example, to re-use the results of filtering and rewriting operations.</para>
        </section>

    </section>

    <section id="concepts_modes_of_operation">
        <title>Modes of operation</title>
        <indexterm>
            <primary>modes of operation</primary>
        </indexterm>
        <para>The syslog-ng Premium Edition application has three distinct modes of operation:
                <emphasis>Client</emphasis>, <emphasis>Server</emphasis>, and
            <emphasis>Relay</emphasis>. The syslog-ng application running on a host determines the
            mode of operation automatically based on the license and the configuration file.</para>
        <note>
            <para>Microsoft Windows based hosts can run only the syslog-ng agent. The syslog-ng
                agent operates only in client mode.</para>
        </note>
        <section id="concepts_client_mode">
            <title>Client mode</title>
            <indexterm>
                <primary>client mode</primary>
            </indexterm>
            <indexterm>
                <primary>modes of operation</primary>
                <secondary>client mode</secondary>
            </indexterm>
            <figure>
                <title>Client-mode operation</title>
                <mediaobject>
                    <imageobject role="html">
                        <imagedata format="PNG" align="center" fileref="client_mode01.png"/>
                    </imageobject>
                    <imageobject role="fo">
                        <imagedata format="PNG" fileref="&imgroot;/client_mode01.png"/>
                    </imageobject>
                </mediaobject>
            </figure>
            <para>In client mode, syslog-ng collects the local logs generated by the host and
                forwards them through a network connection to the central syslog-ng server or to a
                relay. Clients can also log the messages locally into files.</para>
            <para>No license file is required to run syslog-ng in client mode.</para>
        </section>
        <section id="concepts_relay_mode">
            <title>Relay mode</title>
            <indexterm>
                <primary>relay mode</primary>
            </indexterm>
            <indexterm>
                <primary>modes of operation</primary>
                <secondary>relay mode</secondary>
            </indexterm>
            <figure>
                <title>Relay-mode operation</title>
                <mediaobject>
                    <imageobject role="html">
                        <imagedata format="PNG" align="center" fileref="relay_mode01.png"/>
                    </imageobject>
                    <imageobject role="fo">
                        <imagedata format="PNG" fileref="&imgroot;/relay_mode01.png" scale="75"
                        />
                    </imageobject>
                </mediaobject>
            </figure>
            <para>In relay mode, syslog-ng receives logs through the network from syslog-ng clients
                and forwards them to the central syslog-ng server using a network connection. Relays
                can also log the messages from the relay host into a local file, or forward these
                messages to the central syslog-ng server.</para>
            <para>Relays cannot write messages received from the network into local files, only
                buffer the messages to the hard disk when disk-based buffering is used.</para>
            <para>No license file is required to run syslog-ng in relay mode.</para>
        </section>
        <section id="concepts_server_mode">
            <title>Server mode</title>
            <indexterm>
                <primary>server mode</primary>
            </indexterm>
            <indexterm>
                <primary>modes of operation</primary>
                <secondary>server mode</secondary>
            </indexterm>
            <figure>
                <title>Server-mode operation</title>
                <mediaobject>
                    <imageobject role="html">
                        <imagedata format="PNG" align="center" fileref="server_mode01.png"/>
                    </imageobject>
                    <imageobject role="fo">
                        <imagedata format="PNG" fileref="&imgroot;/server_mode01.png"/>
                    </imageobject>
                </mediaobject>
            </figure>
            <para>In server mode, syslog-ng acts as a central log-collecting server. It receives
                messages from syslog-ng clients and relays over the network, and stores them locally
                in files, or passes them to other applications, for example log analyzers.</para>
            <indexterm>
                <primary>license</primary>
            </indexterm>
            <para>Running syslog-ng Premium Edition in server mode requires a license file. The
                license determines how many individual hosts can connect to the server.</para>
        </section>
    </section>

    <section id="msgroute">
        <title>Global objects</title>
        <indexterm>
            <primary>global objects</primary>
        </indexterm>
        <para>The syslog-ng application uses the following objects:</para>
        <!-- FIXME linkeket -->
        <itemizedlist>
            <listitem>
                <indexterm>
                    <primary>source drivers</primary>
                </indexterm>
                <para><emphasis>Source driver</emphasis>: A communication method used to receive log
                    messages. For example, syslog-ng can receive messages from a remote host via
                    TCP/IP, or read the messages of a local application from a file.</para>
            </listitem>
            <listitem>
                <indexterm>
                    <primary>sources</primary>
                </indexterm>
                <para><emphasis>Source</emphasis>: A named collection of configured source drivers.
                </para>
            </listitem>
            <listitem>
                <indexterm>
                    <primary>destination drivers</primary>
                </indexterm>
                <para><emphasis>Destination driver</emphasis>: A communication method used to send
                    log messages. For example, syslog-ng can send messages to a remote host via
                    TCP/IP, or write the messages into a file or database.</para>
            </listitem>
            <listitem>
                <indexterm>
                    <primary>destinations</primary>
                </indexterm>
                <para><emphasis>Destination</emphasis>: A named collection of configured destination
                    drivers.</para>
            </listitem>
            <listitem>
                <indexterm>
                    <primary>filters</primary>
                </indexterm>
                <para><emphasis>Filter</emphasis>: An expression to select messages. For example, a
                    simple filter can select the messages received from a specific host.</para>
            </listitem>
            <listitem>
                <indexterm>
                    <primary>macros</primary>
                </indexterm>
                <para><emphasis>Macro</emphasis>: An identifier that refers to a part of the log
                    message. For example, the <parameter>$HOST</parameter> macro returns the name of
                    the host that sent the message. Macros are often used in templates and
                    filenames.</para>
            </listitem>
            <listitem>
                <indexterm>
                    <primary>parsers</primary>
                </indexterm>
                <para><emphasis>Parser</emphasis>: A rule that segments messages into separate
                    columns at a predefined separator character (for example a comma). Every column has a
                    unique name that can be used as a macro.</para>
            </listitem>
            <listitem>
                <indexterm>
                    <primary>rewrite rules</primary>
                </indexterm>
                <para><emphasis>Rewrite rule</emphasis>: A rule modifies a part of the message, for
                    example, replaces a string, or sets a field to a specified value.</para>
            </listitem>
            <listitem>
                <indexterm>
                    <primary>log statements</primary>
                </indexterm>
                <para><emphasis>Log paths</emphasis>: A combination of sources, destinations, and
                    other objects like filters, parsers, and rewrite rules. The syslog-ng
                    application sends messages arriving to the sources of the log paths to the
                    defined destinations, and performs filtering, parsing, and rewriting of the
                    messages. Log paths are also called log statements. Log statements can include
                    other (embedded) log statements to create complex log paths.</para>
            </listitem>
            <listitem>
                <indexterm>
                    <primary>templates</primary>
                </indexterm>
                <para><emphasis>Template</emphasis>: A template is a set of macros that can be used
                    to restructure log messages or automatically generate file names. For example, a
                    template can add the hostname and the date to the beginning of every log
                    message.</para>
            </listitem>
            <listitem>
                <indexterm>
                    <primary>options</primary>
                </indexterm>
                <para><emphasis>Option</emphasis>: Options set global parameters of syslog-ng, like
                    the parameters of name resolution and timezone handling.</para>
            </listitem>
        </itemizedlist>
        <para>For details on the above objects, see <xref linkend="defining_global_objects"
        />.</para>
    </section>

    <section id="timezone_handling">
        <title>Timezone handling</title>
        <indexterm>
            <primary>timezones</primary>
        </indexterm>
        <para>The syslog-ng application supports messages originating from different timezones. The
            original syslog protocol does not include timezone information, but syslog-ng provides a
            solution by extending the syslog protocol to include the timezone in the log messages.
            The syslog-ng application also enables administrators to supply timezone information for
            legacy devices which do not support the protocol extension. </para>
        <para>Timezone information is associated with messages entering syslog-ng is selected using
            the following algorithm:</para>
        <procedure>
            <step>
                <para>The sender application (for example the syslog-ng client) or host specifies the
                    timezone of the messages. If the incoming message includes a timezone it is
                    associated with the message. Otherwise, the local timezone is assumed.</para>
            </step>
            <step>
                <para>Specify the 
                        <parameter>time_zone()</parameter>
                    parameter for the source driver that reads the message. This parameter
                    overrides the original timezone of the message. Each source defaults to the
                    value of the <link linkend="recv_time_zone">
                        <parameter>recv_time_zone()</parameter>
                    </link> global option. </para>
            </step>
            <step>
                <para>Specify the timezone in the destination driver using the 
                        <parameter>time_zone()</parameter>
                    parameter. Each destination driver might have an associated timezone
                    value; syslog-ng converts message timestamps to this timezone before sending the
                    message to its destination (file or network socket). Each destination defaults
                    to the value of the <link linkend="send_time_zone">
                        <parameter>send_time_zone()</parameter>
                    </link> global option.</para>
                <note>
                    <para>A message can be sent to multiple destination zones. The syslog-ng
                        application converts the timezone information properly for every individual
                        destination zone.</para>
                </note>
            </step>
            <step>
                <para>If the timezone is not specified, the message is left unchanged.</para>
            </step>
            <step>
                <para>When macro expansions are used in the destination filenames, the local
                    timezone is used. </para>
            </step>
        </procedure>
    </section>
    <section id="concepts_daylight_saving">
        <title>Daylight saving changes</title>
        <indexterm>
            <primary>daylight saving changes</primary>
        </indexterm>
        <para>The syslog-ng application receives the timezone and daylight saving information from
            the operating system it is installed on. If the operating system handles daylight saving
            correctly, so does syslog-ng. </para>
    </section>

    <section id="concepts_tls">
        <title>Secure logging using TLS</title>
        <indexterm>
            <primary>TLS</primary>
        </indexterm>
        <indexterm>
            <primary>transport layer security</primary>
            <see>TLS</see>
        </indexterm>
        <indexterm>
            <primary>encrypting log messages</primary>
        </indexterm>
        <indexterm>
            <primary>authentication</primary>
        </indexterm>
        <para>The syslog-ng application can send and receive log messages securely over the network
            using the Transport Layer Security (TLS) protocol. TLS is an encryption protocol over
            the TCP/IP network protocol, so it can be used only with TCP-based sources and
            destinations ( <parameter>tcp()</parameter> and <parameter>tcp6()</parameter>).</para>
        <para>TLS uses certificates to authenticate and encrypt the communication, as illustrated on
            the following figure: </para>
        <figure>
            <title>Certificate-based authentication</title>
            <mediaobject>
                <imageobject role="html">
                    <imagedata format="PNG" align="center"
                        fileref="certificate-based_authentication01.png"/>
                </imageobject>
                <imageobject role="fo">
                    <imagedata format="PNG"
                        fileref="&imgroot;/certificate-based_authentication01.png"/>
                </imageobject>
            </mediaobject>
        </figure>
        <indexterm>
            <primary>certificates</primary>
        </indexterm>
        <para>The client authenticates the server by requesting its certificate and public key.
            Optionally, the server can also request a certificate from the client, thus mutual
            authentication is also possible.</para>
        <para>In order to use TLS encryption in syslog-ng, the following elements are required:</para>
        <itemizedlist>
            <listitem>
                <para>A certificate on the syslog-ng server that identifies the syslog-ng
                server.</para>
            </listitem>
            <listitem>
                <para>The certificate of the Certificate Authority that issued the certificate of
                    the syslog-ng server must be available on the syslog-ng client.</para>
            </listitem>
        </itemizedlist>
        <para>When using mutual authentication to verify the identity of the clients, the following
            elements are required:</para>
        <indexterm>
            <primary>authentication</primary>
        </indexterm>
        <indexterm>
            <primary>mutual authentication</primary>
        </indexterm>
        <itemizedlist>
            <listitem>
                <para>A certificate must be available on the syslog-ng client. This certificate
                    identifies the syslog-ng client.</para>
            </listitem>
            <listitem>
                <para>The certificate of the Certificate Authority that issued the certificate of
                    the syslog-ng client must be available on the syslog-ng server.</para>
            </listitem>
        </itemizedlist>
        <para>Mutual authentication ensures that the syslog-ng server accepts log messages only from
            authorized clients. </para>
        <para>See <xref linkend="tls_serverauth"/> for details on configuring TLS communication in
            syslog-ng.</para>
    </section>
    <section id="concepts_logstore">
        <title>Secure storage of log messages</title>
        <indexterm>
            <primary>logstore</primary>
        </indexterm>
        <indexterm>
            <primary>encrypting log messages</primary>
            <secondary>on the hard disk</secondary>
        </indexterm>
        <indexterm>
            <primary>encrypting log files</primary>
        </indexterm>
        <indexterm>
            <primary>signing log files</primary>
        </indexterm>
        <indexterm>
            <primary>file encryption</primary>
        </indexterm>
        <indexterm>
            <primary>Timestamping Authority</primary>
        </indexterm>
        <indexterm>
            <primary>TSA</primary>
        </indexterm>
        <para>The Premium Edition of syslog-ng can store log messages securely in encrypted,
            compressed and timestamped binary files. Timestamps can be requested from an external
            Timestamping Authority (TSA).</para>
        <para>Logstore files consist of individual chunks, every chunk can be encrypted, compressed,
            and timestamped separately. Chunks contain log message data, chunk size defaults to 128k
            (about 1MB worth of compressed logs). Chunks are closed when their size reaches the
            limit set in the <parameter>chunk_size</parameter> parameter, or when the time limit set
            in the <parameter>chunk_time</parameter> parameter expires and a new message arrives.
            Specifically, when a new message arrives to the logstore, syslog-ng checks if
                <parameter>chunk_time</parameter> time has elapsed since the last message has
            arrived. If it has, then the old chunk is closed and the new message is written into a
            new chunk.</para>
        <para>The syslog-ng PE application generates an SHA-1 hash for every chunk to verify the
            integrity of the chunk. The hashes of the chunks are chained together to prevent
            injecting chunks into the logstore file. The syslog-ng application can encrypt the
            logstore using various algorithms, using the <parameter>aes128</parameter> encryption algorithm in CBC mode and the <parameter>hmac-sha1</parameter> hashing (HMAC) algorithm as default.</para>
        <section id="concepts_logstore_journal">
            <title>Journal files</title>
            <indexterm>
                <primary>journal files</primary>
            </indexterm>
            <para>Starting with &product; 3.2, &abbrev; processes log messages into a journal file before writing them to the logstore file. That way logstore files are consistent even if &abbrev; crashes unexpectedly, avoiding losing messages. Note that this does not protect against losing messages if the operating system crashes.</para>
            <para>A journal file is automatically created for every logstore file that &abbrev; opens. A journal file consists of journal blocks which store the log messages. When a journal block fills up with messages, &abbrev; writes the entire block into the logstore file and starts to reuse the journal block. If the messages cannot be written to the logstore file (for example, because the disk becomes unaccessible, or file operations are slow), messages are put to the next journal block (&abbrev; uses four blocks by default). When all journal blocks become full, &abbrev; will stop processing incoming traffic. &abbrev; starts accepting messages to the logstore file again when the first journal block is successfully written to the logstore file. If &abbrev; receives a HUP or STOP signal, it writes every journal block to the logstore.</para>
            <warning>
                <para>When every block of a journal becomes full and &abbrev; stops processing incoming traffic, <emphasis>it will not read new messages at all</emphasis> until a block is successfully written to the related logstore file. This is in contrast with flow-control, where only messages from the source related to the particular destination are not processed.</para>
            </warning>
            <para>&abbrev; uses a separate journal file for every logstore file; every journal file is processed by a separate thread. The journal files are stored in the memory, the total amount of memory allowed for journal files (by default, 512 MB) can be set with the <link linkend="logstore_option_journal_memory_limit"><parameter>logstore_journal_shmem_threshold()</parameter></link> global option.</para>
            <warning>
                <para>The messages in the journal file are in plain-text format: they are neither encrypted nor compressed. However, this is not a problem because normally the journal file is available only in the memory of the host, it is written to disk only if &abbrev; crashes. When &abbrev; is restarted, it automatically processes the journal files to the logstore files, unless a particular logstore file is not part of configuration of &abbrev;. Such orphaned journal files can be processed with the <command>lgstool recover</command> command. For details on processing orphaned journal files, see <xref linkend="lgstool_recover"/>.</para>
            </warning>
            <note>
                <para>Journal files are located in the same folder as the logstore file. The name of the journal file is the same as the logstore file with <parameter>.jor</parameter> suffix added. For example, the journal file for <filename>messages.lgs</filename>is <parameter>messages.lgs.jor</parameter>.</para>
            </note>
        </section>
    </section>

    <section id="concepts_macro">
        <title>Formatting messages, filenames, directories, and tablenames</title>
        <indexterm>
            <primary>formatting messages</primary>
        </indexterm>
        <indexterm>
            <primary>templates</primary>
        </indexterm>
        <indexterm>
            <primary>message templates</primary>
        </indexterm>
        <indexterm>
            <primary>macros</primary>
        </indexterm>
        <para>The syslog-ng application can dynamically create filenames, directories, or names of
            database tables using macros that help you organize your log messages. Macros refer to a
            property or a part of the log message, for example, the <parameter>$HOST</parameter>
            macro refers to the name or IP address of the client that sent the log message, while
                <parameter>$DAY</parameter> is the day of the month when syslog-ng has received the
            message. Using these macros in the path of the destination log files allows you for
            example to collect the logs of every host into separate files for every day.</para>
        <para>A set of macros can be defined as a template object and used in multiple destinations.</para>
        <para>Another use of macros and templates is to customize the format of the syslog message,
            for example to add elements of the message header to the message text. Note that if a
            message uses the IETF-syslog format, only the text of the message can be customized, the
            structure of the header is fixed.</para>
        <para>For details on using templates and macros, see <xref linkend="configuring_macros"/>
            and <xref linkend="reference_macros"/>.</para>
    </section>
    <section id="concepts_parser">
        <title>Segmenting messages</title>
        <indexterm>
            <primary>parsing messages</primary>
            <secondary>concepts of</secondary>
        </indexterm>
        <para>The filters and default macros of syslog-ng work well on the headers and
            metainformation of the log messages, but are rather limited when processing the content
            of the messages. Parsers can segment the content of the messages into name-value pairs,
            and these names can be used as user-defined macros. Subsequent filtering or other type
            of processing of the message can use these custom macros to refer to parts of the
            message.</para>
        <para>Parsers are global objects most often used together with filters and rewrite rules.
            For details on using parsers, see <xref linkend="configuring_parsers"/> and <xref
                linkend="reference_parsers"/>.</para>
    </section>
    <section id="concepts_rewrite">
        <title>Modifying messages</title>
        <indexterm>
            <primary>rewriting messages</primary>
            <secondary>concepts of</secondary>
        </indexterm>
        <para>The syslog-ng application can rewrite parts of the messages using rewrite rules.
            Rewrite rules are global objects similar to parsers and filters and can be used in log
            paths. The syslog-ng application has two methods to rewrite parts of the log messages:
            replacing (setting) a part of the message to a fix value, and a general
            search-and-replace mode.</para>
        <para>Substitution completely replaces a specific part of the message that is referenced
            using a built-in or user-defined macro.</para>
        <para>General rewriting searches for a string in the entire message (or only a part of the
            message specified by a macro) and replaces it with another string. Optionally, this
            replacement string can be a template that contains macros.</para>
        <para>For details on using rewrite rules, see <xref linkend="configuring_rewrite"/> and
                <xref linkend="reference_rewrite"/>.</para>
    </section>
    <section id="concepts_pattern_databases">
        <title>Classifying log messages</title>
        <indexterm>
            <primary>classifying messages</primary>
            <secondary>concepts of</secondary>
        </indexterm>
        <indexterm>
            <primary>pattern databases</primary>
            <secondary>concepts of</secondary>
        </indexterm>
        <para>The syslog-ng application can compare the contents of the received log messages to
            predefined message patterns. By comparing the messages to the known patterns, syslog-ng
            is able to identify the exact type of the messages, and sort them into message classes.
            The message classes can be used to classify the type of the event described in the log
            message. The message classes can be customized, and for example can label the messages
            as user login, application crash, file transfer, etc. events.</para>
        <para>To find the pattern that matches a particular message, syslog-ng uses a method called
            longest prefix match radix tree. This means that syslog-ng creates a tree structure of
            the available patterns, where the different characters available in the patterns for a
            given position are the branches of the tree.</para>
            <!-- FIXME missing figure -->
        <para>To classify a message, syslog-ng selects the first character of the message (the text
            of message, not the header), and selects the patterns starting with this character,
            other patterns are ignored for the rest of the process. After that, the second character
            of the message is compared to the second character of the selected patterns. Again,
            matching patterns are selected, and the others discarded. This process is repeated until
            a single pattern completely matches the message, or no match is found. In the latter
            case, the message is classified as unknown, otherwise the class of the matching pattern
            is assigned to the message.</para>
        <para>To make the message classification more flexible and robust, the patterns can contain
            pattern parsers: elements that match on a set of characters. For example, the NUMBER
            parser matches on any integer numbers (for example 1, 123, 894054, etc.). Other pattern
            parsers match on various strings and IP addresses. For the details of available pattern
            parsers, see <xref linkend="concepts_artificial_ignorance"/>.</para>
        <para>The functionality of the pattern database is similar to that of the logcheck project,
            but it is much easier to write and maintain the patterns used by syslog-ng, than the
            regular expressions used by logcheck. Also, it is much easier to understand syslog-ng
            pattens than regular expressions.</para>
        <para>Pattern matching based on regular expressions is computationally very intensive,
            especially when the number of patterns increases. The solution used by syslog-ng can be
            performed real-time, and is independent from the number of patterns, so it scales much
            better. The following patterns describe the same message: <parameter>Accepted password
                for bazsi from 10.50.0.247 port 42156 ssh2</parameter>
        </para>
        <para>A regular expression matching this message from the logcheck project:
                <parameter>Accepted \
                (gssapi(-with-mic|-keyex)?|rsa|dsa|password|publickey|keyboard-interactive/pam) \
                for [^[:space:]]+ from [^[:space:]]+ port [0-9]+( (ssh|ssh2))?</parameter>
        </para>
        <para>A syslog-ng database pattern for this message: <parameter>Accepted
                @QSTRING:auth_method: @ for@QSTRING:username: @from\ @QSTRING:client_addr: @port
                @NUMBER:port:@ ssh2</parameter>
        </para>
        <para>For details on using pattern databases to classify log messages, see <xref
                linkend="configuring_pattern_databases"/> and <xref
                linkend="reference_parsers_pattern_databases"/>.</para>
        <xi:include href="../../common/chapters/patterndb_common.xml"
            xmlns:xi="http://www.w3.org/2001/XInclude" xpointer="element(patterndb-structure)"/>
        <xi:include href="../../common/chapters/patterndb_common.xml"
            xmlns:xi="http://www.w3.org/2001/XInclude" xpointer="element(patterndb-operation)"/>
        <section id="concepts_artificial_ignorance">
            <title>Artificial ignorance</title>
            <para>Artificial ignorance is a method to detect anomalies. When applied to log
                analysis, it means that you ignore the regular, common log messages - these are the
                result of the regular behavior of your system, and therefore are not too
                interesting. However, new messages that have not appeared in the logs before can
                sign important events, and should be therefore investigated. "By definition,
                something we have never seen before is anomalous" (Marcus J. Ranum). </para>
            <para>The syslog-ng application can classify messages using a pattern database: messages
                that do not match any pattern are classified as unknown. This provides a way to use
                artificial ignorance to review your log messages. You can periodically review the
                unknown messages &mdash; syslog-ng can send them to a separate destination - and
                add patterns for them to the pattern database. By reviewing and manually classifying
                the unknown messages, you can iteratively classify more and more messages, until the
                only the really anomalous messages show up as unknown.</para>
            <para>Obviously, for this to work, a large number of message patterns are required. The
                radix-tree matching method used for message classification is very effective, can be
                performed very fast, and scales very well; basically the time required to perform a
                pattern matching is independent from the number of patterns in the database.</para>
            <para>To simplify the building of pattern databases, BalaBit has released (and will
                continue to release) sample databases. Currently the sample pattern databases are
                available at the <ulink
                    url="http://www.balabit.com/downloads/files/patterndb-snapshot/"
                    >BalaBit Download page</ulink>.</para>
<!--            <itemizedlist>
                <listitem>
                    <para>a database for the log messages of Cisco PIX firewalls;</para>
                </listitem>
                <listitem>
                    <para>the database of the Logcheck project (<ulink url="http://logcheck.org/"
                            >http://logcheck.org/</ulink>) containing message patterns for a large
                        number of open source applications;</para>
                </listitem>
                <listitem>
                    <para>a database for the log messages of the Zorp Application Level Gateway
                            (<ulink url="http://www.balabit.com/network-security/zorp-gateway/"
                            >http://www.balabit.com/network-security/zorp-gateway/</ulink>)
                        (developed by BalaBit IT Security).</para>
                </listitem>
            </itemizedlist>-->
        </section>
    </section>
    <section id="concepts_flow_control">
        <title>Managing incoming and outgoing messages with flow-control</title>
        <indexterm>
            <primary>log paths</primary>
            <secondary>flow-control</secondary>
        </indexterm>
        <indexterm>
            <primary>flow-control</primary>
        </indexterm>
        <indexterm>
            <primary>preventing message loss</primary>
            <see>flow-control</see>
        </indexterm>
        <indexterm>
            <primary>parameters</primary>
            <secondary>
                <parameter>log_fetch_limit()</parameter>
            </secondary>
        </indexterm>
        <indexterm>
            <primary>parameters</primary>
            <secondary>
                <parameter>log_fifo_size()</parameter>
            </secondary>
        </indexterm>
        <para>This section describes the internal message-processing model of syslog-ng, as well as
            the flow-control feature that can prevent message losses. To use flow-control, the
                <parameter>flow-control</parameter> flag must be enabled for the particular log
            path.</para>
        <para>The syslog-ng application monitors (polls) the sources defined in its configuration
            file, periodically checking each source for messages. When a log message is found in one
            of the sources, syslog-ng polls every source and reads the available messages. These
            messages are processed and put into the output buffer of syslog-ng (also called fifo).
            From the output buffer, the operating system sends the messages to the appropriate
            destinations.</para>
        <para>In large-traffic environments many messages can arrive during a single poll loop,
            therefore syslog-ng reads only a fixed number of messages from each source. The
                <parameter>log_fetch_limit()</parameter> option specifies the number of messages
            read during a poll loop from a single source.</para>
        <figure>
            <title>Managing log messages in syslog-ng</title>
            <mediaobject>
                <imageobject role="html">
                    <imagedata format="PNG" align="center" fileref="io1.png"/>
                </imageobject>
                <imageobject role="fo">
                    <imagedata format="PNG" fileref="&imgroot;/io1.png" scale="80"/>
                </imageobject>
            </mediaobject>
        </figure>
        <note>
            <para>The <parameter>log_fetch_limit()</parameter> parameter can be set as a global
                option, or for every source individually.</para>
        </note>
        <indexterm>
            <primary>output buffer</primary>
        </indexterm>
        <para>Every destination has its own output buffer. The output buffer is needed because the
            destination might not be able to accept all messages immediately. The
                <parameter>log_fifo_size()</parameter> parameter sets the size of the output buffer.
            The output buffer must be larger than the <parameter>log_fetch_limit()</parameter> of
            the sources, to ensure that every message read during the poll loop fits into the output
            buffer. If the log path sends messages to a destination from multiple sources, the
            output buffer must be large enough to store the incoming messages of every source.</para>
        <para>TCP and unix-stream sources can receive the logs from several incoming connections
            (for example many different clients or applications). For such sources, syslog-ng reads
            messages from every connection, thus the <parameter>log_fetch_limit()</parameter>
            parameter applies individually to every connection of the source.</para>
        <indexterm>
            <primary>parameters</primary>
            <secondary>
                <parameter>log_iw_size()</parameter>
            </secondary>
        </indexterm>
        <indexterm>
            <primary>parameters</primary>
            <secondary>
                <parameter>max_connections()</parameter>
            </secondary>
        </indexterm>
        <figure>
            <title>Managing log messages of TCP sources in syslog-ng</title>
            <mediaobject>
                <imageobject role="html">
                    <imagedata format="PNG" align="center" fileref="io2.png"/>
                </imageobject>
                <imageobject role="fo">
                    <imagedata format="PNG" fileref="&imgroot;/io2.png" scale="80"/>
                </imageobject>
            </mediaobject>
        </figure>
        <para>The flow-control of syslog-ng introduces a control window to the source that tracks
            how many messages can syslog-ng accept from the source. Every message that syslog-ng
            reads from the source lowers the window size by one; every message that syslog-ng
            successfully sends from the output buffer increases the window size by one. If the
            window is full (i.e., its size decreases to zero), syslog-ng stops reading messages from
            the source. The initial size of the control window is by default
            <parameter>100</parameter>: the <parameter>log_fifo_size()</parameter> must be larger
            than this value in order for flow-control to have any effect. If a source accepts
            messages from multiple connections, all messages use the same control window.</para>
        <para>When flow-control is used, every source has its own control window. As a worst-case
            situation, the output buffer of the destination must be set to accommodate all messages
            of every control window, that is, the <parameter>log_fifo_size()</parameter> of the
            destination must be greater than
                <parameter>number_of_sources</parameter>*<parameter>log_iw_size()</parameter>. This
            applies to every source that sends logs to the particular destination. Thus if two
            sources having several connections and heavy traffic send logs to the same destination,
            the control window of both sources must fit into the output buffer of the destination.
            Otherwise, syslog-ng does not activate the flow-control, and messages may be lost.</para>
        <note>
            <para>Flow-control can be used together with the disk-based buffering feature of
                syslog-ng PE. See <xref linkend="concepts_diskbuffer"/> for details.</para>
        </note>
        <section>
            <title>Flow-control and multiple destinations</title>
            <indexterm>
                <primary>flow-control</primary>
                <secondary>multiple destinations</secondary>
            </indexterm>
            <!-- FIXME ide az embedded logpaths and flowcontrolt -->
            <para>Using flow-control on a source has an important side-effect if the messages of the
                source are sent to multiple destinations. If flow-control is in use and one of the
                destinations cannot accept the messages, the other destinations do not receive any
                messages either, because syslog-ng stops reading the source. For example, if
                messages from a source are sent to a remote server and also stored locally in a
                file, and the network connection to the server becomes unavailable, neither the
                remote server nor the local file will receive any messages. This side-effect of the
                flow-control can be avoided by using the disk-based buffering feature of syslog-ng
                Premium Edition.</para>
            <note>
                <para>Creating separate log paths for the destinations that use the same
                    flow-controlled source does not avoid the problem.</para>
            </note>
        </section>
    </section>
    <section id="concepts_diskbuffer">
        <title>Using disk-based buffering</title>
        <indexterm significance="preferred">
            <primary>disk buffer</primary>
        </indexterm>
        <indexterm>
            <primary>disk-based buffering</primary>
        </indexterm>
        <indexterm>
            <primary>parameters</primary>
            <secondary>log_disk_fifo_size()</secondary>
        </indexterm>
        <!-- FIXME egysegesiteni kellene a flow control fejezettel -->
        <para>The Premium Edition of syslog-ng stores messages on the local hard disk if the central
            log server or the network connection to the server becomes unavailable. The syslog-ng
            application automatically sends the stored messages to the server when the connection is
            reestablished. The disk buffer is used as a queue: when the connection to the server is
            reestablished, syslog-ng sends the messages to the server in the order they were
            received.</para>
        <note>
            <para>Disk-based buffering can be used in conjunction with flow-control. See <xref
                    linkend="concepts_flow_control"/> for details.</para>
        </note>
        <para>Disk buffers can be used with <parameter>tcp()</parameter>,
            <parameter>tcp6()</parameter>, <parameter>syslog()</parameter> (when using the
                <parameter>tcp</parameter> or <parameter>tls</parameter> transport methods), and
                <parameter>sql()</parameter> destinations. Every such destination uses a separate
            disk buffer (similarly to the output buffers controlled by
            <parameter>log_fifo_size()</parameter>). The hard disk space is not pre-allocated, so
            ensure that there is always enough free space to store the disk buffers even when the
            disk buffers are full.</para>
        <para>If syslog-ng is restarted (using the <command>/etc/init.d/syslog-ng restart</command>
            command), it automatically saves any unsent messages of the disk buffer and the output
            queue. After the restart, syslog-ng sends the saved messages to the server. In other
            words, the disk buffer is persistent. The disk buffer is also resistant to syslog-ng crashes.</para>
        <para>The syslog-ng application handles outgoing messages the following way:</para>
        <figure>
            <title>Handling outgoing messages in syslog-ng PE</title>
            <mediaobject>
                <imageobject role="html">
                    <imagedata format="PNG" align="center" fileref="syslog-ng-message-output.png"/>
                </imageobject>
                <imageobject role="fo">
                    <imagedata format="PNG" scale="60"
                        fileref="&imgroot;/syslog-ng-message-output.png"/>
                </imageobject>
            </mediaobject>
        </figure>
        <itemizedlist>
            <listitem>
                <indexterm>
                    <primary>output queue</primary>
                </indexterm>
                <para><emphasis>Output queue</emphasis>: Messages from the output queue are sent to
                    the target syslog-ng server. The syslog-ng application puts the outgoing
                    messages directly into the output queue, unless the output queue is full. The
                    output queue can hold 64 messages, this is a fixed value and cannot be
                modified.</para>
            </listitem>
            <listitem>
                <indexterm>
                    <primary>disk queue</primary>
                    <see>disk buffer</see>
                </indexterm>
                <para><emphasis>Disk buffer</emphasis>: If the output queue is full and
                    disk-buffering is enabled, syslog-ng puts the outgoing messages into the disk
                    buffer of the destination. The disk buffer is enabled if the
                        <parameter>log_disk_fifo_size()</parameter> parameter of the destination is
                    larger than <parameter>0</parameter>; the size of the disk buffer is specified
                    in bytes.</para>
            </listitem>
            <listitem>
                <indexterm>
                    <primary>overflow queue</primary>
                    <see>output buffer</see>
                </indexterm>
                <para><emphasis>Overflow queue</emphasis>: If the output queue is full and the disk
                    buffer is disabled or full, syslog-ng puts the outgoing messages into the
                    overflow queue of the destination. (The overflow queue is identical to the
                    output buffer used by other destinations.) The
                    <parameter>log_fifo_size()</parameter> parameter specifies the number of
                    messages stored in the overflow queue. See also <xref
                        linkend="concepts_flow_control"/> for details on sizing the
                        <parameter>log_fifo_size()</parameter> parameter.</para>
            </listitem>
        </itemizedlist>
    </section>
    <section id="concepts_failover">
        <title>Client-side failover</title>
        <indexterm>
                <primary>secondary servers</primary>
            </indexterm>
            <indexterm>
                <primary>failover servers</primary>
            </indexterm>
            <indexterm>
                <primary>fail-over servers</primary>
            </indexterm>
            <indexterm>
                <primary>tcp failover</primary>
            </indexterm>
            <indexterm>
                <primary>fail-over</primary>
            </indexterm>
            <indexterm>
                <primary>client-side failover</primary>
            </indexterm>
            <indexterm>
                <primary>FailoverSyslogServer</primary>
            </indexterm>
            <para>Starting with &product; 3.2., &abbrev; can detect if the remote server of a network destination becomes unaccessible, and start sending messages to a secondary server. Multiple failover servers can be configured; so if the secondary server becomes unaccessible as well, &abbrev; will switch to the third server in the list, and so on. If there are no more failover servers left, &abbrev; returns to the beginning of a list and attempts to connect to the primary server.</para>
            <para>When &abbrev; starts up, it will always try to connect to the primary server first, but once it fails over to a secondary server, it will not automatically attempt to return to the primary server even if it becomes available. However, if the configuration of &abbrev; is reloaded, it will attempt to connect the primary server.</para>
            <para>If &abbrev; uses TLS-encryption to communicate with the remote server, &abbrev; checks the certificate of the failover server as well. The certificates of the failover servers should match their domain names or IP addresses &mdash; for details, see <xref linkend="tls_serverauth"/>. Note that when mutual authentication is used, the &abbrev; client sends the same certificate to every server.</para>
            <para>The primary server and the failover servers must be accessible with the same communication method: it is not possible to use different destination drivers or options for the different servers.</para>
            <para>For details on configuring failover servers, see <xref linkend="example-failover-server-tcp"/> and <xref linkend="example-failover-server-syslog"/>.</para>
    </section>
    <section id="concepts_licensing">
        <title>Licensing</title>
        <indexterm>
            <primary>license</primary>
        </indexterm>
        <indexterm>
            <primary>server license</primary>
        </indexterm>
        <para>The syslog-ng Premium Edition application is licensed on a per-host basis: the
            syslog-ng server accepts connections only from the number of individual hosts (also
            called log source hosts) specified in its license file.</para>
        <para>A log source host is a host or network device (including syslog-ng clients and relays)
            that sends logs to the syslog-ng server. Log source hosts can be servers, routers,
            desktop computers, or other devices capable of sending syslog messages or running
            syslog-ng. Log source hosts are identified by their IP addresses, so virtual machines
            and vhosts are separately counted. Licenses are available for 5, 10, 25, 50, 100, 150,
            200, 250, 300, 500, 750, 1000, and unlimited number of log source hosts.</para>
        <warning>
            <itemizedlist>
                <listitem>
                    <para>If the actual IP address of the host differs from the IP address received by looking up its IP address from its hostname in the DNS, the syslog-ng server counts them as two different hosts.</para>
                </listitem>
                <listitem>
                    <para>The <parameter>chain_hostnames()</parameter> option of syslog-ng can interfere
                with the way syslog-ng counts the log source hosts, causing syslog-ng to think there
                are more hosts logging to the central server. As
                <parameter>chain_hostnames()</parameter> is a deprecated option, disable it on your
                log sources to avoid any problems related to license counting.</para>
                </listitem>
            </itemizedlist>
        </warning>
        <para>Buying a syslog-ng server license permits you to perform the following:</para>
        <itemizedlist>
            <listitem>
                <para>Install the syslog-ng application in server mode to a single host. This host
                    acts as the central log server of the network.</para>
            </listitem>
            <listitem>
                <para>Install the syslog-ng application in relay or client mode on host computers.
                    The total number of hosts permitted to run syslog-ng in relay or client mode is
                    limited by the syslog-ng server license. The client and relay hosts may use any
                    operating system supported by syslog-ng. See <xref linkend="supported_platforms"
                    /> for details. </para>
            </listitem>
            <listitem>
                <para>Download software updates for a year.</para>
            </listitem>
        </itemizedlist>
        <example id="licensing_example">
            <title>Counting log source hosts</title>

            <para>Let's say that you have two facilities (for example data centers or server farms), and
                you have 80 AIX servers and 20 Microsoft Windows host at Facility 1, and 5 HP-UX
                servers and 40 Debian servers at Facility 2. That is 145 hosts altogether.</para>
            <itemizedlist>
                <listitem>
                    <para>If you want to collect the log messages of these host to a single
                        logserver, then you need a syslog-ng PE license that allows you to accept
                        logs from at least 145 hosts. (In practice this means you have to buy a
                        license for 150 hosts.)</para>
                </listitem>
                <listitem>
                    <para>If you want each facility to have its own logserver, and do not want to
                        have a central server that collects the log messages of both facilities, you
                        need two separate licenses: a license for 100 hosts at Facility 1, and a
                        license for at least 45 hosts at Facility 2 (actually you have to buy
                        license for 50 hosts).</para>
                </listitem>
                <listitem>
                    <para>If you want each facility to have its own local logserver that stores the
                        logs locally, and also want to have a central logserver that collects every
                        log message independently from the two local logserver, you need three
                        licenses: a license for 100 hosts at Facility 1, and a license for at least
                        45 hosts at Facility 2, and a license for the central logserver. The size of
                        the license on the central logserver should be 100 (the hosts at Facility 1)
                        + 45 (the hosts at Facility 2) + 2 (the two local logservers at each
                        facility) = 147 &mdash; practically thats another 150-host license.</para>
                    <note>
                        <para>If, for example, the 40 Debian servers at Facility 2 are each running
                            3 virtual hosts, then the total number of hosts at Facility 2 is 125,
                            and the license sizes should be calculated accordingly.</para>
                    </note>
                </listitem>
            </itemizedlist>
        </example>
    </section>

    <section id="concepts_high_availability">
        <title>High availability support</title>
        <indexterm>
            <primary>fail-over</primary>
        </indexterm>
        <para>Multiple syslog-ng servers can be run in fail-over mode. The syslog-ng application
            does not include any internal support for this, as clustering support must be
            implemented on the operating system level. A tool that can be used to create UNIX
            clusters is Heartbeat (see <ulink url="http://www.linux-ha.org/"
                >Linux-HA</ulink> for details).</para>
    </section>
    <section id="concepts_losing_messages">
        <title>Possible causes of losing log messages</title>
        <indexterm>
            <primary>losing messages</primary>
        </indexterm>
        <indexterm>
            <primary>message loss</primary>
        </indexterm>
        <para>During the course of a message from the sending application to the final destination
            of the message, there are a number of locations where a message may be lost, even though
            syslog-ng does its best to avoid message loss. Usually losing messages can be avoided
            with careful planning and proper configuration of syslog-ng and the hosts running
            syslog-ng. The following list shows the possible locations where messages may be lost,
            and provides methods to minimize the risk of losing messages.</para>
        <note>
            <para>The following list covers the main possibilities of losing messages, but does not
                take into account the possible use of flow-control (see <xref
                    linkend="concepts_flow_control"/>). This topic will be addressed in more detail
                in the future releases of this guide.</para>
        </note>
        <itemizedlist>
            <listitem>
                <para><emphasis>Between the application and the syslog-ng client</emphasis>: Make
                    sure to use an appropriate source to receive the logs from the application
                    (for example from <filename>/dev/log</filename>). For example, use
                        <parameter>unix-stream</parameter> instead of
                    <parameter>unix-dgram</parameter> whenever possible. </para>
            </listitem>
            <listitem>
                <para><emphasis>When syslog-ng is sending messages</emphasis>: If syslog-ng cannot
                    send messages to the destination and the output buffer gets full, syslog-ng will
                    drop messages. The number of dropped messages is displayed per destination in
                    the log message statistics of syslog-ng (see <xref
                        linkend="reference_log_statistics"/> for details). To prevent such message
                    loss, use the disk buffer of syslog-ng Premium Edition to increase the capacity
                    of your output buffer beyond that would be feasible using only a memory-based
                    buffer.</para>
            </listitem>
            <listitem>
                <para><emphasis>On the network</emphasis>: When transferring messages using the UDP
                    protocol, messages may be lost without any notice or feedback &mdash; such
                    is the nature of the UDP protocol. Always use the TCP protocol to transfer
                    messages over the network whenever possible.</para>
            </listitem>
            <listitem>
                <para><emphasis>In the socket receive buffer</emphasis>: When transferring messages
                    using the UDP protocol, the UDP datagram (i.e., the message) that reaches the
                    receiving host placed in a memory area called the <parameter>socket receive
                        buffer</parameter>. If the host receives more messages than it can process,
                    this area overflows, and the kernel drops messages without letting syslog-ng
                    know about it. Using TCP instead of UDP prevents this issue. If you must use the
                    UDP protocol, increase the size of the receive buffer using the
                        <parameter>so_rcvbuf()</parameter> option.</para>
            </listitem>
            <listitem>
                <para><emphasis>When syslog-ng is receiving messages</emphasis>: The receiving
                    syslog-ng (for example the syslog-ng server or relay) may drop messages if the fifo of
                    the destination file gets full. The number of dropped messages is displayed per
                    destination in the log message statistics of syslog-ng (see <xref
                        linkend="reference_log_statistics"/> for details). To prevent such message
                    loss, adjust the fifo appropriately for the message load and use the disk buffer
                    of syslog-ng Premium Edition. See <xref linkend="handling_large_load"/> and
                        <xref linkend="concepts_diskbuffer"/> for details.</para>
            </listitem>
            <listitem>
                <para><emphasis>When the destination cannot handle large load</emphasis>: When
                    syslog-ng is sending messages at a high rate into an SQL database, a file, or
                    another destination, it is possible that the destination cannot handle the load,
                    and processes the messages slowly. As a result, the buffers of syslog-ng fill
                    up, syslog-ng cannot process the incoming messages, and starts to loose
                    messages. See the previous entry for details. Use the
                    <parameter>throttle</parameter> parameter and the disk buffer of syslog-ng
                    Premium Edition (<xref linkend="concepts_diskbuffer"/>).</para>
            </listitem>
            <listitem>
                <para><emphasis>As a result of an unclean shutdown of the syslog-ng
                    server</emphasis>: If the host running the syslog-ng server experiences an
                    unclean shutdown, it takes time until the clients realize that the connection to
                    the syslog-ng server is down. Messages that are put into the output TCP buffer
                    of the clients during this period are not sent to the server. Since on Windows
                    the buffer of the TCP stack is 3 MB by default, such a situation can result in
                    significant message loss.</para>
            </listitem>
        </itemizedlist>

    </section>

    <section id="concepts_message_structure">
        <title>The structure of a log message</title>
        <indexterm>
            <primary>log messages, structure</primary>
        </indexterm>
        <para>The following sections describe the structure of log messages. Currently there are two
            standard syslog message formats: </para>
        <itemizedlist>
            <listitem>
                <para>The old standard described in RFC 3164 (also called the BSD-syslog or the
                    legacy-syslog protocol): see <xref linkend="concepts_message_bsdsyslog"/></para>
            </listitem>
            <listitem>
                <para>The new standard described in RFC 5424 (also called the IETF-syslog protocol):
                    see <xref linkend="concepts_message_ietfsyslog"/></para>
            </listitem>
        </itemizedlist>

        <section id="concepts_message_bsdsyslog">
            <title>BSD-syslog or legacy-syslog messages</title>
            <indexterm>
                <primary>log messages, structure</primary>
                <secondary>BSD-syslog protocol</secondary>
            </indexterm>
            <indexterm>
                <primary>log messages, structure</primary>
                <secondary>legacy-syslog protocol</secondary>
            </indexterm>
            <indexterm>
                <primary>log messages, structure</primary>
                <secondary>RFC 3164</secondary>
            </indexterm>
            <para>This section describes the format of a syslog message, according to the
                legacy-syslog or BSD-syslog protocol (see <ulink
                    url="http://www.ietf.org/rfc/rfc3164.txt"
                >RFC 3164</ulink>). A syslog message consists of the
                following parts: </para>
            <itemizedlist>
                <listitem>
                    <para>
                        <parameter>
                            <link linkend="bsdsyslog_pri">PRI</link>
                        </parameter>
                    </para>
                </listitem>
                <listitem>
                    <para>
                        <parameter>
                            <link linkend="bsdsyslog_header">HEADER</link>
                        </parameter>
                    </para>
                </listitem>
                <listitem>
                    <para>
                        <parameter>
                            <link linkend="bsdsyslog_msg">MSG</link>
                        </parameter>
                    </para>
                </listitem>
            </itemizedlist>
            <para>The total message cannot be longer than 1024 bytes.</para>
            <para>The following is a sample syslog message: <parameter>&lt;133&gt;Feb 25
                    14:09:07 webserver syslogd: restart</parameter>. The message corresponds to the
                following format: <parameter>&lt;priority&gt;timestamp hostname application:
                    message</parameter>. The different parts of the message are explained in the
                following sections.</para>
            <note>
                <para>The syslog-ng application supports longer messages as well. For details, see
                    the <parameter>log_msg_size()</parameter> option in <xref
                        linkend="reference_options"/>. However, it is not recommended to enable
                    messages larger than the packet size when using UDP destinations.</para>
            </note>
            <section id="bsdsyslog_pri">
                <title>The PRI message part</title>
                <para>The PRI part of the syslog message (known as Priority value) represents the
                    Facility and Severity of the message. Facility represents the part of the system
                    sending the message, while severity marks its importance. The Priority value is
                    calculated by first multiplying the Facility number by 8 and then adding the
                    numerical value of the Severity. The possible facility and severity values are
                    presented below.</para>
                <note>
                    <para>Facility codes may slightly vary between different platforms. The
                        syslog-ng application accepts facility codes as numerical values as well.
                    </para>
                </note>
                <table>
                    <title>syslog Message Facilities</title>
                    <?dbfo keep-together="auto" ?>
                    <indexterm>
                        <primary>facilities</primary>
                    </indexterm>
                    <indexterm>
                        <primary>message facilities</primary>
                    </indexterm>
                    <tgroup cols="2">
                        <thead>
                            <row>
                                <entry>Numerical Code</entry>
                                <entry>Facility</entry>
                            </row>
                        </thead>
                        <tbody>
                            <row>
                                <entry>0</entry>
                                <entry>kernel messages</entry>
                            </row>
                            <row>
                                <entry>1</entry>
                                <entry>user-level messages</entry>
                            </row>
                            <row>
                                <entry>2</entry>
                                <entry>mail system</entry>
                            </row>
                            <row>
                                <entry>3</entry>
                                <entry>system daemons</entry>
                            </row>
                            <row>
                                <entry>4</entry>
                                <entry>security/authorization messages</entry>
                            </row>
                            <row>
                                <entry>5</entry>
                                <entry>messages generated internally by syslogd</entry>
                            </row>
                            <row>
                                <entry>6</entry>
                                <entry>line printer subsystem</entry>
                            </row>
                            <row>
                                <entry>7</entry>
                                <entry>network news subsystem</entry>
                            </row>
                            <row>
                                <entry>8</entry>
                                <entry>UUCP subsystem</entry>
                            </row>
                            <row>
                                <entry>9</entry>
                                <entry>clock daemon</entry>
                            </row>
                            <row>
                                <entry>10</entry>
                                <entry>security/authorization messages</entry>
                            </row>
                            <row>
                                <entry>11</entry>
                                <entry>FTP daemon</entry>
                            </row>
                            <row>
                                <entry>12</entry>
                                <entry>NTP subsystem</entry>
                            </row>
                            <row>
                                <entry>13</entry>
                                <entry>log audit</entry>
                            </row>
                            <row>
                                <entry>14</entry>
                                <entry>log alert</entry>
                            </row>
                            <row>
                                <entry>15</entry>
                                <entry>clock daemon</entry>
                            </row>
                            <row>
                                <entry>16-23</entry>
                                <entry>locally used facilities (local0-local7)</entry>
                            </row>
                        </tbody>
                    </tgroup>
                </table>
                <para>The following table lists the severity values.</para>
                <table>
                    <title>syslog Message Severities</title>
                    <tgroup cols="2">
                        <thead>
                            <row>
                                <entry>Numerical Code</entry>
                                <entry>Severity</entry>
                            </row>
                        </thead>
                        <tbody>
                            <row>
                                <entry>0</entry>
                                <entry>Emergency: system is unusable</entry>
                            </row>
                            <row>
                                <entry>1</entry>
                                <entry>Alert: action must be taken immediately</entry>
                            </row>
                            <row>
                                <entry>2</entry>
                                <entry>Critical: critical conditions</entry>
                            </row>
                            <row>
                                <entry>3</entry>
                                <entry>Error: error conditions</entry>
                            </row>
                            <row>
                                <entry>4</entry>
                                <entry>Warning: warning conditions</entry>
                            </row>
                            <row>
                                <entry>5</entry>
                                <entry>Notice: normal but significant condition</entry>
                            </row>
                            <row>
                                <entry>6</entry>
                                <entry>Informational: informational messages</entry>
                            </row>
                            <row>
                                <entry>7</entry>
                                <entry>Debug: debug-level messages</entry>
                            </row>
                        </tbody>
                    </tgroup>
                </table>
            </section>
            <section id="bsdsyslog_header">
                <title>The HEADER message part</title>
                <indexterm>
                    <primary>timestamp</primary>
                </indexterm>
                <indexterm>
                    <primary>local time</primary>
                </indexterm>
                <para> The HEADER part contains a timestamp and the hostname (without the domain
                    name) or the IP address of the device. The timestamp field is the local time in
                    the <parameter>Mmm dd hh:mm:ss</parameter> format, where: </para>
                <itemizedlist>
                    <listitem>
                        <para>
                            <emphasis>Mmm</emphasis> is the English abbreviation of the month: Jan,
                            Feb, Mar, Apr, May, Jun, Jul, Aug, Sep, Oct, Nov, Dec. </para>
                    </listitem>
                    <listitem>
                        <para>
                            <emphasis>dd</emphasis> is the day of the month on two digits. If the
                            day of the month is less than 10, the first digit is replaced with a
                            space. (For example <parameter>Aug 7</parameter>.) </para>
                    </listitem>
                    <listitem>
                        <para>
                            <emphasis>hh:mm:ss</emphasis> is the local time. The hour (hh) is
                            represented in a 24-hour format. Valid entries are between 00 and 23,
                            inclusive. The minute (mm) and second (ss) entries are between 00 and 59
                            inclusive. </para>
                    </listitem>
                </itemizedlist>
                <note>
                    <para>The syslog-ng application supports other timestamp formats as well, like
                        ISO, or the PIX extended format. For details, see the
                        <parameter>ts_format()</parameter> option in <xref
                            linkend="reference_options"/>.</para>
                </note>
            </section>
            <section id="bsdsyslog_msg">
                <title>The MSG message part</title>
                <para>The MSG part contains the name of the program or process that generated the
                    message, and the text of the message itself. The MSG part is usually in the
                    following format: <parameter>program[pid]: message text</parameter>.</para>
            </section>
        </section>
        <section id="concepts_message_ietfsyslog">
            <title>IETF-syslog messages</title>
            <indexterm>
                <primary>log messages, structure</primary>
                <secondary>IETF-syslog protocol</secondary>
            </indexterm>
            <indexterm>
                <primary>log messages, structure</primary>
                <secondary>RFC 5424</secondary>
            </indexterm>
            <para>This section describes the format of a syslog message, according to the
                IETF-syslog protocol (see <ulink
                    url="http://tools.ietf.org/html/rfc5424"
                >RFC 5424-5428</ulink>).A syslog message consists of the
                following parts: </para>
            <itemizedlist>
                <listitem>
                    <para>
                        <parameter>
                            <link linkend="ietfsyslog_header">HEADER</link> (includes the <parameter>
                                <link linkend="ietfsyslog_pri">PRI</link>
                            </parameter> as well) </parameter>
                    </para>
                </listitem>
                <listitem>
                    <para>
                        <parameter>
                            <link linkend="ietfsyslog_structureddata">STRUCTURED-DATA</link>
                        </parameter>
                    </para>
                </listitem>
                <listitem>
                    <para>
                        <parameter>
                            <link linkend="ietfsyslog_msg">MSG</link>
                        </parameter>
                    </para>
                </listitem>
            </itemizedlist>
            <!--FIXME update
                <para>The total message must be shorter than 1024 bytes.</para>
            <note>
                <para>The syslog-ng application supports longer messages as well. For details, see
                    the <parameter>log_msg_size()</parameter> option in <xref
                        linkend="reference_options"/>. However, it is not recommended to enable
                    messages larger than the packet size when using UDP destinations.</para>
            </note>
            -->
            <para>The following is a sample syslog message:<footnote>
                    <para>Source: http://tools.ietf.org/html/rfc5424</para>
                </footnote></para>
            <synopsis>&lt;34&gt;1 2003-10-11T22:14:15.003Z mymachine.example.com su - ID47 - BOM'su root' failed for lonvick on /dev/pts/8</synopsis>
            <para>The message corresponds to the following format: </para>
            <synopsis>&lt;priority&gt;VERSION ISOTIMESTAMP HOSTNAME APPLICATION PID MESSAGEID STRUCTURED-DATA MSG</synopsis>
            <para>In this example, the Facility has the value of 4, severity is 2, so PRI is 34. The
                VERSION is 1. The message was created on 11 October 2003 at 10:14:15pm UTC, 3
                milliseconds into the next second. The message originated from a host that
                identifies itself as "mymachine.example.com". The APP-NAME is "su" and the PROCID is
                unknown. The MSGID is "ID47". The MSG is "'su root' failed for lonvick...", encoded
                in UTF-8. The encoding is defined by the BOM. There is no STRUCTURED-DATA present in
                the message, this is indicated by "-" in the STRUCTURED-DATA field. The MSG is "'su
                root' failed for lonvick...".</para>
            <para>The HEADER part of the message must be in plain ASCII format, the parameter values
                of the STRUCTURED-DATA part must be in UTF-8, while the MSG part should be in UTF-8.
                The different parts of the message are explained in the following sections.</para>
            <section id="ietfsyslog_pri">
                <title>The PRI message part</title>
                <para>The PRI part of the syslog message (known as Priority value) represents the
                    Facility and Severity of the message. Facility represents the part of the system
                    sending the message, while severity marks its importance. The Priority value is
                    calculated by first multiplying the Facility number by 8 and then adding the
                    numerical value of the Severity. The possible facility and severity values are
                    presented below.</para>
                <note>
                    <para>Facility codes may slightly vary between different platforms. The
                        syslog-ng application accepts facility codes as numerical values as well.
                    </para>
                </note>
                <table>
                    <title>syslog Message Facilities</title>
                    <?dbfo keep-together="auto" ?>
                    <indexterm>
                        <primary>facilities</primary>
                    </indexterm>
                    <indexterm>
                        <primary>message facilities</primary>
                    </indexterm>
                    <tgroup cols="2">
                        <thead>
                            <row>
                                <entry>Numerical Code</entry>
                                <entry>Facility</entry>
                            </row>
                        </thead>
                        <tbody>
                            <row>
                                <entry>0</entry>
                                <entry>kernel messages</entry>
                            </row>
                            <row>
                                <entry>1</entry>
                                <entry>user-level messages</entry>
                            </row>
                            <row>
                                <entry>2</entry>
                                <entry>mail system</entry>
                            </row>
                            <row>
                                <entry>3</entry>
                                <entry>system daemons</entry>
                            </row>
                            <row>
                                <entry>4</entry>
                                <entry>security/authorization messages</entry>
                            </row>
                            <row>
                                <entry>5</entry>
                                <entry>messages generated internally by syslogd</entry>
                            </row>
                            <row>
                                <entry>6</entry>
                                <entry>line printer subsystem</entry>
                            </row>
                            <row>
                                <entry>7</entry>
                                <entry>network news subsystem</entry>
                            </row>
                            <row>
                                <entry>8</entry>
                                <entry>UUCP subsystem</entry>
                            </row>
                            <row>
                                <entry>9</entry>
                                <entry>clock daemon</entry>
                            </row>
                            <row>
                                <entry>10</entry>
                                <entry>security/authorization messages</entry>
                            </row>
                            <row>
                                <entry>11</entry>
                                <entry>FTP daemon</entry>
                            </row>
                            <row>
                                <entry>12</entry>
                                <entry>NTP subsystem</entry>
                            </row>
                            <row>
                                <entry>13</entry>
                                <entry>log audit</entry>
                            </row>
                            <row>
                                <entry>14</entry>
                                <entry>log alert</entry>
                            </row>
                            <row>
                                <entry>15</entry>
                                <entry>clock daemon</entry>
                            </row>
                            <row>
                                <entry>16-23</entry>
                                <entry>locally used facilities (local0-local7)</entry>
                            </row>
                        </tbody>
                    </tgroup>
                </table>
                <para>The following table lists the severity values.</para>
                <table>
                    <title>syslog Message Severities</title>
                    <tgroup cols="2">
                        <thead>
                            <row>
                                <entry>Numerical Code</entry>
                                <entry>Severity</entry>
                            </row>
                        </thead>
                        <tbody>
                            <row>
                                <entry>0</entry>
                                <entry>Emergency: system is unusable</entry>
                            </row>
                            <row>
                                <entry>1</entry>
                                <entry>Alert: action must be taken immediately</entry>
                            </row>
                            <row>
                                <entry>2</entry>
                                <entry>Critical: critical conditions</entry>
                            </row>
                            <row>
                                <entry>3</entry>
                                <entry>Error: error conditions</entry>
                            </row>
                            <row>
                                <entry>4</entry>
                                <entry>Warning: warning conditions</entry>
                            </row>
                            <row>
                                <entry>5</entry>
                                <entry>Notice: normal but significant condition</entry>
                            </row>
                            <row>
                                <entry>6</entry>
                                <entry>Informational: informational messages</entry>
                            </row>
                            <row>
                                <entry>7</entry>
                                <entry>Debug: debug-level messages</entry>
                            </row>
                        </tbody>
                    </tgroup>
                </table>
            </section>
            <section id="ietfsyslog_header">
                <title>The HEADER message part</title>
                <indexterm>
                    <primary>timestamp</primary>
                </indexterm>
                <indexterm>
                    <primary>local time</primary>
                </indexterm>
                <para>The HEADER part contains the following elements:</para>
                <itemizedlist>
                    <listitem>
                        <para><emphasis>VERSION</emphasis>: Version number of the syslog protocol
                            standard. Currently this can only be <parameter>1</parameter>.</para>
                    </listitem>
                    <listitem>
                        <para><emphasis>ISOTIMESTAMP</emphasis>: The time when the message was
                            generated in the ISO 8601 compatible standard timestamp format
                            (yyyy-mm-ddThh:mm:ss+-ZONE), for example:
                                <parameter>2006-06-13T15:58:00.123+01:00</parameter>.</para>
                    </listitem>
                    <listitem>
                        <para><emphasis>HOSTNAME</emphasis>: The machine that originally sent the
                            message.</para>
                    </listitem>
                    <listitem>
                        <para><emphasis>APPLICATION</emphasis>: The device or application that
                            generated the message</para>
                    </listitem>
                    <listitem>
                        <para><emphasis>PID</emphasis>: The process name or process ID of the syslog
                            application that sent the message. It is not necessarily the process ID
                            of the application that generated the message.</para>
                    </listitem>
                    <listitem>
                        <para><emphasis>MESSAGEID</emphasis>: The ID number of the message.</para>
                    </listitem>
                </itemizedlist>
                <note>
                    <para>The syslog-ng application supports other timestamp formats as well, like
                        ISO, or the PIX extended format. The timestamp used in the IETF-syslog
                        protocol is derived from RFC3339, which is based on ISO8601. For details,
                        see the <parameter>ts_format()</parameter> option in <xref
                            linkend="reference_options"/>.</para>
                </note>
            </section>
            <section id="ietfsyslog_structureddata">
                <title>The STRUCTURED-DATA message part</title>
                <para>The STRUCTURED-DATA message part may contain meta- information about the
                    syslog message, or application-specific information such as traffic counters or
                    IP addresses. STRUCTURED-DATA consists of data blocks enclosed in brackets
                        (<parameter>[]</parameter>). Every block include the ID of the block, and
                    one or more <parameter>name=value</parameter> pairs. The syslog-ng application
                    automatically parses the STRUCTURED-DATA part of syslog messages, which can be
                    referenced in macros (see <xref linkend="reference_macros"/> for details). An
                    example STRUCTURED-DATA block looks like:</para>
                <synopsis>[exampleSDID@0 iut="3" eventSource="Application" eventID="1011"][examplePriority@0 class="high"]</synopsis>
            </section>

            <section id="ietfsyslog_msg">
                <title>The MSG message part</title>
                <para>The MSG part contains the text of the message itself. The encoding of the text
                    must be UTF-8 if the BOM character is present in the message. If the message
                    does not contain the BOM character, the encoding is treated as unknown. Usually
                    messages arriving from legacy sources do not include the BOM character.</para>
            </section>
        </section>

    </section>
</chapter>
