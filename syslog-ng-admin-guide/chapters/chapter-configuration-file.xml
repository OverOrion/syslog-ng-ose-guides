<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter SYSTEM "../../xml-stylesheet/pdf/dtd/docbookx.dtd"
 [  
<!ENTITY % entities SYSTEM "../syslog-ng-entities.ent">
 %entities;]> 
<chapter id="chapter-configuration-file">
    <title>The &abbrev; configuration file</title>
    <section id="config_file">
        <title>The syslog-ng configuration file</title>
        <para>The syslog-ng application is configured by editing the
            <filename>syslog-ng.conf</filename> file. Use any regular text editor application to
            modify the file.<phrase condition="pe"> The <filename>syslog-ng.conf</filename> and <filename>license.txt</filename> files are
            located under the <filename>/opt/syslog-ng/etc/</filename> directory.</phrase></para>
        <note condition="pe">
            <para>Earlier versions of syslog-ng PE stored the configuration and license files under
                different directories, depending on the platform; typically under
                    <filename>/etc/syslog-ng/</filename>.</para>
        </note>
        <note condition="pe">
			<para>On Microsoft Windows platforms the &agent; stores its configuration in the
            system registry or in an XML file, and can be configured from a graphical interface. For details, see <olink
            targetdoc="syslog-ng-windows-agent-guide-admin-en"/>.</para>
        </note>
        <section id="configuration-syntax">
            <title>The configuration syntax in detail</title>
            <indexterm significance="preferred">
                <primary>syslog-ng.conf</primary>
            </indexterm>
            <para>Every syslog-ng configuration file must begin with a line containing the version
                information of syslog-ng. For syslog-ng version &version;, this line looks like:</para>
            <synopsis>@version: &techversion;</synopsis>
            <para>Versioning the configuration file was introduced in syslog-ng 3.0. If the configuration file does not contain the version information, syslog-ng assumes
                that the file is for syslog-ng version 2.x. In this case it interprets the configuration
                and sends warnings about the parts of the configuration that should be updated. Version
                3.0 and later will correctly operate with configuration files of version 2.x, but the
                default values of certain parameters have changed since 3.0.</para>
            <example>
                <title>A simple configuration file</title>
                <para>The following is a very simple configuration file for syslog-ng: it collects the
                    internal messages of syslog-ng and the messages from <parameter>/dev/log</parameter>
                    into the <filename>/var/log/messages_syslog-ng.log</filename> file.</para>
                <synopsis>@version: &techversion;

source s_local { unix-stream("/dev/log"); internal(); };

destination d_file {file("/var/log/messages_syslog-ng.log"); };

log { source(s_local); destination(d_file); };</synopsis>
            </example>
            <para>As a syslog-ng user described on a <ulink url="http://www.gossamer-threads.com/lists/gentoo/user/209108">mailing list</ulink>:</para>
            <blockquote><attribution>Alan McKinnon</attribution>
                <para><parameter>Syslog-ng's config file format was written by programmers for programmers to be understood by programmers. That may not have been the stated intent, but it is how things turned out. The syntax is exactly that of C, all the way down to braces and statement terminators.</parameter></para>
            </blockquote>
            <itemizedlist id="global_objects_syntax">
                <listitem>
                    <para>The main body of the configuration file consists of object definitions: sources, destinations, logpaths define which log message are received and where they are sent. All identifiers, option names and attributes, and any other strings used in the syslog-ng configuration file are case sensitive. Objects must be defined before they are referenced in another statement. Object definitions (also called statements) have the following syntax:</para>
                    <synopsis>object_type object_id {&lt;options&gt;};</synopsis>
                    <itemizedlist>
                        <listitem>
                            <para><emphasis>Type of the object</emphasis>: One of <parameter>source</parameter>,
                                    <parameter>destination</parameter>, <parameter>log</parameter>,
                                    <parameter>filter</parameter>, <parameter>parser</parameter>,
                                    <parameter>rewrite</parameter> rule, or
                            <parameter>template</parameter>.</para>
                        </listitem>
                        <listitem>
                            <para><emphasis>Identifier of the object</emphasis>: A unique name identifying the
                                object. When using a reserved word as an identifier, enclose the identifier in
                                quotation marks.</para>
                            <tip>
                                <para>Use identifiers that refer to the type of the object they identify. For
                                    example, prefix source objects with <parameter>s_</parameter>, destinations
                                    with <parameter>d_</parameter>, and so on. </para>
                            </tip>
                        </listitem>
                        <listitem>
                            <para><emphasis>Parameters</emphasis>: The parameters of the object, enclosed in
                                braces <parameter>{parameters}</parameter>.</para>
                        </listitem>
                        <listitem>
                            <para><emphasis>Semicolon</emphasis>: Object definitions end with a semicolon
                                    (<parameter>;</parameter>).</para>
                        </listitem>
                    </itemizedlist>
                    <para>For example, the following line defines a source and calls it <parameter>s_internal</parameter>.</para>
                    <synopsis>source s_internal { internal(); };</synopsis>
                    <para>The object can be later referenced in other statements using its ID, for example, the previous source is used as a parameter of the following log statement:</para>
                    <synopsis>log { source(s_internal); destination(d_file); };</synopsis>
                </listitem>
                <listitem>
                    <para>The parameters and options within a statement are similar to function calls of the C programming language: the name of the option followed by a list of its parameters enclosed within brackets and terminated with a semicolon.</para>
                    <synopsis>option(parameter1, parameter2); option2(parameter1, parameter2);</synopsis>
                    <para>For example, the following source statement has three options; the first two options (<parameter>file()</parameter> and <parameter>follow_freq()</parameter>) have a single parameter, while the third one (<parameter>flags()</parameter>) has two parameters:</para>
                    <synopsis>source s_tail { file("/var/log/apache/access.log" 
    follow_freq(1) flags(no-parse, validate-utf8)); };</synopsis>
                     <para>Objects may have required and optional parameters. Required parameters are positional, meaning that they must be specified in a defined order. Optional parameters can be specified in any order using the <literal>option(value)</literal> format. If a parameter (optional or required) is not specified, its default value is used. The parameters and their default values are listed in the reference section of the particular object.</para>
                    <example>
                        <title>Using required and optional parameters</title>
                        <para>The <parameter>unix-stream()</parameter> source driver has a single required
                            argument: the name of the socket to listen on. Optional parameters follow the socket
                            name in any order, so the following source definitions have the same effect: </para>
                        <synopsis>source s_demo_stream1 { 
        unix-stream("/dev/log" max-connections(10) group(log)); };
source s_demo_stream2 { 
        unix-stream("/dev/log" group(log) max-connections(10)); };</synopsis>
                    </example>
                </listitem>
                <listitem>
                    <para>Some options are global options, or can be set globally, for example, whether &abbrev; should use DNS resolution to resolve IP addresses. Global options are detailed in <xref linkend="chapter-global-options"/>.</para>
                    <synopsis>options { use_dns(no); };</synopsis>
                </listitem>
                <listitem>
                    <para>All identifiers, attributes, and any other strings used in the syslog-ng configuration file are case sensitive.</para>
                </listitem>
                <listitem>
                    <para>Objects can be used before definition.</para>
                </listitem>
               <listitem>
                    <para>To add comments to the configuration file, start a line with <parameter>#</parameter> and write your comments. These lines are ignored by syslog-ng.</para>
                    <synopsis># Comment: This is a stream source
source s_demo_stream { 
        unix-stream("/dev/log" max-connections(10) group(log)); };</synopsis>
                </listitem>
            </itemizedlist>
            <tip>
                <para>Before activating a new configuration, check that your configuration file is
                    syntactically correct using the <command>syslog-ng --syntax-only</command> command.</para>
                <para>To activate the configuration, reload the configuration of syslog-ng using the
                        <command>/etc/init.d/syslog-ng reload</command> command.</para>
            </tip>
        </section>
        <section id="configfile_syntax">
            <title>Notes about the configuration syntax</title>
            <para>When you are editing the syslog-ng configuration file, note the following points:</para>
            <itemizedlist>
                <listitem>
                    <para>When writing the names of options and parameters (or other reserved
                        words), the hyphen (<parameter>-</parameter>) and underscore
                        (<parameter>_</parameter>) characters are equivalent, for example
                            <parameter>max-connections(10)</parameter> and
                            <parameter>max_connections(10)</parameter> are both correct.</para>
                </listitem>
                <listitem>
                    <para>Number can be prefixed with <parameter>+</parameter> or
                        <parameter>-</parameter> to indicate positive or negative values. Numbers
                        beginning with zero (<parameter>0</parameter>) or <parameter>0x</parameter>
                        are treated as octal or hexadecimal numbers, respectively.</para>
                </listitem>
                <listitem>
                    <para>You can use commas (<parameter>,</parameter>) to separate options or other
                        parameters for readability; syslog-ng completely ignores them. The following
                        declarations are equivalent:</para>
                    <synopsis>source s_demo_stream { 
        unix-stream("/dev/log" max-connections(10) group(log)); };</synopsis>
                    <synopsis>source s_demo_stream { 
        unix-stream("/dev/log", max-connections(10), group(log)); };</synopsis>
                </listitem>
                <listitem>
                    <para>When enclosing object IDs (for example the name of a destination) between
                        double-quotes (<parameter>"mydestination"</parameter>), the ID can include
                        whitespace as well, for example:</para>
                    <synopsis>source "s demo stream" { 
        unix-stream("/dev/log" max-connections(10) group(log)); };</synopsis>
                </listitem>
                <listitem>
                    <para>For notes on using regular expressions, see <xref linkend="regular-expressions"/>.</para>
                </listitem>
            </itemizedlist>
        </section>
    </section>
    <section id="config-global-variables">
        <title>Global and environmental variables</title>
        <indexterm>
                <primary>syslog-ng.conf</primary>
                <secondary>global variables</secondary>
        </indexterm>
        <indexterm>
                <primary>syslog-ng.conf</primary>
                <secondary>environmental variables</secondary>
        </indexterm>
        <indexterm>
                <primary>environmental variables</primary>
        </indexterm>
        <indexterm>
                <primary>global variables</primary>
        </indexterm>
        <indexterm type="parameter">
            <primary>@define</primary>
        </indexterm>
        <para>Starting with &abbrev; version <phrase condition="ose">3.2</phrase><phrase condition="pe">4.1</phrase>, it is possible to define global variables in the configuration file. Global variables are actually <parameter>name-value</parameter> pairs; when syslog-ng processes the configuration file during startup, it automatically replaces <parameter>`name`</parameter> with <parameter>value</parameter>. To define a global variable, use the following syntax:</para>
        <synopsis>@define name "value"</synopsis>
        <para>The value can be any string, but special characters must be escaped.<!-- FIXME link az escapelos reszre -->To use the variable, insert the name of the variable enclosed between backticks (<parameter>`</parameter>, similarly to using variables in Linux or UNIX shells) anywhere in the configuration file.</para>
        <para>The value of the global variable can be also specified using the following methods:</para>
        <itemizedlist>
            <listitem>
                <para>Without any quotes, as long as the value does not contain any spaces or special characters. In other word, it contains only the following characters: <parameter>a-zA-Z0-9_.</parameter>.</para>
            </listitem>
            <listitem>
                <para>Between apostrophes, in case the value does not contain apostrophes.</para>
            </listitem>
            <listitem>
                <para>Between double quotes, in which case special characters must be escaped using backslashes (<parameter>\</parameter>).</para>
            </listitem>
        </itemizedlist>
        <tip>
            <para>The environmental variables of the host are automatically imported and can be used as global variables.</para>
        </tip>
        <example id="example-global-variables">
            <title>Using global variables</title>
            <para>For example, if an application is creating multiple log files in a directory, you can store the path in a global variable, and use it in your source definitions.</para>
            <synopsis>@define mypath "/opt/myapp/logs"
        source s_myapp_1 { file("`mypath`/access.log" follow_freq(1)); };
        source s_myapp_2 { file("`mypath`/error.log" follow_freq(1)); };
        source s_myapp_3 { file("`mypath`/debug.log" follow_freq(1)); };</synopsis>
            <para>The &abbrev; application will interpret this as:</para>
            <synopsis>@define mypath "/opt/myapp/logs"
        source s_myapp_1 { file("/opt/myapp/logs/access.log" follow_freq(1)); };
        source s_myapp_2 { file("/opt/myapp/logs/error.log" follow_freq(1)); };
        source s_myapp_3 { file("/opt/myapp/logs/debug.log" follow_freq(1)); };</synopsis>
        </example>
        <!-- FIXME escapelos peldat is -->
    </section>
    <section id="logchksign" condition="pe">
		<title>Logging configuration changes</title>
		<indexterm>
			<primary>syslog-ng.conf</primary>
			<secondary>fingerprint</secondary>
		</indexterm>
		<indexterm>
			<primary>configuration file</primary>
			<secondary>detecting changes</secondary>
		</indexterm>
		<indexterm>
			<primary>logchksign</primary>
		</indexterm>
		<para>Every time syslog-ng is started, or its configuration is reloaded, it
			automatically logs the SHA-1 fingerprint of its configuration file using the
				<parameter>internal</parameter> message source. That way any modification of the
			configuration of your syslog-ng clients is visible in the central logs. Note that
			the log message does not contain the exact change, nor can the configuration file be
			retrieved from the fingerprint. Only the fact of the configuration change can be
			detected.</para>
        <note>
            <para>Modular configuration files that are included in the main configuration file of &abbrev; are included when the fingerprint is calculated. However, other external files (for example, scripts used in program sources or destinations) are excluded, therefore their modifications do not change the fingerprint.</para>
        </note>
		<para>The fingerprint can be examined with the <command>logchksign</command>
			command-line application, which detects that the fingerprint was indeed generated by
			a syslog-ng application. Just paste the hashes from the log message after the
			logchksign command like in the following example: </para>
		<synopsis>bin/logchksign "cfg-fingerprint='832ef664ff79df8afc66cd955c0c8aaa3c343f31', cfg-nonce-ndx='0', cfg-signature='785223cfa19ad52b855550be141b00306347b0a9'"</synopsis>
    </section>
    <section id="modules">
        <title>Modules and plugins in &abbrev;</title>
        <indexterm>
            <primary>modules</primary>
        </indexterm>
        <indexterm>
            <primary>plugins</primary>
            <see>modules</see>
        </indexterm>
        <para>Starting with &product; version <phrase condition="ose">3.3</phrase><phrase condition="pe">4.1</phrase>, &abbrev; became modular to increase its flexibility and also to simplify the development of additional modules. Most of the functionality of &abbrev; has been moved to separate modules. That way it becomes also possible to finetune the resource requirements of &abbrev; for example, by loading only the modules that are actually used in the configuration, or simply omitting modules that are not used but require large amount of memory.</para>
        <para>Each module contains one or more plugins, which add some functionality to &abbrev;, for example, a destination or a source driver.</para>
        <itemizedlist>
            <listitem>
                <para>To display the list of available modules, execute the <command>syslog-ng --version</command> command.</para>
            </listitem>
            <listitem>
                <para>To the description of the available modules, execute the <command>syslog-ng --module-registry</command> command.</para>
            </listitem>
            <listitem>
                <para>To customize which modules are loaded automatically when &abbrev; is started, use the <parameter>--default-modules</parameter> command-line option of &abbrev;.</para>
            </listitem>
            <listitem>
                <para>To request loading a module from the &abbrev; configuration file, see <xref linkend="modules-loading"/>.</para>
            </listitem>
        </itemizedlist>
        <para>For details on the command-line parameters of &abbrev; mentioned in the previous list, see the &abbrev; man page at <xref linkend="syslog-ng.8"/>.</para>
        <section id="modules-loading">
            <title>Loading modules</title>
            <indexterm>
                <primary>modules</primary>
            </indexterm>
            <indexterm>
                <primary>plugins</primary>
                <see>modules</see>
            </indexterm>
            <indexterm type="parameter">
                <primary>@module</primary>
            </indexterm>
            <para>The &product; application loads every available module during startup<phrase condition="pe">, except the <parameter>snmp</parameter> module. For details on using the <parameter>snmp()</parameter> destination driver, see <xref linkend="configuring-destinations-snmp"/></phrase>.</para>
            <para>To load a module that is not loaded automatically, include the following statement in the &abbrev; configuration file:</para>
            <synopsis>@module &lt;module-name&gt;</synopsis>
            <para>Note the following points about the <parameter>@module</parameter> statement:</para>
            <itemizedlist>
                <listitem>
                    <para>The <parameter>@module</parameter> statement is a top-level statement, that is, it cannot be nested into any other statement. Usually it is used immediately after the <parameter>@version</parameter> statement.</para>
                </listitem>
                <listitem>
                    <para>Every <parameter>@module</parameter> statement loads a single module: loading multiple modules requires a separate <parameter>@module</parameter> statement for every module.</para>
                </listitem>
                <listitem>
                    <para>In the configuration file, the <parameter>@module</parameter> statement of a module must be earlier than the module is used.</para>
                </listitem>
            </itemizedlist>
        </section>
    </section>
    <section id="large-configs">
        <title>Managing large syslog-ng configurations</title>
        <para>The following sections describe some methods that can be useful to simplify the management of large-scale syslog-ng installations.</para>
        <section id="including-config-files">
            <title>Including configuration files</title>
            <indexterm>
                <primary>syslog-ng.conf</primary>
                <secondary>includes</secondary>
            </indexterm>
            <indexterm>
                <primary>configuration file</primary>
                <secondary>including other files</secondary>
            </indexterm>
            <indexterm type="parameter">
                <primary>@include</primary>
            </indexterm>
            <para>The syslog-ng application supports including external files in its configuration
                file, so parts of its configuration can be managed separately. To include the
                contents of a file in the syslog-ng configuration, use the following syntax</para>
            <synopsis>include "&lt;filename&gt;";</synopsis>
            <para>Where &lt;filename&gt; can be file name, path or even a directory (where all files are included, except files beginning with ~ (tilde) or . (dot)). Including a directory is not recursive.</para>
            <para>This imports the entire file into the configuration of syslog-ng, at the location
                of the include statement. If you specify a directory, syslog-ng will try to include
                every file in alphabetic order. When including configuration files, consider the
                following points:</para>
            <itemizedlist>
                <listitem>
                    <para>If an object is defined twice (for example the original syslog-ng configuration
                        file and the file imported into this configuration file both define the same
                        option, source, or other object), then the object that is defined later in
                        the configuration file will be effective. For example, if you set a global
                        option at the beginning of the configuration file, and later include a file
                        that defines the same option with a different value, then the option defined
                        in the imported file will be used.</para>
                </listitem>
                <listitem>
                    <para>Files can be embedded into each other: the included files can contain
                        include statements as well, up to a maximum depth of 15 levels.</para>
                </listitem>
                <listitem>
                    <para>Include statements can only be used at top level of the configuration
                        file. For example, the following is correct:</para>
                    <synopsis>@version: &techversion;
include "example.conf";</synopsis>
                    <para>But the following is not:</para>
                    <synopsis>source s_example {
    include "example.conf"
     };</synopsis>
                </listitem>
            </itemizedlist>
            <warning>
                <para>The syslog-ng application will not start if it cannot find a file that is to
                    be included in its configuration. Always double-check the filenames, paths, and
                    access rights when including configuration files, and use the
                        <command>--syntax-only</command> command-line option to check your
                    configuration.</para>
            </warning>
        </section>
        <section id="config-blocks">
            <title>Reusing configuration blocks</title>
            <indexterm>
                <primary>configuration snippets</primary>
            </indexterm>
            <indexterm>
                <primary>reusing snippets</primary>
            </indexterm>
            <indexterm type="parameter">
                <primary>block</primary>
            </indexterm>
            <para>Starting with &abbrev; <phrase condition="ose">3.2</phrase><phrase condition="pe">4.1</phrase>, parts of a configuration file can be easily reused, you have to define the block (for example, a source) once, and reference it later. Any syslog-ng object can be a block. Use the following syntax to define a block:</para>
            <synopsis>block type name() {&lt;contents of the block&gt;}</synopsis>
            <para>Type must be one of the following: <parameter>destination, filter, log, parser, rewrite, root, source</parameter>. The <parameter>root</parameter> blocks can be used in the "root" context of the configuration file, that is, outside any other statements.</para>
            <para><!--For example, the elements of the <link linkend="FIXME">Source Configuration Library (SCL)</link> are configurations blocks. -->Blocks may be nested into each other, so for example an SCL may be built from other blocks. Blocks are somewhat similar to C++ templates.</para>
            <para>The type and name combination of each block must be unique, that is, two blocks can have the same name if their type is different.</para>
            <para>To use a block in your configuration file, you have to do two things:</para>
            <itemizedlist>
                <listitem>
                    <para>Include the file defining the block in the <filename>syslog-ng.conf</filename> file &mdash; or a file already included into <filename>syslog-ng.conf</filename>.</para>
                </listitem>
                <listitem>
                    <para>Reference the name of the block in your configuration file. This will insert the block into your configuration. For example, to use a block called <parameter>myblock</parameter>, include the following line in your configuration:</para>
                    <synopsis>myblock()</synopsis>
                    <para>Blocks may have parameters, but even if they do not, the reference must include opening and closing parentheses like in the previous example.</para>
                </listitem>
            </itemizedlist>
            <para>The contents of the block will be inserted into the configuration when &abbrev; is started or reloaded.</para>
            <example id="example-configuration-block">
                <title>Reusing configuration blocks</title>
                <para>Suppose you are running an application on your hosts that logs into the <filename>/opt/var/myapplication.log</filename> file. Create a file (for example, <filename>myblocks.conf</filename>) that stores a source describing this file and how it should be read:</para>
                <synopsis>block source myappsource() { 
                file("/opt/var/myapplication.log" follow_freq(1) default-facility(syslog)); };</synopsis>
                <para>Include this file in your main syslog-ng configuration file,reference the block, and use it in a logpath:</para>
                <synopsis>@version: &techversion;
include "&lt;correct/path&gt;/myblocks.conf";
source s_myappsource myappsource()
...
log { source(s_myappsource); destination(…); };</synopsis>
            </example>
            <para>To define a block that defines more than one object, use <parameter>root</parameter> as the type of the block, and reference the block from the main part of the &abbrev; configuration file.</para>
            <example id="example-configuration-block-root">
                <title>Defining blocks with multiple elements</title>
                <indexterm type="parameter">
                    <primary>root</primary>
                </indexterm>
                <indexterm>
                    <primary>root</primary>
                </indexterm>
                <para>The following example defines a source, a destination, and a log path to connect them.</para>
                <synopsis>block root mylogs() {
        source s_file { file("/var/log/mylogs.log" follow_freq(1)); };
        destination d_local { file("/var/log/messages"); };
        log { source(s_file); destination(d_local); };
        };</synopsis>
            </example>
            <tip>
                <para>Since the block is inserted into the &abbrev; configuration when &abbrev; is started, the block can be generated dynamically using an external script if needed. This is useful when you are running &abbrev; on different hosts and you want to keep the main configuration identical.</para>
                <para>If you want to reuse more than a single configuration object, for example, a logpath and the definitions of its sources and destinations, use the include feature to reuse the entire snippet. For details, see <xref linkend="including-config-files"/>.</para>
            </tip>
            <section id="config-blocks-arguments">
                <title>Passing arguments to configuration blocks</title>
                <indexterm type="parameter">
                    <primary>block arguments</primary>
                </indexterm>
                <para>Configuration blocks can receive arguments as well. The parameters the block can receive must be specified when the block is defined, using the following syntax:</para>
                <synopsis>block type block_name(argument1(&lt;default-value-of-the-argument&gt;) argument2(&lt;default-value-of-the-argument&gt;) argument3())</synopsis>
                <para>If an argument does not have a default value, use empty parentheses after the name of the argument. To refer the value of the argument in the block, use the name of the argument between backticks (for example, <parameter>`argument1`</parameter>).</para>
                <example condition="ose">
                    <title>Using arguments in blocks</title>
                    <para>The following example is the code of the <link linkend="configuring-source-pacct"><parameter>pacct()</parameter> source driver</link>, which is actually a block that can optionally receive two arguments.</para>
                    <synopsis>block source pacct(file("/var/log/account/pacct") follow-freq(1)) {
@module pacctformat
        file("`file`" follow-freq(`follow-freq`) format("pacct") tags(".pacct"));
};</synopsis>
                </example>
            </section>
        </section>
    </section>
</chapter>
