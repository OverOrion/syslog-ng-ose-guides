<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter SYSTEM "../../xml-stylesheet/pdf/dtd/docbookx.dtd"
 [  <!ENTITY % entities SYSTEM "../syslog-ng-entities.ent">
 %entities;]> 
<chapter id="chapter-patterndb">
    <title>Processing message content with a pattern database</title>
    <!-- FIXME a cim nem az igazi -->
    <!-- FIXME jumplist -->
    <!-- FIXME leirni, mennyi mindenre jo a patterndb: artificial ignorance, message classification and tagging, content extraction, message correlation, ... -->
        <section id="concepts_pattern_databases">
        <title>Classifying log messages</title>
        <indexterm>
            <primary>classifying messages</primary>
            <secondary>concepts of</secondary>
        </indexterm>
        <indexterm>
            <primary>pattern databases</primary>
            <secondary>concepts of</secondary>
        </indexterm>
        <para>The syslog-ng application can compare the contents of the received log messages to
            predefined message patterns. By comparing the messages to the known patterns, syslog-ng
            is able to identify the exact type of the messages, and sort them into message classes.
            The message classes can be used to classify the type of the event described in the log
            message. The message classes can be customized, and for example can label the messages
            as user login, application crash, file transfer, and so on events.</para>
        <para>To find the pattern that matches a particular message, syslog-ng uses a method called
            longest prefix match radix tree. This means that syslog-ng creates a tree structure of
            the available patterns, where the different characters available in the patterns for a
            given position are the branches of the tree.</para>
            <!-- FIXME missing figure -->
        <para>To classify a message, syslog-ng selects the first character of the message (the text
            of message, not the header), and selects the patterns starting with this character,
            other patterns are ignored for the rest of the process. After that, the second character
            of the message is compared to the second character of the selected patterns. Again,
            matching patterns are selected, and the others discarded. This process is repeated until
            a single pattern completely matches the message, or no match is found. In the latter
            case, the message is classified as unknown, otherwise the class of the matching pattern
            is assigned to the message.</para>
        <para>To make the message classification more flexible and robust, the patterns can contain
            pattern parsers: elements that match on a set of characters. For example, the NUMBER
            parser matches on any integer or hexadecimal number (for example 1, 123, 894054, 0xFFFF, and so on). Other pattern
            parsers match on various strings and IP addresses. For the details of available pattern
            parsers, see <xref linkend="patterndb-using-parsers"/>.</para>
        <para>The functionality of the pattern database is similar to that of the logcheck project,
            but it is much easier to write and maintain the patterns used by syslog-ng, than the
            regular expressions used by logcheck. Also, it is much easier to understand syslog-ng
            pattens than regular expressions.</para>
        <para>Pattern matching based on regular expressions is computationally very intensive,
            especially when the number of patterns increases. The solution used by syslog-ng can be
            performed real-time, and is independent from the number of patterns, so it scales much
            better. The following patterns describe the same message: <parameter>Accepted password
                for bazsi from 10.50.0.247 port 42156 ssh2</parameter>
        </para>
        <para>A regular expression matching this message from the logcheck project:
                <parameter>Accepted \
                (gssapi(-with-mic|-keyex)?|rsa|dsa|password|publickey|keyboard-interactive/pam) \
                for [^[:space:]]+ from [^[:space:]]+ port [0-9]+( (ssh|ssh2))?</parameter>
        </para>
        <para>A syslog-ng database pattern for this message: <parameter>Accepted
                @QSTRING:auth_method: @ for@QSTRING:username: @from\ @QSTRING:client_addr: @port
                @NUMBER:port:@ ssh2</parameter>
        </para>
        <para>For details on using pattern databases to classify log messages, see <xref
                linkend="configuring_pattern_databases"/>.</para>
        <xi:include href="../../common/chapters/patterndb_common.xml"
            xmlns:xi="http://www.w3.org/2001/XInclude" xpointer="element(patterndb-structure)"/>
        <xi:include href="../../common/chapters/patterndb_common.xml"
            xmlns:xi="http://www.w3.org/2001/XInclude" xpointer="element(patterndb-operation)"/>
        <section id="concepts_artificial_ignorance">
            <title>Artificial ignorance</title>
            <para>Artificial ignorance is a method to detect anomalies. When applied to log
                analysis, it means that you ignore the regular, common log messages - these are the
                result of the regular behavior of your system, and therefore are not too
                interesting. However, new messages that have not appeared in the logs before can
                sign important events, and should be therefore investigated. "By definition,
                something we have never seen before is anomalous" (Marcus J. Ranum).Â </para>
            <para>The syslog-ng application can classify messages using a pattern database: messages
                that do not match any pattern are classified as unknown. This provides a way to use
                artificial ignorance to review your log messages. You can periodically review the
                unknown messages &mdash; syslog-ng can send them to a separate destination - and
                add patterns for them to the pattern database. By reviewing and manually classifying
                the unknown messages, you can iteratively classify more and more messages, until the
                only the really anomalous messages show up as unknown.</para>
            <para>Obviously, for this to work, a large number of message patterns are required. The
                radix-tree matching method used for message classification is very effective, can be
                performed very fast, and scales very well; basically the time required to perform a
                pattern matching is independent from the number of patterns in the database.</para>
            <para>To simplify the building of pattern databases, BalaBit has released (and will
                continue to release) sample databases. Currently the sample pattern databases are
                available at the <ulink
                    url="http://www.balabit.com/downloads/files/patterndb-snapshot/"
                    >BalaBit Download page</ulink>.</para>
<!--            <itemizedlist>
                <listitem>
                    <para>a database for the log messages of Cisco PIX firewalls;</para>
                </listitem>
                <listitem>
                    <para>the database of the Logcheck project (<ulink url="http://logcheck.org/"
                            >http://logcheck.org/</ulink>) containing message patterns for a large
                        number of open source applications;</para>
                </listitem>
                <listitem>
                    <para>a database for the log messages of the Zorp Application Level Gateway
                            (<ulink url="http://www.balabit.com/network-security/zorp-gateway/"
                            >http://www.balabit.com/network-security/zorp-gateway/</ulink>)
                        (developed by BalaBit IT Security).</para>
                </listitem>
            </itemizedlist>-->
        </section>
    </section>
    

    <section id="configuring_pattern_databases">
        <title>Using pattern databases</title>
        <indexterm>
            <primary>parsers</primary>
        </indexterm>
        <indexterm>
            <primary>message parsing</primary>
        </indexterm>
        <indexterm>
            <primary>parsing messages</primary>
        </indexterm>
        <indexterm>
            <primary>pattern database</primary>
        </indexterm>
        <indexterm>
            <primary>classifying messages</primary>
            <secondary>configuration</secondary>
        </indexterm>
        <indexterm>
            <primary>message classification</primary>
        </indexterm>
        <para>To classify messages using a pattern database, include a
            <parameter>db_parser()</parameter> statement in your syslog-ng configuration file using
            the following syntax:</para>
        <synopsis>Declaration:
        parser &lt;identifier&gt; {db_parser(file("&lt;database_filename&gt;"));};</synopsis>
        <para>Note that using the parser in a log statement only performs the classification, but
            does not automatically do anything with the results of the classification. </para>
        <example>
            <title>Defining pattern databases</title>
            <para>The following statement uses the database located at
                    <filename>/opt/syslog-ng/var/db/patterndb.xml</filename>.</para>
            <synopsis>parser pattern_db {
            db_parser(
                file("/opt/syslog-ng/var/db/patterndb.xml")
            );
            };</synopsis>
            <para>To apply the patterns on the incoming messages, include the parser in a log
                statement:</para>
            <synopsis>log { 
        source(s_all);
        parser(pattern_db);            
        destination( di_messages_class);
        };</synopsis>
        </example>
        <note>
            <para>The default location of the pattern database file is
                    <filename>/opt/syslog-ng/var/run/patterndb.xml</filename>. The
                <parameter>file</parameter> option of the <parameter>db-parser</parameter> statement
                can be used to specify a different file, thus different db-parser statements can use
                different pattern databases. Later versions of syslog-ng will be able to dynamically
                generate a main database from separate pattern database files.</para>
        </note>
        <example>
            <title>Using classification results</title>
            <para>The following destination separates the log messages into different files based on
                the class assigned to the pattern that matches the message (for example Violation and
                Security type messages are stored in a separate file), and also adds the ID of the
                matching rule to the message: </para>
            <synopsis>destination di_messages_class {
        file("/var/log/messages-${.classifier.class}"
        template("${.classifier.rule_id};${S_UNIXTIME};${SOURCEIP};${HOST};${PROGRAM};${PID};${MSG}\n")
        template_escape(no)
    );
};</synopsis>
        </example>
        <para>For details on how to create your own pattern databases see <xref linkend="reference_patterndb_schemes"
            />.</para>
        <section id="patterndb-filters">
            <title>Using parser results in filters and templates</title>
            <indexterm>
                <primary>pattern database</primary>
                <secondary>using the results</secondary>
            </indexterm>
            <indexterm>
                <primary>message filtering</primary>
                <secondary>using parsers</secondary>
            </indexterm>
            <indexterm>
                <primary>parsing messages</primary>
                <secondary>filtering parsed messages</secondary>
            </indexterm>
            <indexterm>
                <primary>parsers</primary>
            </indexterm>
            <indexterm>
                <primary>message parsing</primary>
            </indexterm>
            <indexterm>
                <primary>parsing messages</primary>
            </indexterm>
            <indexterm>
                <primary>pattern database</primary>
            </indexterm>
            <indexterm>
                <primary>classifying messages</primary>
                <secondary>filtering</secondary>
            </indexterm>
            <indexterm>
                <primary>message classification</primary>
            </indexterm>
            <para>The results of message classification and parsing can be used in custom
                filters and file and database templates as well.Â There are two built-in macros
                in &abbrev; that allow you to use the results of the classification: the
                    <parameter>.classifier.class</parameter> macro contains the class assigned
                to the message (for example violation, security, or unknown), while the
                    <parameter>.classifier.rule_id</parameter> macro contains the identifier of
                the message pattern that matched the message.</para>
            <indexterm>
                <primary>filtering</primary>
                <secondary>on message class</secondary>
            </indexterm>
            <indexterm>
                <primary>filtering</primary>
                <secondary>.classifier_class</secondary>
            </indexterm>
            <example>
                <title>Using classification results for filtering messages</title>
                <para>To filter on a specific message class, create a filter that checks the
                        <guimenu>.classifier_class</guimenu> macro, and use this filter in a log
                    statement.</para>
                <synopsis>filter fi_class_violation {
                    match("violation"
                    value(".classifier.class")
                    type("string")
                    );
                    };</synopsis>
                <synopsis>log { 
                    source(s_all);
                    parser(pattern_db);
                    filter(fi_class_violation);
                    destination(di_class_violation);
                    };</synopsis>
                <para>Filtering on the <parameter>unknown</parameter> class selects messages
                    that did not match any rule of the pattern database. Routing these messages
                    into a separate file allows you to periodically review new or unknown
                    messages.</para>
                <para>To filter on messages matching a specific classification rule, create a
                    filter that checks the <guimenu>.classifier.rule_id</guimenu> macro. The
                    unique identifier of the rule (for example
                        <parameter>e1e9c0d8-13bb-11de-8293-000c2922ed0a</parameter>) is the
                        <parameter>id</parameter> attribute of the rule in the XML database.</para>
                <synopsis>filter fi_class_rule {
                    match("e1e9c0d8-13bb-11de-8293-000c2922ed0a"
                    value(".classifier.rule_id")
                    type("string")
                    );
                    };</synopsis>
            </example>
            <para>Pattern database rules can assign tags to messages. These tags can be used to select tagged messages using the <parameter>tags()</parameter> filter function.</para>
            <indexterm type="parameter">
                <primary>tags()</primary>
            </indexterm>
            <note id="example-tag-class">
                <para>Starting with version 3.2, &abbrev; automatically adds the class of the message as a tag using the <parameter>.classifier.&lt;message-class&gt;</parameter> format. For example, messages classified as "system" receive the <parameter>.classifier.system</parameter> tag. Use the <parameter>tags()</parameter> filter function to select messages of a specific class.</para>
                <synopsis>filter f_tag_filter {tags(".classifier.system");};</synopsis>
            </note>
            <para>The message-segments parsed by the pattern parsers can also be used as macros
                as well. To accomplish this, you have to add a name to the parser, and then you
                can use this name as a macro that refers to the parsed value of the message.</para>
            <example>
                <title>Using pattern parsers as macros</title>
                <para>For example, you want to parse messages of an application that look like
                        <parameter>"Transaction: &lt;type&gt;."</parameter>, where
                    &lt;type&gt; is a string that has different values (for example refused,
                    accepted, incomplete, and so on). To parse these messages, you can use the
                    following pattern:</para>
                <synopsis>'Transaction: @ESTRING::.@'</synopsis>
                <para>Here the @ESTRING@ parser parses the message until the next full stop
                    character. To use the results in a filter or a filename template, include a
                    name in the parser of the pattern, for example:</para>
                <synopsis>'Transaction: @ESTRING:TRANSACTIONTYPE:.@'</synopsis>
                <para>After that, add a custom template to the logpath that uses this template.
                    For example, to select every <parameter>accepted</parameter> transaction,
                    use the following custom filter in the log path:</para>
                <synopsis>match("accepted" value("TRANSACTIONTYPE"));</synopsis>
            </example>
            <note>
                <para>The above macros can be used in database columns and filename templates as
                    well, if you create custom templates for the destination or logspace.</para>
                <para>Use a consistent naming scheme for your macros, for example,
                        <parameter>APPLICATIONNAME_MACRONAME</parameter>.</para>
            </note>
        </section>
        <section id="patterndb-download">
            <title>Downloading sample pattern databases</title>
            <!-- FIXME atirni git reposra -->
            <indexterm>
                <primary>patterndb</primary>
                <secondary>download</secondary>
            </indexterm>
            <indexterm>
                <primary>download</primary>
                <secondary>pattern databases</secondary>
            </indexterm>
            <para>Sample pattern databases are available at the <ulink
                    url="http://www.balabit.com/downloads/files/patterndb-snapshot/"
                >BalaBit Download page</ulink>. Note that
                even though these pattern databases contain over 8000 rules for more than 200
                applications and devices, they are only samples and experimental databases that are
                not officially supported and may or may not work in your environment.</para>
            <para>The syslog-ng pattern databases are available under the Creative Commons
                Attribution-Share Alike 3.0 (CC by-SA) license. This includes every
                pattern database written by community contributors or the BalaBit staff. It means
                that:</para>
            <itemizedlist>
                <listitem>
                    <para>you are free to use and modify the patterns
                    purposes;</para>
                </listitem>
                <listitem>
                    <para>when redistributing the pattern databases you must distribute your
                        modifications under the same license;</para>
                </listitem>
                <listitem>
                    <para>and when redistributing the pattern databases, you must make it obvious
                        that the original syslog-ng pattern databases are <ulink
                            url="http://www.balabit.com/network-security/syslog-ng/"
                            >available here</ulink>.</para>
                            <!-- FIXME konkretabb linket -->
                </listitem>
            </itemizedlist>
            <para>For legal details, the full text of the license is <ulink
                    url="http://creativecommons.org/licenses/by-sa/3.0/us/legalcode"
                >available here</ulink>.</para>
        </section>
    </section>
    <section id="patterndb-correlation">
        <title>Correlating log messages</title>
        <indexterm>
            <primary>message correlation</primary>
        </indexterm>
        <indexterm>
            <primary>correlating messages</primary>
        </indexterm>
        <indexterm>
            <primary>pattern databases</primary>
            <secondary>correlating messages</secondary>
        </indexterm>
        <indexterm>
            <primary>message context</primary>
        </indexterm>
        <indexterm>
            <primary>context of messages</primary>
        </indexterm>
        <para>Starting with version <phrase condition="pe">4.1</phrase><phrase condition="ose">3.2</phrase>, the &abbrev; application is able to correlate log messages identified using pattern databases.</para>
        <para>Log messages are supposed to describe events, but applications often separate information about a single event into different log messages. For example, the Postfix e-mail server logs the sender and recipient addresses into separate log messages, or in case of an unsuccessful login attempt, the OpenSSH server sends a log message about the authentication failure, and the reason of the failure in the next message.</para>
        <para>Of course, messages that are not so directly related can be correlated as well, for example, login-logout messages, and so on.</para>
        <para>To correlate log messages, &abbrev; uses the pattern database to add messages into message-groups called contexts. A context consists of a series of log messages that are related to each other in some way, for example, the log messages of an SSH session can belong to the same context. As new messages come in, they may be added to a context. Also, when an incoming message is identified it can trigger actions to be performed, for example, generate a new message that contains all the important information that was stored previously in the context. (For details on triggering actions and generating messages, see <xref linkend="patterndb-triggers-actions"/>.)</para>
        <para>There are two attributes for pattern database rules that determine if a message matching the rule is added to a context: <parameter>context-scope</parameter> and <parameter>context-id</parameter>. The <parameter>context-scope</parameter> attribute acts as an early filter, selecting messages sent by the same process ($HOST$PROGRAM$PID is identical), application ($HOST$PROGRAM is identical), or host, while the <parameter>context-id</parameter> actually adds the message to the context specified in the id. The <parameter>context-id</parameter> can be a simple string, or can contain macros or values extracted from the log messages for further filtering.</para>
        <note>
			<para>Message contexts are persistent and are not lost even if &abbrev; is restarted (SIGHUP).</para>
        </note>
        <para>Another parameter of a rule is the <parameter>context-timeout</parameter> attribute, which determines how long a context is stored, that is, how long &abbrev; waits for related messages to arrive. Note the following points about timeout values:</para>
        <itemizedlist>
            <listitem>
                <para>When a new message is added to a context, &abbrev; will restart the timeout using the <parameter>context-timeout</parameter> set for the new message.</para>
            </listitem>
            <listitem>
                <para>When calculating if the timeout has already expired or not, &abbrev; uses the timestamps of the incoming messages, not system time elapsed between receiving the two messages (unless the messages do not include a timestamp, or the <parameter>keep-timestamp(no)</parameter> option is set). That way &abbrev; can be used to process and correlate already existing log messages offline. However, the timestamps of the messages must be in chronological order (that is, a new message cannot be older than the one already processed), and if a message is newer than the current system time (that is, it seems to be coming from the future), &abbrev; will replace its timestamp with the current system time.</para>
                <example>
					<title>How &abbrev; calculates <parameter>context-timeout</parameter></title>
					<para>Consider the following two messages:</para>
					<synopsis>&lt;38&gt;1990-01-01T14:45:25 customhostname program6[1234]: program6 testmessage
&lt;38&gt;1990-01-01T14:46:25 customhostname program6[1234]: program6 testmessage</synopsis>
					<para>If the <parameter>context-timeout</parameter> is 10 seconds and &abbrev; receives the messages within 1 sec, the timeout event will occour immediately, because the difference of the two timestamp (60 sec) is larger than the timeout value (10 sec).</para>
                </example>
            </listitem>
            <listitem>
                <para>Avoid using unnecessarily long timeout values on high-traffic systems, as storing the contexts for many messages can require considerable memory. For example, if two related messages usually arrive within seconds, it is not needed to set the timeout to several hours.</para>
            </listitem>
        </itemizedlist>
        <example>
            <title>Using message correlation</title>
            <synopsis>&lt;rule id="..." context-id="ssh-session" context-timeout="86400" context-scope="process"&gt;
    &lt;patterns&gt;
        &lt;pattern&gt;Accepted @ESTRING:usracct.authmethod: @for @ESTRING:usracct.username: @from @ESTRING:usracct.device: @port @ESTRING:: @@ANYSTRING:usracct.service@&lt;/pattern&gt;
    &lt;/patterns&gt;
...
&lt;/rule&gt;</synopsis>
        </example>
        <para>For details on configuring message correlation, see the description of the <link linkend="patterndb-schema-context-id">context-id</link>, <link linkend="patterndb-schema-context-timeout">context-timeout</link>, and <link linkend="patterndb-schema-context-id">context-scope</link> attributes of pattern database rules.</para>
        <section id="referencing-previous-messages">
            <title>Referencing earlier messages of the context</title>
            <indexterm type="parameter">
                <primary>@distance</primary>
            </indexterm>
            <para>When using the <parameter>&lt;value&gt;</parameter> element in pattern database rules together with message correlation, you can also refer to fields and values of earlier messages of the context by adding the <parameter>@&lt;distance-of-referenced-message-from-the-current&gt;</parameter> suffix to the macro. For example, if there are three log messages in a context, and you are creating a generated message for the third log message, the <parameter>${HOST}@1</parameter> expression refers to the host field of the current (third) message in the context, the <parameter>${HOST}@2</parameter> expression refers to the host field of the previous (second) message in the context, <parameter>${PID}@3</parameter> to the PID of the first message, and so on. For example, the following message can be created from SSH login/logout messages (for details on generating new messages, see <xref linkend="patterndb-triggers-actions"/>): <parameter>An SSH session for ${SSH_USERNAME}@1 from ${SSH_CLIENT_ADDRESS}@2 closed. Session lasted from ${DATE}@2 to $DATE</parameter>.</para>
        </section>
    </section>
    <section id="patterndb-triggers-actions">
        <title>Triggering actions for identified messages</title>
        <indexterm>
            <primary>alerting</primary>
        </indexterm>
        <indexterm>
            <primary>actions</primary>
        </indexterm>
        <indexterm>
            <primary>secondary messages</primary>
        </indexterm>
        <indexterm>
            <primary>generating alerts</primary>
        </indexterm>
        <indexterm>
            <primary>triggers</primary>
        </indexterm>
        <indexterm>
            <primary>triggered messages</primary>
        </indexterm>
        <indexterm>
            <primary>message triggers</primary>
        </indexterm>
        <para>Starting with version <phrase condition="pe">4.1</phrase><phrase condition="ose">3.2</phrase>, the &abbrev; application is able to generate (trigger) messages automatically if certain events occur, for example, a specific log message is received, or the correlation timeout of a message expires. Basically, you can define messages for every pattern database rule that are emitted when a message matching the rule is received. Triggering messages is often used together with message correlation, but can also be used separately.</para>
        <indexterm type="parameter">
            <primary>inject-mode</primary>
        </indexterm>
        <para>The generated message is injected into the same place where the <parameter>db_parser</parameter> statement is referenced in the log path. To post the generated message into the <parameter>internal()</parameter> source instead, use the <parameter>inject-mode()</parameter> option in the definition of the parser.</para>
        <example>
            <title>Sending triggered messages to the <parameter>internal()</parameter> source</title>
            <para>To send the generated messages to the <parameter>internal</parameter> source, use the <parameter>inject_mode(internal)</parameter> option:</para>
            <synopsis>parser p_db {db_parser(
    file("mypatterndbfile.xml")
    inject_mode(internal)
);}; </synopsis>
            <para>To inject the generated messages where the pattern database is referenced, use the <parameter>inject_mode(pass-through)</parameter> option:</para>
            <synopsis>parser p_db {db_parser(
    file("mypatterndbfile.xml")
    inject_mode(pass-through)
);}; </synopsis>
        </example>
        <note condition="ose">
            <para>Version 3.2 of &abbrev; was able to send the generated messages only to the <parameter>internal</parameter> source.</para>
        </note>
        <para>The generated message must be configured in the pattern database rule. It is possible to create an entire message, use macros and values extracted from the original message with pattern database, and so on.</para>
        <example id="example-patterndb-trigger">
            <title>Generating messages for pattern database matches</title>
            <para>When inserted in a pattern database rule, the following example generates a message when a message matching the rule is received.</para>
            <synopsis>&lt;actions&gt;
    &lt;action&gt;
        &lt;message&gt;
            &lt;values&gt;
                &lt;value name="MESSAGE"&gt;A log message from $HOST matched rule number $.classifier.rule_id&lt;/value&gt;
            &lt;/values&gt;
        &lt;/message&gt;
    &lt;/action&gt;
&lt;/actions&gt;</synopsis>
            <para>To limit when a message is triggered, use the <parameter>condition</parameter> attribute and specify a filter expression: the action will be executed only if the condition is met. For example, the following action is executed only if the message was sent by the host called <parameter>myhost</parameter>.</para>
            <synopsis>&lt;action condition="'${HOST}' == 'example'"&gt;</synopsis>
            <para>The following action can be used to log the length of an SSH session (the time difference between a login and a logout message in the context):</para>
            <synopsis>&lt;actions&gt; 
    &lt;action&gt;
        &lt;message&gt;
            &lt;values&gt;
                &lt;value name="MESSAGE"&gt;An SSH session for ${SSH_USERNAME}@1 from ${SSH_CLIENT_ADDRESS}@2 closed. Session lasted from ${DATE}@2 $DATE &lt;/value&gt;
            &lt;/values&gt;
        &lt;/message&gt;
    &lt;/action&gt;
&lt;/actions&gt;</synopsis>
        </example>
        <para>For details on configuring actions, see the description of the <link linkend="patterndb-schema-actions">pattern database format</link>.</para>
        <para>To perform an external action when a message is triggered, for example, to send the message in an e-mail, you have to route the generated messages to an external application using the <parameter>program()</parameter> destination.</para>
        <example id="example-trigger-email">
            <title>Sending triggered messages to external applications</title>
            <para>The following sample configuration selects the triggered messages and sends them to an external script.</para>
            <orderedlist>
                <listitem>
                    <para>Set a field in the triggered message that is easy to identify and filter. For example:</para>
                    <synopsis>&lt;values&gt;
    &lt;value name="MESSAGE"&gt;A log message from $HOST matched rule number $.classifier.rule_id&lt;/value&gt;
    &lt;value name="TRIGGER"&gt;yes&lt;/value&gt;
&lt;/values&gt;</synopsis>
                </listitem>
                <listitem>
                    <para>Create a destination that will process the triggered messages.</para>
                    <synopsis>destination d_triggers { program("/bin/myscript"; ); };</synopsis>
                </listitem>
                <listitem>
                    <para>Create a filter that selects the triggered messages from the internal source.</para>
                    <synopsis>filter f_triggers {match("yes" value ("TRIGGER") type(string));};</synopsis>
                </listitem>
                <listitem>
                    <para>Create a logpath that selects the triggered messages from the internal source and sends them to the script:</para>
                    <synopsis>log { source(s_local); filter(f_triggers); destination(d_triggers); };</synopsis>
                </listitem>
                <listitem>
                    <para>Create a script that will actually process the generated messages, for example:</para>
                    <synopsis>#!/usr/bin/perl
while (&lt;&gt;) {
        # body of the script to send emails, snmp traps, and so on
}</synopsis>
                </listitem>
            </orderedlist>
        </example>
        <para>Certain features of generating messages can be used only if message correlation is used as well.</para>
        <itemizedlist>
            <listitem>
                <para>The &abbrev; application automatically fills the fields for the generated message based on the scope of the context, for example, the HOST and PROGRAM fields if the <parameter>context-scope</parameter> is <parameter>program</parameter>.</para>
            </listitem>
            <listitem>
                <!-- FIXME most of this para is copied to the colleration section -->
                <para>When used together with message correlation, you can also refer to fields and values of earlier messages of the context by adding the <parameter>@&lt;distance-of-referenced-message-from-the-current&gt;</parameter> suffix to the macro. For details, see <xref linkend="referencing-previous-messages"/>.</para>
            </listitem>
            <listitem>
                <para>It is possible to generate a message when the <parameter>context-timeout</parameter> of the original message expires and no new message is added to the context during this time. To accomplish this, include the <parameter>trigger="timeout"</parameter> attribute in the action element:</para>
                <synopsis>&lt;action trigger="timeout"&gt;</synopsis>
            </listitem>
        </itemizedlist>
        <para>For details on correlating messages, see <xref linkend="patterndb-correlation"/>.</para>
    </section>
    <section id="reference_parsers_pattern_databases">
        <title>Creating pattern databases</title>
        <xi:include href="../../common/chapters/patterndb_common.xml"
            xmlns:xi="http://www.w3.org/2001/XInclude"
            xpointer="element(patterndb-using-parsers)"/>
        <section id="patterndb-v4-whatsnew">
            <title>What's new in the syslog-ng pattern database format V4</title>
            <para>The V4 database format has the following differences compared to the V3 format:</para>
            <itemizedlist>
                <listitem>
                    <para>It is now possible to specify multiple program patterns for a ruleset. For details, see the description of the <link linkend="patterndb-schema-patterns">patterns tag</link>.</para>
                </listitem>
                <listitem>
                    <para>The &lt;value&gt; element of name-value pairs can include template functions. For details, see <xref linkend="template-functions"/>, for examples, see <xref linkend="template-function-if"/>.</para>
                </listitem>
                <listitem>
                    <para>It is now possible to correlate log messages processed with the pattern database. For details, see <xref linkend="patterndb-correlation"/>.</para>
                </listitem>
                <listitem>
                    <para>It is now possible to generate new messages based on pattern matching and correlation results. For details, see <xref linkend="patterndb-triggers-actions"/> and the description of the <link linkend="patterndb-schema-actions">actions tag</link>.</para>
                </listitem>
            </itemizedlist>
        </section>
        <section id="reference_patterndb_schemes">
            <title>The syslog-ng pattern database format</title>
            <indexterm>
                <primary>pattern database</primary>
            </indexterm>
            <indexterm>
                <primary>classifying messages</primary>
                <secondary>creating databases</secondary>
            </indexterm>
            <indexterm>
                <primary>message classification</primary>
            </indexterm>
            <indexterm>
                <primary>pattern database schema</primary>
            </indexterm>
            <para>Pattern databases are XML files that contain rules describing the message
            patterns. For sample pattern databases, see <xref linkend="patterndb-download"
            />.</para>
            <para>The following scheme describes the V4 format of the pattern database. This
                format is used by &abbrev; <phrase condition="pe">4.1</phrase><phrase condition="ose">3.2</phrase> and later, and is backwards-compatible with the earlier V3 format.</para>
            <para>For a sample database containing only a single pattern, see <xref
                    linkend="example_pattern_database_v4_su"/>.</para>
            <tip>
                <para>Use the <command>pdbtool</command> utility that is bundled with
                    syslog-ng to test message patterns and convert existing databases to the
                    latest format. For details, see <xref linkend="pdbtool.1"/>.</para>
                <para>To automatically create an initial pattern database from an existing log file, use the <command>pdbtool patternize</command> command. For details, see <xref linkend="pdbtool_patternize"/>.</para>
            </tip>
            <itemizedlist id="reference_patterndb_scheme_v4">
                <listitem>
                    <indexterm type="parameter">
                        <primary>patterndb</primary>
                    </indexterm>
                    <para><guimenu>&lt;patterndb&gt;</guimenu>: The container
                        element of the pattern database. For example:
                        <synopsis>&lt;patterndb version='4' pub_date='2010-10-25'&gt;</synopsis></para>
                </listitem>
                <listitem>
                    <indexterm type="parameter">
                        <primary>version</primary>
                    </indexterm>
                    <para><emphasis>version</emphasis>: The schema version of the pattern
                        database. The current version is <parameter>4</parameter>.</para>
                </listitem>
                <listitem>
                    <indexterm type="parameter">
                        <primary>pubdate</primary>
                    </indexterm>
                    <para><emphasis>pubdate</emphasis>: The publication date of the XML
                        file.</para>
                </listitem>
                <listitem>
                    <indexterm type="parameter">
                        <primary>ruleset</primary>
                    </indexterm>
                    <para><guimenu>&lt;ruleset&gt;</guimenu>: A container element to
                        group log patterns for an application or program. For example:
                        <synopsis>&lt;ruleset name='su' id='480de478-d4a6-4a7f-bea4-0c0245d361e1'&gt;</synopsis></para>
                    <para>A <parameter>&lt;patterndb&gt;</parameter> element may
                        contain any number of <guimenu>&lt;ruleset&gt;</guimenu>
                        elements.</para>
                    <itemizedlist>
                        <listitem>
                            <indexterm type="parameter">
                                <primary>name &mdash; ruleset</primary>
                            </indexterm>
                            <para><emphasis>name</emphasis>: The name of the application.
                                Note that the function of this attribute is to make the
                                database more readable, syslog-ng uses the
                                    <parameter>&lt;pattern&gt;</parameter> element
                                to identify the applications sending log messages.</para>
                        </listitem>
                        <listitem>
                            <indexterm type="parameter">
                                <primary>id &mdash; ruleset</primary>
                            </indexterm>
                            <para><emphasis>id</emphasis>: A unique ID of the application,
                                for example, the md5 sum of the <parameter>name</parameter>
                                attribute.</para>
                        </listitem>
                        <listitem>
                            <indexterm type="parameter">
                                <primary>description &mdash; ruleset</primary>
                            </indexterm>
                            <para><guimenu>description</guimenu>: OPTIONAL &mdash; A
                                description of the ruleset or the application.</para>
                        </listitem>
                        <listitem>
                            <indexterm type="parameter">
                                <primary>url &mdash; ruleset</primary>
                            </indexterm>
                            <para><guimenu>url</guimenu>: OPTIONAL &mdash; An URL
                                referring to further information about the ruleset or the
                                application.</para>
                        </listitem>
                        <listitem id="patterndb-schema-patterns">
                            <para><guimenu>&lt;patterns&gt;</guimenu>: A container element storing program names also called <parameter>program pattern</parameter>. For example:</para>
                            <synopsis>&lt;patterns&gt;
    &lt;pattern&gt;su&lt;/pattern&gt;
&lt;patterns&gt;</synopsis>
                            <indexterm type="parameter">
                                <primary>patterns</primary>
                            </indexterm>
                            <para>A <parameter>&lt;patterns&gt;</parameter> element may contain any number of <guimenu>&lt;pattern&gt;</guimenu> elements.</para>
                            <itemizedlist>
                                <listitem>
                                    <indexterm type="parameter">
                                        <primary>pattern &mdash; ruleset</primary>
                                    </indexterm>
                                    <para><guimenu>pattern</guimenu>: The name of the application &mdash; syslog-ng matches this value to the $PROGRAM header of the syslog message to find the rulesets applicable to the syslog message.</para>
                                    <para>Specifying multiple patterns is useful if two or more applications have different names (that is, different $PROGRAM fields), but otherwise send identical log messages.</para>
                                    <synopsis>&lt;patterns&gt;
    &lt;pattern&gt;firstapplication&lt;/pattern&gt;
    &lt;pattern&gt;otherapplication&lt;/pattern&gt;
&lt;patterns&gt;</synopsis>
                                    <para>It is not necessary to use multiple patterns if only the end of the $PROGRAM fields is different, use only the beginning of the $PROGRAM field as the <parameter>pattern</parameter>. For example, the Postfix e-mail server sends messages using different process names, but all of them begin with the <parameter>postfix</parameter> string.</para>
                                </listitem>
                            </itemizedlist>
                            <note>
                                <para>If the <parameter>&lt;pattern&gt;</parameter> element of a ruleset is not specified, &abbrev; will use this ruleset as a fallback ruleset: it will apply the ruleset to messages that have an empty PROGRAM header, or if none of the program patterns matched the PROGRAM header of the incoming message. </para>
                            </note>
                        </listitem>
                        <listitem>
                            <para><guimenu>&lt;rules&gt;</guimenu>: A container
                                element for the rules of the ruleset.</para>
                            <indexterm type="parameter">
                                <primary>rules</primary>
                            </indexterm>
                            <itemizedlist>
                                <listitem>
                                    <indexterm type="parameter">
                                        <primary>rule</primary>
                                    </indexterm>
                                    <para><guimenu>&lt;rule&gt;</guimenu>: An
                                        element containing message patterns and how a
                                        message that matches these patterns is classified.
                                        For example:</para>
                                        <synopsis>&lt;rule provider='balabit' id='f57196aa-75fd-11dd-9bba-001e6806451b' class='violation'&gt;</synopsis>
                                    <para>The following example specifies attributes for correlating messages as well. For details on correlating messages, see <xref linkend="patterndb-correlation"/>.</para>
                                    <synopsis>&lt;rule provider='balabit' id='f57196aa-75fd-11dd-9bba-001e6806451b' class='violation' context-id='same-session' context-scope='process' context-timeout='360'&gt;</synopsis>
                                    <note>
                                        <para>If the following characters appear in the
                                          message, they must be escaped in the rule as
                                          follows:</para>
                                        <itemizedlist>
                                          <listitem>
                                          <para><parameter>@</parameter>: Use @@,
                                          for example
                                          <parameter>user@@example.com</parameter></para>
                                          </listitem>
                                          <listitem>
                                          <para><emphasis>&lt;</emphasis>: Use
                                          <parameter>&amp;lt;</parameter></para>
                                          </listitem>
                                          <listitem>
                                          <para><emphasis>&gt;</emphasis>: Use
                                          <parameter>&amp;gt;</parameter></para>
                                          </listitem>
                                          <listitem>
                                          <para>&amp;: Use
                                          <parameter>&amp;amp;</parameter></para>
                                          </listitem>
                                        </itemizedlist>
                                    </note>
                                    <para>The <guimenu>&lt;rules&gt;</guimenu>
                                        element may contain any number of
                                          <guimenu>&lt;rule&gt;</guimenu>
                                        elements.</para>
                                </listitem>
                                <listitem>
                                    <indexterm type="parameter">
                                        <primary>provider</primary>
                                    </indexterm>
                                    <para><emphasis>provider</emphasis>: The provider of the
                                        rule. This is used to distinguish between who
                                        supplied the rule; that is, if it has been created by
                                        BalaBit, or added to the xml by a local user.</para>
                                </listitem>
                                <listitem>
                                    <indexterm type="parameter">
                                        <primary>id &mdash; rule</primary>
                                    </indexterm>
                                    <para><emphasis>id</emphasis>: The globally unique ID of
                                        the rule.</para>
                                </listitem>
                                <listitem>
                                    <indexterm type="parameter">
                                        <primary>class</primary>
                                    </indexterm>
                                    <para><emphasis>class</emphasis>: The class of the rule
                                        &mdash; syslog-ng assigns this class to the
                                        messages matching a pattern of this rule.</para>
                                </listitem>
                                <listitem id="patterndb-schema-context-id">
                                    <indexterm type="parameter">
                                        <primary>context-id</primary>
                                    </indexterm>
                                    <para><emphasis>context-id</emphasis>: OPTIONAL &mdash; An identifier to group related log messages when using the pattern database to correlate events. The ID can be a descriptive string describing the events related to the log message (for example, <parameter>ssh-sessions</parameter> for log messages related to SSH traffic), but can also contain macros to generate IDs dynamically. When using macros in IDs, see also the <link linkend="patterndb-schema-context-scope"><parameter>context-scope</parameter></link> attribute. For details on correlating messages, see <xref linkend="patterndb-correlation"/>.</para>
                                    <note>
                                        <para>The &abbrev; application determines the context of the message <emphasis>after</emphasis> the pattern matching is completed. This means that macros and name-value pairs created by the matching pattern database rule can be used as context-id macros.</para>
                                    </note>
                                </listitem>
                                <listitem id="patterndb-schema-context-timeout">
                                    <indexterm type="parameter">
                                        <primary>context-timeout</primary>
                                    </indexterm>
                                    <para><emphasis>context-timeout</emphasis>: OPTIONAL &mdash; The number of seconds the context is stored. Note that for high-traffic logservers, storing open contexts for long time can require significant amount of memory. For details on correlating messages, see <xref linkend="patterndb-correlation"/>.</para>
                                </listitem>
                                <listitem id="patterndb-schema-context-scope">
                                    <indexterm type="parameter">
                                        <primary>context-scope</primary>
                                    </indexterm>
                                    <para><emphasis>context-scope</emphasis>: OPTIONAL &mdash; Specifies which messages belong to the same context. This attribute is used to determine the context of the message if the <link linkend="patterndb-schema-context-id"><parameter>context-id</parameter></link> does not specify any macros. Usually, <parameter>context-scope</parameter> acts a filter for the context, with <parameter>context-id</parameter> refining the filtering if needed. The <parameter>context-scope</parameter> attribute has the following possible values:</para>
                                    <itemizedlist>
                                        <listitem>
                                            <indexterm type="parameter">
                                                <primary>process &mdash; context-scope</primary>
                                            </indexterm>
                                            <para><emphasis>process</emphasis>: Only messages that are generated by the same process of a client belong to the same context, that is, messages that have identical $HOST, $PROGRAM and $PID values. This is the default behavior of &abbrev; if <parameter>context-scope</parameter> is not specified.</para>
                                        </listitem>
                                        <listitem>
                                            <indexterm type="parameter">
                                                <primary>program &mdash; context-scope</primary>
                                            </indexterm>
                                            <para><emphasis>program</emphasis>: Messages that are generated by the same application of a client belong to the same context, that is, messages that have identical $HOST and $PROGRAM values.</para>
                                        </listitem>
                                        <listitem>
                                            <indexterm type="parameter">
                                                <primary>host &mdash; context-scope</primary>
                                            </indexterm>
                                            <para><emphasis>host</emphasis>: Every message generated by a client belongs to the same context, only the $HOST value of the messages must be identical. </para>
                                        </listitem>
                                        <listitem>
                                            <indexterm type="parameter">
                                                <primary>global &mdash; context-scope</primary>
                                            </indexterm>
                                            <para><emphasis>global</emphasis>: Every message belongs to the same context.</para>
                                        </listitem>
                                    </itemizedlist>
                                    <note>
                                        <para>Using the <parameter>context-scope</parameter> attribute is significantly faster than using macros in the <parameter>context-id</parameter> attribute.</para>
                                    </note>
                                    <para>For details on correlating messages, see <xref linkend="patterndb-correlation"/>.</para>
                                </listitem>
                                <listitem>
                                    <indexterm type="parameter">
                                        <primary>patterns &mdash; rule</primary>
                                    </indexterm>
                                    <para><guimenu>&lt;patterns&gt;</guimenu>: An
                                        element containing the patterns of the rule. If a
                                          <guimenu>&lt;patterns&gt;</guimenu>
                                        element contains multiple
                                          <guimenu>&lt;pattern&gt;</guimenu>
                                        elements, the class of the
                                          <guimenu>&lt;rule&gt;</guimenu> is
                                        assigned to every syslog message matching any of the
                                        patterns. </para>
                                    <itemizedlist>
                                        <listitem>
                                          <indexterm type="parameter">
                                            <primary>pattern &mdash; rule</primary>
                                          </indexterm>
                                          <para><guimenu>&lt;pattern&gt;</guimenu>:
                                          A pattern describing a log message. This
                                          element is also called <parameter>message
                                          pattern</parameter>. For example:
                                          <synopsis>&lt;pattern&gt;+ ??? root-&lt;/pattern&gt;</synopsis></para>
                                        </listitem>
                                        <listitem>
                                          <indexterm type="parameter">
                                            <primary>description &mdash; pattern</primary>
                                          </indexterm>
                                          <para><guimenu>description</guimenu>: OPTIONAL
                                          &mdash; A description of the pattern or
                                          the log message matching the pattern.
                                          </para>
                                        </listitem>
                                        <listitem>
                                          <indexterm type="parameter">
                                            <primary>urls &mdash; pattern</primary>
                                          </indexterm>
                                          <para><guimenu>urls</guimenu>: OPTIONAL
                                          &mdash; An element containing one or
                                          more URLs referring to further information
                                          about the patterns or the matching log
                                          messages.</para>
                                          <itemizedlist>
                                          <listitem>
                                          <indexterm type="parameter">
                                            <primary>url &mdash; pattern</primary>
                                          </indexterm>
                                          <para><guimenu>url</guimenu>: OPTIONAL
                                          &mdash; An URL referring to
                                          further information about the
                                          patterns or the matching log
                                          messages.</para>
                                          </listitem>
                                          </itemizedlist>
                                        </listitem>
                                        <listitem>
                                          <indexterm type="parameter">
                                            <primary>values &mdash; pattern</primary>
                                          </indexterm>
                                          <para><guimenu>values</guimenu>: OPTIONAL
                                          &mdash; Name-value pairs that are
                                          assigned to messages matching the patterns,
                                          for example, the representation of the event
                                          in the message according to the Common Event Format (CEF) or Common Event Exchange (CEE). The names can be used as
                                          macros to reference the assigned values.</para>
                                          <itemizedlist>
                                          <listitem>
                                          <indexterm type="parameter">
                                            <primary>value &mdash; pattern</primary>
                                          </indexterm>
                                          <para><guimenu>value</guimenu>: OPTIONAL
                                          &mdash; Contains the value of
                                          the name-value pair that is assigned
                                          to the message. For example:</para>
                                          <synopsis>&lt;value name=".classifier.outcome"&gt;/Success&lt;/value&gt;</synopsis>
                                          <para>The &lt;value&gt; element of name-value pairs can include template functions. For details, see <xref linkend="template-functions"/>, for examples, see <xref linkend="template-function-if"/>.</para>
                                          <para>When used together with message correlation, the &lt;value&gt; element of name-value pairs can include references to the values of earlier messages from the same context. For details, see <xref linkend="patterndb-correlation"/>.</para>
                                          </listitem>
                                          <listitem>
                                          <indexterm type="parameter">
                                            <primary>name &mdash; pattern value</primary>
                                          </indexterm>
                                          <para><emphasis>name</emphasis>: The
                                          name of the name-value pair. It can
                                          also be used as a macro to reference
                                          the assigned value.</para>
                                          </listitem>
                                          </itemizedlist>
                                        </listitem>
                                        <listitem>
                                          <indexterm type="parameter">
                                            <primary>examples</primary>
                                          </indexterm>
                                          <para><guimenu>examples</guimenu>: OPTIONAL
                                          &mdash; A container element for sample
                                          log messages that should be recognized by
                                          the pattern. These messages can be used also
                                          to test the patterns and the parsers.</para>
                                          <itemizedlist>
                                          <listitem>
                                          <indexterm type="parameter">
                                            <primary>example</primary>
                                          </indexterm>
                                          <para><guimenu>example</guimenu>:
                                          OPTIONAL &mdash; A container
                                          element for a sample log message. </para>
                                          <itemizedlist>
                                          <listitem>
                                          <indexterm type="parameter">
                                            <primary>test_message</primary>
                                          </indexterm>
                                          <para><guimenu>test_message</guimenu>:
                                          OPTIONAL &mdash; A
                                          sample log message that
                                          should match this pattern.
                                          For example:
                                          <synopsis>&lt;test_message program="myapplication"&gt;Content filter has been enabled&lt;/test_message&gt;</synopsis></para>
                                          <itemizedlist>
                                            <listitem>
                                                <para><emphasis>program</emphasis>: The program pattern of the test message. For example: <synopsis>&lt;test_message program="proftpd">ubuntu (::ffff:192.168.2.179[::ffff:192.168.2.179]) - FTP session closed.&lt;/test_message&gt;</synopsis></para>
                                            </listitem>
                                          </itemizedlist>
                                          </listitem>
                                          <listitem>
                                          <indexterm type="parameter">
                                            <primary>test_values</primary>
                                          </indexterm>
                                          <para><guimenu>test_values</guimenu>:
                                          OPTIONAL &mdash; A
                                          container element to test
                                          the results of the parsers
                                          used in the pattern.</para>
                                          <itemizedlist>
                                          <listitem>
                                          <indexterm type="parameter">
                                            <primary>test_value</primary>
                                          </indexterm>
                                          <para><guimenu>test_value</guimenu>:
                                          OPTIONAL &mdash;
                                          The expected value
                                          of the parser when
                                          matching the pattern
                                          to the test message.
                                          For example:
                                          <synopsis>&lt;test_value name=".dict.ContentFilter"&gt;enabled&lt;/test_value&gt;</synopsis></para>
                                          </listitem>
                                          <listitem>
                                          <indexterm type="parameter">
                                            <primary>name &mdash; test_value</primary>
                                          </indexterm>
                                          <para><emphasis>name</emphasis>:
                                          The name of the
                                          parser to
                                          test.</para>
                                          </listitem>
                                          </itemizedlist>
                                          </listitem>
                                          </itemizedlist>
                                          </listitem>
                                          </itemizedlist>
                                        </listitem>
                                        <listitem id="patterndb-schema-actions">
                                          <indexterm type="parameter">
                                            <primary>actions</primary>
                                          </indexterm>
                                          <para><guimenu>actions</guimenu>: OPTIONAL &mdash; A container element for actions that are performed if a message is recognized by the pattern. For details on actions, see <xref linkend="patterndb-triggers-actions"/>.</para>
                                          <itemizedlist>
                                            <listitem>
                                                <indexterm type="parameter">
                                                    <primary>action</primary>
                                                </indexterm>
                                                <para><guimenu>action</guimenu>: OPTIONAL &mdash; A container element describing an action that is performed when a message matching the rule is received.</para>
                                                <itemizedlist>
                                                    <listitem>
                                                        <indexterm type="parameter">
                                                            <primary>condition</primary>
                                                        </indexterm>
                                                        <para><emphasis>condition</emphasis>: A syslog-ng filter expression. The action is performed only if the message matches the filter. The filter can include macros and name-value pairs extracted from the message.</para>
                                                    </listitem>
                                                    <listitem>
                                                        <indexterm type="parameter">
                                                            <primary>rate</primary>
                                                        </indexterm>
                                                        <para><emphasis>rate</emphasis>: Specifies maximum how many messages should be generated in the specified time period in the following format: <parameter>&lt;number-of-messages&gt;/&lt;period-in-seconds&gt;</parameter>. For example: <parameter>1/60</parameter> allows 1 message per minute. Rates apply within the scope of the context, that is, if <parameter>context-scope="host"</parameter> and <parameter>rate="1/60"</parameter>, then maximum one message is generated per minute for every host that sends a log message matching the rule. Excess messages are dropped. Note that when applying the rate to the generated messages, &abbrev; uses the timestamps of the log messages, similarly to calculating the <parameter>context-timeout</parameter>. That way <parameter>rate</parameter> is applied correctly even if the log messages are processed offline.</para>
                                                    </listitem>
                                                    <listitem>
                                                        <indexterm type="parameter">
                                                            <primary>trigger</primary>
                                                        </indexterm>
                                                        <para><emphasis>trigger</emphasis>: Specifies when the action is executed. The <parameter>trigger</parameter> attribute has the following possible values:</para>
                                                        <itemizedlist>
                                                            <listitem>
                                                                <indexterm type="parameter">
                                                                    <primary>match</primary>
                                                                </indexterm>
                                                                <para><emphasis>match</emphasis>: Execute the action immediately when a message matching the rule is received.</para>
                                                            </listitem>
                                                            <listitem>
                                                                <indexterm type="parameter">
                                                                    <primary>timeout</primary>
                                                                </indexterm>
                                                                <para><emphasis>timeout</emphasis>: Execute the action when the correlation timer (<link linkend="patterndb-schema-context-timeout"><parameter>context-timeout</parameter></link>) expires. This is available only if actions are used together with correlating messages.</para>
                                                            </listitem>
                                                        </itemizedlist>
                                                    </listitem>
                                                    <listitem>
                                                        <indexterm type="parameter">
                                                            <primary>message</primary>
                                                        </indexterm>
                                                        <para><guimenu>message</guimenu>: A container element storing the message to be sent when the action is executed. Currently &abbrev; sends these messages to the <parameter>internal()</parameter> destination.</para>
                                                    </listitem>
                                                    <listitem>
                                                        <indexterm type="parameter">
                                                            <primary>values &mdash; action</primary>
                                                        </indexterm>
                                                        <para><guimenu>values</guimenu>: A container element for values and fields that are used to create the message generated b the action.</para>
                                                        <itemizedlist>
                                                            <listitem>
                                                                <indexterm type="parameter">
                                                                    <primary>value &mdash; action</primary>
                                                                </indexterm>
                                                                <para><guimenu>value</guimenu>: Sets the value of the message field specified in the <parameter>name</parameter> attribute of the element. For example, to specify the body of the generated message, use the following syntax:</para>
                                                                <synopsis>&lt;value name="MESSAGE"&gt;A log message matched rule number $.classifier.rule_id&lt;/value&gt;</synopsis>
                                                                <para>Note that currently it is not possible to add DATE, FACILITY, or SEVERITY fields to the message.</para>
                                                                <para>When the action is used together with message correlation, the &abbrev; application automatically adds fields to the message based on the <parameter>context-scope</parameter> parameter. For example, using <parameter>context-scope="process"</parameter> automatically fills the HOST, PROGRAM, and PID fields of the generated message.</para>
                                                            </listitem>
                                                            <listitem>
                                                                <indexterm type="parameter">
                                                                    <primary>name &mdash; value &mdash; action</primary>
                                                                </indexterm>
                                                                <para><emphasis>name</emphasis>: Name of the message field set by the <parameter>value</parameter> element.</para>
                                                            </listitem>
                                                        </itemizedlist>
                                                    </listitem>
                                                </itemizedlist>
                                            </listitem>
                                          </itemizedlist>
                                        </listitem>
                                        <listitem>
                                          <indexterm>
                                          <primary>tagging messages</primary>
                                          </indexterm>
                                          <indexterm>
                                          <primary>tags</primary>
                                          </indexterm>
                                          <indexterm type="parameter">
                                              <primary>tags &mdash; rule</primary>
                                          </indexterm>
                                          <para><guimenu>tags</guimenu>: OPTIONAL
                                          &mdash; An element containing custom
                                          keywords (tags) about the messages matching
                                          the patterns. The tags can be used to label
                                          specific events (for example user logons). It is
                                          also possible to filter on these tags later
                                          (for
                                          details, see <xref linkend="tagging_messages"/>). Starting with &product; 3.2, the list of tags assigned to a message can be referenced with the <parameter>$TAGS</parameter> macro.</para>
                                          <itemizedlist>
                                          <listitem>
                                          <indexterm type="parameter">
                                              <primary>tag &mdash; rule</primary>
                                          </indexterm>
                                          <para><guimenu>tag</guimenu>: OPTIONAL
                                          &mdash; A keyword or tags
                                          applied to messages matching the
                                          rule. For example:
                                          <synopsis>&lt;tags&gt;&lt;tag&gt;UserLogin&lt;/tag&gt;&lt;/tags&gt;</synopsis></para>
                                          </listitem>
                                          </itemizedlist>
                                        </listitem>
                                    </itemizedlist>
                                </listitem>
                            </itemizedlist>
                        </listitem>
                    </itemizedlist>
                </listitem>
            </itemizedlist>
            <example id="example_pattern_database_v4_su">
                <title>A V4 pattern database containing a single rule</title>
                <indexterm>
                    <primary>pattern database</primary>
                </indexterm>
                <para>The following pattern database contains a single rule that matches a
                    log message of the <parameter>ssh</parameter> application. A sample log
                    message looks like:</para>
                <synopsis>Accepted password for sampleuser from 10.50.0.247 port 42156 ssh2</synopsis>
                <para>The following is a simple pattern database containing a matching rule.</para>
                <synopsis>&lt;patterndb version='4' pub_date='2010-10-17'&gt;
    &lt;ruleset name='ssh' id='123456678'&gt;
        &lt;pattern&gt;ssh&lt;/pattern&gt;
            &lt;rules&gt;
                &lt;rule provider='me' id='182437592347598' class='system'&gt;
                    &lt;patterns&gt;
                        &lt;pattern&gt;Accepted @QSTRING:SSH.AUTH_METHOD: @ for@QSTRING:SSH_USERNAME: @from\ @QSTRING:SSH_CLIENT_ADDRESS: @port @NUMBER:SSH_PORT_NUMBER:@ ssh2&lt;/pattern&gt;
                    &lt;/patterns&gt;
                &lt;/rule&gt;
            &lt;/rules&gt;
    &lt;/ruleset&gt;
&lt;/patterndb&gt;</synopsis>
                <para>Note that the rule uses macros that refer to parts of the message, for
                    example, you can use the <parameter>$SSH_USERNAME</parameter> macro
                    refer to the username used in the connection.</para>
                <para>The following is the same example, but with a test message and test
                    values for the parsers.</para>
                <synopsis>&lt;patterndb version='4' pub_date='2010-10-17'&gt;
    &lt;ruleset name='ssh' id='123456678'&gt;
        &lt;pattern&gt;ssh&lt;/pattern&gt;
            &lt;rules&gt;
                &lt;rule provider='me' id='182437592347598' class='system'&gt;
                    &lt;patterns&gt;
                        &lt;pattern&gt;Accepted @QSTRING:SSH.AUTH_METHOD: @ for@QSTRING:SSH_USERNAME: @from\ @QSTRING:SSH_CLIENT_ADDRESS: @port @NUMBER:SSH_PORT_NUMBER:@ ssh2&lt;/pattern&gt;
                    &lt;/patterns&gt;
                    &lt;examples&gt;
                        &lt;example&gt;
                            &lt;test_message&gt;Accepted password for sampleuser from 10.50.0.247 port 42156 ssh2&lt;/test_message&gt;
                            &lt;test_values&gt;
                                &lt;test_value name="SSH.AUTH_METHOD"&gt;password&lt;/test_value&gt;
                                &lt;test_value name="SSH_USERNAME"&gt;sampleuser&lt;/test_value&gt;
                                &lt;test_value name="SSH_CLIENT_ADDRESS"&gt;10.50.0.247&lt;/test_value&gt;
                                &lt;test_value name="SSH_PORT_NUMBER"&gt;42156&lt;/test_value&gt;
                            &lt;/test_values&gt;
                       &lt;/example&gt;
                    &lt;/examples&gt;
                &lt;/rule&gt;
            &lt;/rules&gt;
    &lt;/ruleset&gt;
&lt;/patterndb&gt;</synopsis>
                </example>
            </section>
        </section>
</chapter>
