<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE article
  [
  <!ENTITY % entities SYSTEM "../shared/syslog-ng-entities.ent">
  %entities;
  ]
 >
<procedure xml:id="wec-generate-certs" xmlns="http://docbook.org/ns/docbook">
    <title>Generate SSL certificates for &wec;</title>
    <formalpara>
        <title>Purpose:</title>
        <para/>
    </formalpara>
    <para>When the Windows-based host and the &wec; start communicating for the first time, they authenticate each other by exchanging and verifying each other's certificates. The process begins with the Windows host requesting and verifying the &wecabbrev; tool's certificates. After successful verification, the Windows host sends its own certificates for verification to &wecabbrev;.</para>
    <tip>
        <para>If the Windows host fails to authenticate the &wecabbrev; tool's certificates for some reason, check the Windows event logs for details.</para>
        <para>For details on which event logs to look at, see <xref linkend="wec-troubleshoot"/>.</para>
    </tip>
    <para>The example described in this section uses OpenSSL for certificate generation. Note, however, that you can generate certificates using the Windows Public Key Infrastructure (PKI).</para>
    <para>To generate the SSL certificates for &wecabbrev;, complete the following steps:</para>
    <formalpara>
        <title>Steps:</title>
        <para/>
    </formalpara>
    <step>
        <para>Create two certificate template files for both the server and the client(s).</para>
        <note>
            <para>The templates shown here are examples only. Not all elements of the example <filename>*opts.cnf</filename> files are mandatory, for example, you do not need to define two DNS instances.</para>
        </note>
        <para>The contents of <filename>server-certopts.cnf</filename>:</para>
        <synopsis>[req]
default_bits = 4096
default_md = sha256
req_extensions = req_ext
keyUsage = keyEncipherment,dataEncipherment
basicConstraints = CA:FALSE
distinguished_name = dn

[ req_ext ]
subjectAltName = @alt_names
extendedKeyUsage = serverAuth,clientAuth

[ alt_names ]
DNS.1 = &lt;1st DNS hostname of server (preferably FQDN)>
...
DNS.&lt;N> = &lt;Nth DNS hostname of server (preferably FQDN)>
IP.1 = &lt;1st IP of server>
...
IP.&lt;N> = &lt;Nth IP of server>

[dn]</synopsis>
        <para>For example:</para>
        <synopsis>[req]
default_bits = 4096
default_md = sha256
req_extensions = req_ext
keyUsage = keyEncipherment,dataEncipherment
basicConstraints = CA:FALSE
distinguished_name = dn

[ req_ext ]
subjectAltName = @alt_names
extendedKeyUsage = serverAuth,clientAuth

[ alt_names ]
DNS.1 = windowseventcollector.widgits
DNS.2 = wec.widgits
IP.1 = 10.64.10.2

[dn]</synopsis>
        <para>The contents of <filename>client-certopts.cnf</filename>:</para>
        <synopsis>[req]
default_bits = 4096
default_md = sha256
req_extensions = req_ext
keyUsage = keyEncipherment,dataEncipherment
basicConstraints = CA:FALSE
distinguished_name = dn

[ req_ext ]
subjectAltName = @alt_names
extendedKeyUsage = serverAuth,clientAuth

[ alt_names ]
DNS.1 = &lt;1st DNS hostname of client (preferably FQDN)>
...
DNS.&lt;N> = &lt;Nth DNS hostname of client (preferably FQDN)>
IP.1 = &lt;1st IP of client>
...
IP.&lt;N> = &lt;Nth IP of client>

[dn]</synopsis>
        <para>For example:</para>
        <synopsis>[req]
default_bits = 4096
default_md = sha256
req_extensions = req_ext
keyUsage = keyEncipherment,dataEncipherment
basicConstraints = CA:FALSE
distinguished_name = dn

[ req_ext ]
subjectAltName = @alt_names
extendedKeyUsage = serverAuth,clientAuth

[ alt_names ]
DNS.1 = windowsclient01.widgits
DNS.2 = client01.widgits
IP.1 = 10.64.10.11

[dn]</synopsis>
    </step>
    <step>
        <para>Generate the certificate authority (CA):</para>
        <synopsis>$ openssl genrsa -out ca.key 4096

$ openssl req -x509 -new -nodes -key ca.key -days 3650 -out ca.crt -subj '&lt;subject name for CA cert (must be formatted as /type0=value0/type1=value1/type2=..., characters may be escaped by \ (backslash), no spaces are skipped)>'</synopsis>
        <para>For example:</para>
        <synopsis>$ openssl genrsa -out ca.key 4096

$ openssl req -x509 -new -nodes -key ca.key -days 3650 -out ca.crt -subj '/C=AU/ST=Victoria/L=Melbourne/O=Internet Widgits Pty Ltd/OU=Operations/CN=Operations Root CA'</synopsis>
        <para>Place a copy of the <filename>ca.crt</filename> file in a directory of your choice. Take a note of the directory because you need to reference it in the <link linkend="option-cadir"><parameter>cadir</parameter></link> option of the &wecabbrev; configuration file.</para>
    </step>
    <step xml:id="step-thumbprint-CA" xreflabel="use the CA thumbprint you saved earlier">
        <para>Save the thumbprint of the CA:</para>
        <synopsis>$ openssl x509 -in ca.crt -fingerprint -sha1 -noout | sed -e 's/\://g'</synopsis>
    </step>
    <step>
        <para>Create the server certificate:</para>
        <note>
            <para>The Common Name must be the FQDN (or IP address) of the &wec; server.</para>
        </note>
        <synopsis>$ openssl req -new -newkey rsa:4096 -nodes -out server.csr -keyout server.key -subj '&lt;subject name for server cert (must be formatted as /type0=value0/type1=value1/type2=..., characters may be escaped by \ (backslash), no spaces are skipped)>'

$ openssl x509 -req -in server.csr -out server.crt -CA ca.crt -CAkey ca.key -CAcreateserial -extfile server-certopts.cnf -extensions req_ext -days 365</synopsis>
        <para>For example:</para>
        <synopsis>$ openssl req -new -newkey rsa:4096 -nodes -out server.csr -keyout server.key -subj '/C=AU/ST=Victoria/L=Melbourne/O=Internet Widgits Pty Ltd/OU=Operations/CN=windowseventcollector.widgits'

$ openssl x509 -req -in server.csr -out server.crt -CA ca.crt -CAkey ca.key -CAcreateserial -extfile server-certopts.cnf -extensions req_ext -days 365</synopsis>
    </step>
    <step>
        <para>Create client(s') certificates:</para>
        <note>
            <para>The Common Name must be the FQDN (or IP address) of the client.</para>
        </note>
        <synopsis>$ openssl req -new -newkey rsa:4096 -nodes -out client.csr -keyout client.key -subj '&lt;subject name for client cert (must be formatted as /type0=value0/type1=value1/type2=..., characters may be escaped by \ (backslash), no spaces are skipped)>'

$ openssl x509 -req -in client.csr -out client.crt -CA ca.crt -CAkey ca.key -CAcreateserial -extfile client-certopts.cnf -extensions req_ext -days 365</synopsis>
        <para>For example:</para>
        <synopsis>$ openssl req -new -newkey rsa:4096 -nodes -out client.csr -keyout client.key -subj '/C=AU/ST=Victoria/L=Melbourne/O=Internet Widgits Pty Ltd/OU=Operations/CN=windowsclient01.widgits'

$ openssl x509 -req -in client.csr -out client.crt -CA ca.crt -CAkey ca.key -CAcreateserial -extfile client-certopts.cnf -extensions req_ext -days 365</synopsis>
    </step>
    <step>
        <para>Export the client(s') certificate(s) to the format recognized by the Windows Certificate Manager tool.</para>
        <synopsis>$ openssl pkcs12 -export  -inkey client.key -in client.crt -certfile ca.crt -out client.p12</synopsis>
    </step>
</procedure>
