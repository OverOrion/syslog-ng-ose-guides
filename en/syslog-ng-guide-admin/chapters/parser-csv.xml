<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE section
 [  <!ENTITY % entities SYSTEM "../../common/syslog-ng-entities.ent">
 %entities;]>
<section xml:id="csv-parser" xmlns="http://docbook.org/ns/docbook" version="5.0">
    <title>Parsing messages with comma-separated and similar values</title>
    <indexterm>
        <primary>segmenting messages</primary>
    </indexterm>
    <indexterm>
        <primary>splitting messages</primary>
    </indexterm>
    <indexterm>
        <primary>CSV-values</primary>
    </indexterm>
    <indexterm>
        <primary>parsers</primary>
        <secondary>csv-parser</secondary>
    </indexterm>
    <xi:include href="../../common/chunk/topic-parser-csv-intro.xml" xmlns:xi="http://www.w3.org/2001/XInclude"/>
    <example xml:id="example-csv-parser">
        <title>Segmenting hostnames separated with a dash</title>
        <para>The following example separates hostnames like <userinput>example-1</userinput> and <userinput>example-2</userinput> into two parts.</para>
        <synopsis>parser p_hostname_segmentation {
    csv-parser(columns("HOSTNAME.NAME", "HOSTNAME.ID")
    delimiters("-")
    flags(escape-none)
    template("${HOST}"));
};
destination d_file { file("/var/log/messages-${HOSTNAME.NAME:-examplehost}"); };
log { source(s_local); parser(p_hostname_segmentation); destination(d_file);};</synopsis>
    </example>
    <example xml:id="example-parser-apache">
        <title>Parsing Apache log files</title>
        <para>The following parser processes the log of Apache web servers and separates them into different fields. Apache log messages can be formatted like:</para>
        <synopsis>"%h %l %u %t \"%r\" %>s %b \"%{Referer}i\" \"%{User-Agent}i\" %T %v"</synopsis>
        <para>Here is a sample message:</para>
        <synopsis>192.168.1.1 - - [31/Dec/2007:00:17:10 +0100] "GET /cgi-bin/example.cgi HTTP/1.1" 200 2708 "-" "curl/7.15.5 (i4 86-pc-linux-gnu) libcurl/7.15.5 OpenSSL/0.9.8c zlib/1.2.3 libidn/0.6.5" 2 example.balabit</synopsis>
        <para>To parse such logs, the delimiter character is set to a single whitespace (<userinput>delimiters(" ")</userinput>). Whitespaces between quotes and brackets are ignored (<userinput>quote-pairs('""[]')</userinput>).</para>
        <synopsis>parser p_apache {
    csv-parser(columns("APACHE.CLIENT_IP", "APACHE.IDENT_NAME", "APACHE.USER_NAME",
        "APACHE.TIMESTAMP", "APACHE.REQUEST_URL", "APACHE.REQUEST_STATUS",
        "APACHE.CONTENT_LENGTH", "APACHE.REFERER", "APACHE.USER_AGENT",
        "APACHE.PROCESS_TIME", "APACHE.SERVER_NAME")
         flags(escape-double-char,strip-whitespace)
         delimiters(" ")
         quote-pairs('""[]')
         );
};</synopsis>
        <para>The results can be used for example to separate log messages into different files based on the APACHE.USER_NAME field. If the field is empty, the <userinput>nouser</userinput> name is assigned.</para>
        <synopsis>log { source(s_local);
    parser(p_apache); destination(d_file);};
};
destination d_file { file("/var/log/messages-${APACHE.USER_NAME:-nouser}"); };</synopsis>
    </example>
    <example xml:id="example-parser-multiple">
        <title>Segmenting a part of a message</title>
        <para>Multiple parsers can be used to split a part of an already parsed message into further segments. The following example splits the timestamp of a parsed Apache log message into separate fields.</para>
        <synopsis>parser p_apache_timestamp {
    csv-parser(columns("APACHE.TIMESTAMP.DAY", "APACHE.TIMESTAMP.MONTH", "APACHE.TIMESTAMP.YEAR", "APACHE.TIMESTAMP.HOUR", "APACHE.TIMESTAMP.MIN", "APACHE.TIMESTAMP.MIN", "APACHE.TIMESTAMP.ZONE")
    delimiters("/: ")
    flags(escape-none)
    template("${APACHE.TIMESTAMP}"));
    };
log { source(s_local); parser(p_apache); parser(p_apache_timestamp); destination(d_file);
};</synopsis>
    </example>
    <formalpara>
        <title>Further examples:</title>
        <para/>
    </formalpara>
    <itemizedlist>
        <listitem>
            <para>For an example on using the <parameter>greedy</parameter> option, see <xref linkend="example-parser-greedy"/>.</para>
        </listitem>
    </itemizedlist>
    <section xml:id="reference-parsers-csv">
        <title>Options of CSV parsers</title>
        <indexterm>
            <primary>segmenting messages</primary>
        </indexterm>
        <indexterm>
            <primary>CSV parsers</primary>
        </indexterm>
        <indexterm>
            <primary>splitting messages</primary>
        </indexterm>
        <xi:include href="../../common/chunk/topic-parser-csv-intro.xml" xmlns:xi="http://www.w3.org/2001/XInclude"/>
        <simplesect xml:id="parser-options">
            <title>columns()</title>
            <indexterm type="parameter">
                <primary>columns()</primary>
            </indexterm>
            <informaltable frame="topbot" colsep="0" rowsep="0">
                <tgroup cols="2">
                    <colspec colnum="1" colwidth="50pt"/>
                    <tbody>
                        <row>
                            <entry>Synopsis: <?dbhtml bgcolor="#D4D6EB" ?>
<?dbfo bgcolor="#D4D6EB" ?>
                            </entry>
                            <entry>columns("PARSER.COLUMN1", "PARSER.COLUMN2", ...)</entry>
                        </row>
                    </tbody>
                </tgroup>
            </informaltable>
            <para><emphasis role="bold">Description:</emphasis> Specifies the name of the columns to separate messages to. These names will be automatically available as macros. The values of these macros do not include the delimiters.</para>
        </simplesect>
        <simplesect xml:id="csv-parser-delimiter">
            <title>delimiters()</title>
            <indexterm>
                <primary>delimiters()</primary>
            </indexterm>
            <informaltable frame="topbot" colsep="0" rowsep="0">
                <tgroup cols="2">
                    <colspec colnum="1" colwidth="50pt"/>
                    <tbody>
                        <row>
                            <entry>Synopsis: <?dbhtml bgcolor="#D4D6EB" ?>
<?dbfo bgcolor="#D4D6EB" ?>
                            </entry>
                            <entry>
                                <para>delimiters(chars("&lt;delimiter_characters&gt;")) <emphasis>or <parameter>delimiters("&lt;delimiter_characters&gt;")</parameter></emphasis></para>
                                <para>delimiters(strings("&lt;delimiter_string1&gt;", "&lt;delimiter_string2&gt;", ...)")</para>
                                <para>delimiters(chars("&lt;delimiter_characters&gt;"), strings("&lt;delimiter_string1&gt;"))</para>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </informaltable>
            <para><emphasis role="bold">Description:</emphasis> The delimiter is the character or string that separates the columns in the message. If you specify multiple characters using the <userinput>delimiters(chars("&lt;delimiter_characters&gt;"))</userinput> option, every character will be treated as a delimiter. To separate the columns at the tabulator (tab character), specify <userinput>\t</userinput>. For example, to separate the text at every hyphen (-) and colon (:) character, use <userinput>delimiters(chars("-:"))</userinput>, Note that the delimiters will not be included in the column values.</para>
            <para>If you have to use a string as a delimiter, list your string delimiters in the <userinput>delimiters(strings("&lt;delimiter_string1&gt;", "&lt;delimiter_string2&gt;", ...)")</userinput> format.</para>
            <para>If you use more than one delimiter, note the following points:</para>
            <itemizedlist>
                <listitem>
                    <para>&abbrev; will split the message at the nearest possible delimiter. The order of the delimiters in the configuration file does not matter.</para>
                </listitem>
                <listitem>
                    <para>You can use both string delimiters and character delimiters in a parser.</para>
                </listitem>
                <listitem>
                    <para>The string delimiters can include characters that are also used as character delimiters.</para>
                </listitem>
                <listitem>
                    <para>If a string delimiter and a character delimiter both match at the same position of the message, &abbrev; uses the string delimiter.</para>
                </listitem>
            </itemizedlist>
        </simplesect>
        <simplesect>
            <title>dialect()</title>
            <indexterm type="parameter">
                <primary>dialect()</primary>
            </indexterm>
            <informaltable frame="topbot" colsep="0" rowsep="0">
                <tgroup cols="2">
                    <colspec colnum="1" colwidth="50pt"/>
                    <tbody>
                        <row>
                            <entry>Synopsis: <?dbhtml bgcolor="#D4D6EB" ?>
<?dbfo bgcolor="#D4D6EB" ?>
                            </entry>
                            <entry>escape-none|escape-backslash|escape-double-char</entry>
                        </row>
                    </tbody>
                </tgroup>
            </informaltable>
            <para><emphasis role="bold">Description:</emphasis> Specifies how to handle escaping in the parsed message. The following values are available. Default value: <parameter>escape-none</parameter></para>
            <itemizedlist>

                <xi:include href="../../common/chunk/option-escaping.xml" xmlns:xi="http://www.w3.org/2001/XInclude"/>

            </itemizedlist>
            <synopsis>parser p_demo_parser {
    csv-parsercsv-parser(
        prefix(".csv.")
        delimiters(" ")
        dialect(escape-backslash)
        flags(strip-whitespace, greedy)
        columns("column1", "column2", "column3"));
};</synopsis>
        </simplesect>
        <simplesect>
            <title>flags()</title>
            <indexterm>
                <primary>flags()</primary>
            </indexterm>
            <informaltable frame="topbot" colsep="0" rowsep="0">
                <tgroup cols="2">
                    <colspec colnum="1" colwidth="50pt"/>
                    <tbody>
                        <row>
                            <entry>Synopsis: <?dbhtml bgcolor="#D4D6EB" ?>
<?dbfo bgcolor="#D4D6EB" ?>
                            </entry>
                            <entry>drop-invalid, escape-none, escape-backslash, escape-double-char, greedy, strip-whitespace</entry>
                        </row>
                    </tbody>
                </tgroup>
            </informaltable>
            <para><emphasis role="bold">Description:</emphasis> Specifies various options for parsing the message. The following flags are available:</para>
            <itemizedlist>
                <listitem>
                    <indexterm>
                        <primary>drop-invalid</primary>
                    </indexterm>
                    <para><emphasis>drop-invalid</emphasis>: When the <parameter>drop-invalid</parameter> option is set, the parser does not process messages that do not match the parser. For example, a message does not match the parser if it has less columns than specified in the parser, or it has more columns but the <parameter>greedy</parameter> flag is not enabled. Using the <parameter>drop-invalid</parameter> option practically turns the parser into a special filter, that matches messages that have the predefined number of columns (using the specified delimiters).</para>
                    <tip>
                        <para>Messages dropped as invalid can be processed by a <parameter>fallback</parameter> log path. For details on the <parameter>fallback</parameter> option, see <xref linkend="reference-logflags"/>.</para>
                    </tip>
                </listitem>

                <xi:include href="../../common/chunk/option-escaping.xml" xmlns:xi="http://www.w3.org/2001/XInclude"/>

                <listitem>
                    <indexterm>
                        <primary>greedy</primary>
                    </indexterm>
                    <para><emphasis>greedy</emphasis>: The <parameter>greedy</parameter> option assigns the remainder of the message to the last column, regardless of the delimiter characters set. You can use this option to process messages where the number of columns varies.</para>
                    <example xml:id="example-parser-greedy">
                        <title>Adding the end of the message to the last column</title>
                        <para>If the <parameter>greedy</parameter> option is enabled, the syslog-ng application adds the not-yet-parsed part of the message to the last column, ignoring any delimiter characters that may appear in this part of the message.</para>
                        <para>For example, you receive the following comma-separated message: <userinput>example 1, example2, example3</userinput>, and you segment it with the following parser:</para>
                        <synopsis>csv-parser(columns("COLUMN1", "COLUMN2", "COLUMN3") delimiters(","));</synopsis>
                        <para>The <userinput>COLUMN1</userinput>, <userinput>COLUMN2</userinput>, and <userinput>COLUMN3</userinput> variables will contain the strings <userinput>example1</userinput>, <userinput>example2</userinput>, and <userinput>example3</userinput>, respectively. If the message looks like <userinput>example 1, example2, example3, some more information</userinput>, then any text appearing after the third comma (that is, <userinput>some more information</userinput>) is not parsed, and possibly lost if you use only the variables to reconstruct the message (for example, to send it to different columns of an SQL table).</para>
                        <para>Using the <parameter>greedy</parameter> flag will assign the remainder of the message to the last column, so that the <userinput>COLUMN1</userinput>, <userinput>COLUMN2</userinput>, and <userinput>COLUMN3</userinput> variables will contain the strings <userinput>example1</userinput>, <userinput>example2</userinput>, and <userinput>example3, some more information</userinput>.</para>
                        <synopsis>csv-parser(columns("COLUMN1", "COLUMN2", "COLUMN3") delimiters(",") flags(greedy));</synopsis>
                    </example>
                </listitem>
                <listitem>
                    <indexterm>
                        <primary>strip-whitespace</primary>
                    </indexterm>
                    <para><emphasis>strip-whitespace</emphasis>: The <parameter>strip-whitespace</parameter> flag removes leading and trailing whitespaces from all columns.</para>
                </listitem>
            </itemizedlist>
        </simplesect>
        <simplesect>
            <title>quote-pairs()</title>
            <indexterm>
                <primary>quote-pairs()</primary>
            </indexterm>
            <indexterm>
                <primary>quote_pairs()</primary>
            </indexterm>
            <informaltable frame="topbot" colsep="0" rowsep="0">
                <tgroup cols="2">
                    <colspec colnum="1" colwidth="50pt"/>
                    <tbody>
                        <row>
                            <entry>Synopsis: <?dbhtml bgcolor="#D4D6EB" ?>
<?dbfo bgcolor="#D4D6EB" ?>
                            </entry>
                            <entry>quote-pairs('&lt;quote_pairs&gt;')</entry>
                        </row>
                    </tbody>
                </tgroup>
            </informaltable>
            <para><emphasis role="bold">Description:</emphasis> List quote-pairs between single quotes. Delimiter characters or strings enclosed between quote characters are ignored. Note that the beginning and ending quote character does not have to be identical, for example <userinput>[}</userinput> can also be a quote-pair. For an example of using <parameter>quote-pairs()</parameter> to parse Apache log files, see <xref linkend="example-parser-apache"/>.</para>
        </simplesect>
        <simplesect xml:id="csv-parser-prefix">
            <xi:include href="../../common/chunk/option-parser-prefix.xml" xmlns:xi="http://www.w3.org/2001/XInclude"/>
        </simplesect>
        <simplesect>
            <xi:include href="../../common/chunk/option-parser-template.xml" xmlns:xi="http://www.w3.org/2001/XInclude"/>
            <para>For examples, see <xref linkend="example-csv-parser"/> and <xref linkend="example-parser-multiple"/>.</para>
        </simplesect>
    </section>
</section>
