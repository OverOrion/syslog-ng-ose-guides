<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter
 [  <!ENTITY % entities SYSTEM "../../common/syslog-ng-entities.ent">
 %entities;]>
<chapter xml:id="chapter-encrypted-transport-tls" xmlns="http://docbook.org/ns/docbook" version="5.0">
    <title>TLS-encrypted message transfer</title>
<!-- FIXME jumplist -->
    <section xml:id="concepts-tls">
        <title>Secure logging using TLS</title>
        <indexterm>
            <primary>TLS</primary>
        </indexterm>
        <indexterm>
            <primary>transport layer security</primary>
            <secondary>TLS</secondary>
        </indexterm>
        <indexterm>
            <primary>encrypting log messages</primary>
        </indexterm>
        <indexterm>
            <primary>authentication</primary>
        </indexterm>
        <para>The syslog-ng application can send and receive log messages securely over the network using the Transport Layer Security (TLS) protocol using the <parameter>network()</parameter> and <parameter>syslog()</parameter> drivers.</para>
        <para>TLS uses certificates to authenticate and encrypt the communication, as illustrated on the following figure:</para>
        <figure>
            <title>Certificate-based authentication</title>
            <mediaobject>
                <imageobject role="html">
                    <imagedata format="PNG" fileref="certificate-based_authentication01.png"/>
                </imageobject>
                <imageobject role="fo">
                    <imagedata format="PNG" fileref="&imgroot;/certificate-based_authentication01.png"/>
                </imageobject>
            </mediaobject>
        </figure>
        <indexterm>
            <primary>certificates</primary>
        </indexterm>
        <para>The client authenticates the server by requesting its certificate and public key. Optionally, the server can also request a certificate from the client, thus mutual authentication is also possible.</para>
        <para>In order to use TLS encryption in syslog-ng, the following elements are required:</para>
        <itemizedlist>
            <listitem>
                <para>A certificate on the syslog-ng server that identifies the syslog-ng server.</para>
            </listitem>
            <listitem>
                <para>The certificate of the Certificate Authority that issued the certificate of the syslog-ng server (or the self-signed certificate of the syslog-ng server) must be available on the syslog-ng client.</para>
            </listitem>
        </itemizedlist>
        <para>When using mutual authentication to verify the identity of the clients, the following elements are required:</para>
        <indexterm>
            <primary>authentication</primary>
        </indexterm>
        <indexterm>
            <primary>mutual authentication</primary>
        </indexterm>
        <itemizedlist>
            <listitem>
                <para>A certificate must be available on the syslog-ng client. This certificate identifies the syslog-ng client.</para>
            </listitem>
            <listitem>
                <para>The certificate of the Certificate Authority that issued the certificate of the syslog-ng client must be available on the syslog-ng server.</para>
            </listitem>
        </itemizedlist>
        <para>Mutual authentication ensures that the syslog-ng server accepts log messages only from authorized clients.</para>
        <para>For details on configuring TLS communication in syslog-ng, see <xref linkend="tls-serverauth"/>.</para>
    </section>
    <section xml:id="tls-serverauth">
        <title>Encrypting log messages with TLS</title>
        <indexterm>
            <primary>TLS</primary>
            <secondary>configuring</secondary>
        </indexterm>
        <indexterm>
            <primary>authentication</primary>
        </indexterm>
        <indexterm>
            <primary>encrypting log messages</primary>
        </indexterm>
        <para>This section describes how to configure TLS encryption in syslog-ng. For the concepts of using TLS in syslog-ng, see <xref linkend="concepts-tls"/>.</para>
        <para>Create an X.509 certificate for the syslog-ng server.</para>
        <xi:include href="../../common/wnt/note-cert-common-name.xml" xmlns:xi="http://www.w3.org/2001/XInclude"/>
<!-- FIXME peldascenario a commonnevrr/altnevtre -->
        <procedure xml:id="procedure-configuring-tls-client">
            <title>Configuring TLS on the syslog-ng clients</title>
            <formalpara>
                <title>Purpose:</title>
                <para/>
            </formalpara>
            <para>Complete the following steps on every syslog-ng client host. Examples are provided using both the legacy BSD-syslog protocol (using the <parameter>network()</parameter> driver) and the new IETF-syslog protocol standard (using the <parameter>syslog()</parameter> driver):</para>
            <formalpara>
                <title>Steps:</title>
                <para/>
            </formalpara>
            <step>
                <para>Copy the CA certificate (for example <filename>cacert.pem</filename>) of the Certificate Authority that issued the certificate of the syslog-ng server (or the self-signed certificate of the syslog-ng server) to the syslog-ng client hosts, for example into the <filename>/opt/syslog-ng/etc/syslog-ng/ca.d</filename> directory.</para>
                <para>Issue the following command on the certificate: <command>openssl x509 -noout -hash -in cacert.pem</command> The result is a hash (for example <userinput>6d2962a8</userinput>), a series of alphanumeric characters based on the Distinguished Name of the certificate.</para>
                <xi:include href="../../common/chunk/para-certificate-hash-md5.xml" xmlns:xi="http://www.w3.org/2001/XInclude"/>
                <para>Issue the following command to create a symbolic link to the certificate that uses the hash returned by the previous command and the <userinput>.0</userinput> suffix.</para>
                <para><command>ln -s cacert.pem 6d2962a8.0</command></para>
                <para>On Microsoft Windows, use the following command: <command>mklink 6d2962a8.0 cacert.pem</command></para>
            </step>
            <step>
                <para>Add a destination statement to the syslog-ng configuration file that uses the <userinput>tls( ca-dir(path_to_ca_directory) )</userinput> option and specify the directory using the CA certificate. The destination must use the <parameter>network()</parameter> or the <parameter>syslog()</parameter> destination driver, and the IP address and port parameters of the driver must point to the syslog-ng server.</para>
                <example>
                    <title>A destination statement using TLS</title>
                    <para>The following destination encrypts the log messages using TLS and sends them to the <userinput>6514/TCP</userinput> port of the syslog-ng server having the <userinput>10.1.2.3</userinput> IP address.</para>
                    <synopsis>destination demo_tls_destination {
    network("10.1.2.3" port(6514)
        transport("tls")
        tls( ca-dir("/opt/syslog-ng/etc/syslog-ng/ca.d"))
    );
};</synopsis>
                    <para>A similar statement using the IETF-syslog protocol and thus the <parameter>syslog()</parameter> driver:</para>
                    <synopsis>destination demo_tls_syslog_destination {
    syslog("10.1.2.3" port(6514)
        transport("tls")
        tls(ca-dir("/opt/syslog-ng/etc/syslog-ng/ca.d"))
    );
};</synopsis>
                </example>
            </step>
            <step>
                <para>Include the destination created in Step 2 in a log statement.</para>
                <warning>
                    <para>The encrypted connection between the server and the client fails if the <parameter>Common Name</parameter> or the <parameter>subject_alt_name</parameter> parameter of the server certificate does not contain the hostname or the IP address (as resolved from the syslog-ng clients and relays) of the server.</para>
                    <para>Do not forget to update the certificate files when they expire.</para>
                </warning>
            </step>
        </procedure>
        <procedure xml:id="procedure-configuring-tls-server">
            <title>Configuring TLS on the syslog-ng server</title>
            <formalpara>
                <title>Purpose:</title>
                <para/>
            </formalpara>
            <para>Complete the following steps on the syslog-ng server:</para>
            <formalpara>
                <title>Steps:</title>
                <para/>
            </formalpara>
            <step>
                <para>Copy the certificate (for example <filename>syslog-ng.cert</filename>) of the syslog-ng server to the syslog-ng server host, for example into the <filename>/opt/syslog-ng/etc/syslog-ng/cert.d</filename> directory. The certificate must be a valid X.509 certificate in PEM format.</para>
            </step>
            <step>
                <para>Copy the private key (for example <filename>syslog-ng.key</filename>) matching the certificate of the syslog-ng server to the syslog-ng server host, for example into the <filename>/opt/syslog-ng/etc/syslog-ng/key.d</filename> directory. The key must be in PEM format, and must not be password-protected.</para>
            </step>
            <step>
                <para>Add a source statement to the syslog-ng configuration file that uses the <userinput>tls( key-file(key_file_fullpathname) cert-file(cert_file_fullpathname) )</userinput> option and specify the key and certificate files. The source must use the source driver (<parameter>network()</parameter> or <parameter>syslog()</parameter>) matching the destination driver used by the syslog-ng client.</para>
                <example>
                    <title>A source statement using TLS</title>
                    <para>The following source receives log messages encrypted using TLS, arriving to the <userinput>1999/TCP</userinput> port of any interface of the syslog-ng server.</para>
                    <synopsis>source demo_tls_source {
    network(ip(0.0.0.0) port(1999)
        transport("tls")
        tls( key-file("/opt/syslog-ng/etc/syslog-ng/key.d/syslog-ng.key")
             cert-file("/opt/syslog-ng/etc/syslog-ng/cert.d/syslog-ng.cert"))
    );
};</synopsis>
                    <para>A similar source for receiving messages using the IETF-syslog protocol:</para>
                    <synopsis>source demo_tls_syslog_source {
    syslog(ip(0.0.0.0) port(1999)
        transport("tls")
        tls( key-file("/opt/syslog-ng/etc/syslog-ng/key.d/syslog-ng.key")
             cert-file("/opt/syslog-ng/etc/syslog-ng/cert.d/syslog-ng.cert"))
    );
};</synopsis>
                </example>
            </step>
            <step>
                <para>Disable mutual authentication for the source by setting the following TLS option in the source statement: <userinput>tls( peer-verify(optional-untrusted);</userinput></para>
                <para>For details on how to configure mutual authentication, see <xref linkend="tls-mutualauth"/>.</para>
                <para>For the details of the available <parameter>tls()</parameter> options, see <xref linkend="tlsoptions"/>.</para>
                <example>
                    <title>Disabling mutual authentication</title>
                    <para>The following source receives log messages encrypted using TLS, arriving to the <userinput>1999/TCP</userinput> port of any interface of the syslog-ng server. The identity of the syslog-ng client is not verified.</para>
                    <synopsis>source demo_tls_source {
    network(ip(0.0.0.0) port(1999)
        transport("tls")
        tls( key-file("/opt/syslog-ng/etc/syslog-ng/key.d/syslog-ng.key")
             cert-file("/opt/syslog-ng/etc/syslog-ng/cert.d/syslog-ng.cert")
             peer-verify(optional-untrusted))
    );
};</synopsis>
                    <para>A similar source for receiving messages using the IETF-syslog protocol:</para>
                    <synopsis>source demo_tls_syslog_source {
    syslog(ip(0.0.0.0) port(1999)
        transport("tls")
        tls( key-file("/opt/syslog-ng/etc/syslog-ng/key.d/syslog-ng.key")
             cert-file("/opt/syslog-ng/etc/syslog-ng/cert.d/syslog-ng.cert")
             peer-verify(optional-untrusted))
    );
};</synopsis>
                </example>
                <warning>
                    <para>Do not forget to update the certificate and key files when they expire.</para>
                </warning>
            </step>
        </procedure>
    </section>
    <section xml:id="tls-mutualauth">
        <title>Mutual authentication using TLS</title>
        <indexterm>
            <primary>TLS</primary>
            <secondary>configuring</secondary>
        </indexterm>
        <indexterm>
            <primary>mutual authentication</primary>
        </indexterm>
        <para>This section describes how to configure mutual authentication between the syslog-ng server and the client. Configuring mutual authentication is similar to configuring TLS (for details, see <xref linkend="tls-serverauth"/>), but the server verifies the identity of the client as well. Therefore, each client must have a certificate, and the server must have the certificate of the CA that issued the certificate of the clients. For the concepts of using TLS in syslog-ng, see <xref linkend="concepts-tls"/>.</para>
        <procedure xml:id="procedure-configuring-mutual-tls-client">
            <title>Configuring TLS on the syslog-ng clients</title>
            <formalpara>
                <title>Purpose:</title>
                <para/>
            </formalpara>
            <para>Complete the following steps on every syslog-ng client host. Examples are provided using both the legacy BSD-syslog protocol (using the <parameter>network()</parameter> driver) and the new IETF-syslog protocol standard (using the <parameter>syslog()</parameter> driver):</para>
            <formalpara>
                <title>Steps:</title>
                <para/>
            </formalpara>
            <step>
                <para>Create an X.509 certificate for the syslog-ng client.<!--The
                        <parameter>subject_alt_name</parameter> parameter (or the <parameter>Common
                        Name</parameter> parameter if the <parameter>subject_alt_name</parameter>
                    parameter is empty) must contain the hostname or the IP address (as resolved
                    from the syslog-ng clients and relays) of the client.--></para>
            </step>
            <step>
                <para>Copy the certificate (for example <filename>client_cert.pem</filename>) and the matching private key (for example <filename>client.key</filename>) to the syslog-ng client host, for example into the <filename>/opt/syslog-ng/etc/syslog-ng/cert.d</filename> directory. The certificate must be a valid X.509 certificate in PEM format and must not be password-protected.</para>
            </step>
            <step>
                <para>Copy the CA certificate of the Certificate Authority (for example <filename>cacert.pem</filename>) that issued the certificate of the syslog-ng server (or the self-signed certificate of the syslog-ng server) to the syslog-ng client hosts, for example into the <filename>/opt/syslog-ng/etc/syslog-ng/ca.d</filename> directory.</para>
                <para>Issue the following command on the certificate: <command>openssl x509 -noout -hash -in cacert.pem</command> The result is a hash (for example <userinput>6d2962a8</userinput>), a series of alphanumeric characters based on the Distinguished Name of the certificate.</para>
                <xi:include href="../../common/chunk/para-certificate-hash-md5.xml" xmlns:xi="http://www.w3.org/2001/XInclude"/>
                <para>Issue the following command to create a symbolic link to the certificate that uses the hash returned by the previous command and the <userinput>.0</userinput> suffix.</para>
                <para><command>ln -s cacert.pem 6d2962a8.0</command></para>
                <para>On Microsoft Windows, use the following command: <command>mklink 6d2962a8.0 cacert.pem</command></para>
            </step>
            <step>
                <para>Add a destination statement to the syslog-ng configuration file that uses the <userinput>tls( ca-dir(path_to_ca_directory) )</userinput> option and specify the directory using the CA certificate. The destination must use the <parameter>network()</parameter> or the <parameter>syslog()</parameter> destination driver, and the IP address and port parameters of the driver must point to the syslog-ng server. Include the client's certificate and private key in the <parameter>tls()</parameter> options.</para>
                <example>
                    <title>A destination statement using mutual authentication</title>
                    <para>The following destination encrypts the log messages using TLS and sends them to the <userinput>1999/TCP</userinput> port of the syslog-ng server having the <userinput>10.1.2.3</userinput> IP address. The private key and the certificate file authenticating the client is also specified.</para>
                    <synopsis>destination demo_tls_destination {
    network("10.1.2.3" port(1999)
        transport("tls")
        tls( ca-dir("/opt/syslog-ng/etc/syslog-ng/ca.d")
             key-file("/opt/syslog-ng/etc/syslog-ng/key.d/client.key")
             cert-file("/opt/syslog-ng/etc/syslog-ng/cert.d/client_cert.pem")) ); };</synopsis>
                    <synopsis>destination demo_tls_syslog_destination {
    syslog("10.1.2.3" port(1999)
        transport("tls")
            tls( ca-dir("/opt/syslog-ng/etc/syslog-ng/ca.d")
                 key-file("/opt/syslog-ng/etc/syslog-ng/key.d/client.key")
                 cert-file("/opt/syslog-ng/etc/syslog-ng/cert.d/client_cert.pem")) ); };</synopsis>
                </example>
            </step>
            <step>
                <para>Include the destination created in Step 2 in a log statement.</para>
                <warning>
                    <para>The encrypted connection between the server and the client fails if the <parameter>Common Name</parameter> or the <parameter>subject_alt_name</parameter> parameter of the server certificate does not the hostname or the IP address (as resolved from the syslog-ng clients and relays) of the server.</para>
                    <para>Do not forget to update the certificate files when they expire.</para>
                </warning>
            </step>
        </procedure>
        <procedure xml:id="procedure-configuring-mutual-tls-server">
            <title>Configuring TLS on the syslog-ng server</title>
            <formalpara>
                <title>Purpose:</title>
                <para/>
            </formalpara>
            <para>Complete the following steps on the syslog-ng server:</para>
            <formalpara>
                <title>Steps:</title>
                <para/>
            </formalpara>
            <step>
                <para>Copy the certificate (for example <filename>syslog-ng.cert</filename>) of the syslog-ng server to the syslog-ng server host, for example into the <filename>/opt/syslog-ng/etc/syslog-ng/cert.d</filename> directory. The certificate must be a valid X.509 certificate in PEM format.</para>
            </step>
            <step>
                <para>Copy the CA certificate (for example <filename>cacert.pem</filename>) of the Certificate Authority that issued the certificate of the syslog-ng clients to the syslog-ng server, for example into the <filename>/opt/syslog-ng/etc/syslog-ng/ca.d</filename> directory.</para>
                <para>Issue the following command on the certificate: <command>openssl x509 -noout -hash -in cacert.pem</command> The result is a hash (for example <userinput>6d2962a8</userinput>), a series of alphanumeric characters based on the Distinguished Name of the certificate.</para>
                <xi:include href="../../common/chunk/para-certificate-hash-md5.xml" xmlns:xi="http://www.w3.org/2001/XInclude"/>
                <para>Issue the following command to create a symbolic link to the certificate that uses the hash returned by the previous command and the <userinput>.0</userinput> suffix.</para>
                <para><command>ln -s cacert.pem 6d2962a8.0</command></para>
                <para>On Microsoft Windows, use the following command: <command>mklink 6d2962a8.0 cacert.pem</command></para>
            </step>
            <step>
                <para>Copy the private key (for example <filename>syslog-ng.key</filename>) matching the certificate of the syslog-ng server to the syslog-ng server host, for example into the <filename>/opt/syslog-ng/etc/syslog-ng/key.d</filename> directory. The key must be in PEM format, and must not be password-protected.</para>
            </step>
            <step>
                <para>Add a source statement to the syslog-ng configuration file that uses the <userinput>tls( key-file(key_file_fullpathname) cert-file(cert_file_fullpathname) )</userinput> option and specify the key and certificate files. The source must use the source driver (<parameter>network()</parameter> or <parameter>syslog()</parameter>) matching the destination driver used by the syslog-ng client. Also specify the directory storing the certificate of the CA that issued the client's certificate.</para>
                <para>For the details of the available <parameter>tls()</parameter> options, see <xref linkend="tlsoptions"/>.</para>
                <example>
                    <title>A source statement using TLS</title>
                    <para>The following source receives log messages encrypted using TLS, arriving to the <userinput>1999/TCP</userinput> port of any interface of the syslog-ng server.</para>
                    <synopsis>source demo_tls_source {
    network(ip(0.0.0.0) port(1999)
        transport("tls")
        tls( key-file("/opt/syslog-ng/etc/syslog-ng/key.d/syslog-ng.key")
             cert-file("/opt/syslog-ng/etc/syslog-ng/cert.d/syslog-ng.cert")
             ca-dir("/opt/syslog-ng/etc/syslog-ng/ca.d")) ); };</synopsis>
                    <para>A similar source for receiving messages using the IETF-syslog protocol:</para>
                    <synopsis>source demo_tls_syslog_source {
    syslog(ip(0.0.0.0) port(1999)
    transport("tls")
    tls( key-file("/opt/syslog-ng/etc/syslog-ng/key.d/syslog-ng.key")
         cert-file("/opt/syslog-ng/etc/syslog-ng/cert.d/syslog-ng.cert")
         ca-dir("/opt/syslog-ng/etc/syslog-ng/ca.d")) ); };</synopsis>
                </example>
                <warning>
<!--<para>The encrypted connection between the server and the client fails if the
                            <parameter>Common Name</parameter> or the
                        <parameter>subject_alt_name</parameter> parameter of the client certificate
                        does not the hostname or the IP address (as resolved from the syslog-ng
                        clients and relays) of the server.</para>-->
                    <para>Do not forget to update the certificate and key files when they expire.</para>
                </warning>
            </step>
        </procedure>
    </section>
    <section xml:id="tlsoptions">
        <title>TLS options</title>
        <indexterm>
            <primary>TLS</primary>
            <secondary>reference</secondary>
        </indexterm>
        <para>The syslog-ng application can encrypt incoming and outgoing syslog message flows using TLS if you use the <parameter>network()</parameter> or <parameter>syslog()</parameter> drivers.</para>
        <note>
            <para>The format of the TLS connections used by syslog-ng is similar to using syslog-ng and stunnel, but the source IP information is not lost.</para>
        </note>
        <para>To encrypt connections, use the <parameter>transport("tls")</parameter> and <parameter>tls()</parameter> options in the source and destination statements.</para>
        <para>The tls() option can include the following settings:</para>
        <simplesect>
            <title>allow-compress()</title>
            <indexterm>
                <primary>allow-compress()</primary>
            </indexterm>
            <indexterm>
                <primary>compression</primary>
                <secondary>on-the-wire</secondary>
            </indexterm>
            <indexterm>
                <primary>on-the-wire compression</primary>
            </indexterm>
            <informaltable frame="topbot" colsep="0" rowsep="0">
                <tgroup cols="2">
                    <colspec colnum="1" colwidth="80pt"/>
                    <tbody>
                        <row>
                            <entry>Accepted values: <?dbhtml bgcolor="#D4D6EB" ?>
<?dbfo bgcolor="#D4D6EB" ?>
                            </entry>
                            <entry>yes | no</entry>
                        </row>
                        <row>
                            <entry>Default: <?dbhtml bgcolor="#D4D6EB" ?>
<?dbfo bgcolor="#D4D6EB" ?>
                            </entry>
                            <entry>no</entry>
                        </row>
                    </tbody>
                </tgroup>
            </informaltable>
            <para><emphasis role="bold">Description:</emphasis> Enable on-the-wire compression in TLS communication. Note that this option must be enabled both on the server and the client side to have any effect. Enabling compression can significantly reduce the bandwidth required to transport the messages, but can slightly decrease the performance of &abbrev;, reducing the number of transferred messages during a given period.</para>
        </simplesect>
        <simplesect>
            <title>ca-dir()</title>
            <indexterm>
                <primary>ca-dir()</primary>
            </indexterm>
            <indexterm>
                <primary>ca_dir()</primary>
            </indexterm>
            <informaltable frame="topbot" colsep="0" rowsep="0">
                <tgroup cols="2">
                    <colspec colnum="1" colwidth="80pt"/>
                    <tbody>
                        <row>
                            <entry>Accepted values: <?dbhtml bgcolor="#D4D6EB" ?>
<?dbfo bgcolor="#D4D6EB" ?>
                            </entry>
                            <entry>Directory name</entry>
                        </row>
                        <row>
                            <entry>Default: <?dbhtml bgcolor="#D4D6EB" ?>
<?dbfo bgcolor="#D4D6EB" ?>
                            </entry>
                            <entry>none</entry>
                        </row>
                    </tbody>
                </tgroup>
            </informaltable>
            <para><emphasis role="bold">Description:</emphasis> Name of a directory, that contains a set of trusted CA certificates in PEM format. The CA certificate files have to be named after the 32-bit hash of the subject's name. This naming can be created using the c_rehash utility in openssl.</para>
        </simplesect>
        <simplesect condition="pe" xml:id="tls-option-ca-dir-layout">
            <title>ca-dir-layout()</title>
            <indexterm>
                <primary>ca-dir-layout()</primary>
            </indexterm>
            <indexterm>
                <primary>ca_dir_layout()</primary>
            </indexterm>
            <informaltable frame="topbot" colsep="0" rowsep="0">
                <tgroup cols="2">
                    <colspec colnum="1" colwidth="80pt"/>
                    <tbody>
                        <row>
                            <entry>Accepted values: <?dbhtml bgcolor="#D4D6EB" ?>
<?dbfo bgcolor="#D4D6EB" ?>
                            </entry>
                            <entry><userinput>md5-based</userinput> | <userinput>sha1-based</userinput>
                            </entry>
                        </row>
                        <row>
                            <entry>Default: <?dbhtml bgcolor="#D4D6EB" ?>
<?dbfo bgcolor="#D4D6EB" ?>
                            </entry>
                            <entry><userinput>sha1-based</userinput>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </informaltable>
            <para><emphasis role="bold">Description:</emphasis> The type of the hash used for the CA certificates.</para>
            <xi:include href="../../common/wnt/warning-ca-dir-layout.xml" xmlns:xi="http://www.w3.org/2001/XInclude"/>
        </simplesect>
        <simplesect>
            <title>cert-file()</title>
            <indexterm>
                <primary>cert-file()</primary>
            </indexterm>
            <indexterm>
                <primary>cert_file()</primary>
            </indexterm>
            <informaltable frame="topbot" colsep="0" rowsep="0">
                <tgroup cols="2">
                    <colspec colnum="1" colwidth="80pt"/>
                    <tbody>
                        <row>
                            <entry>Accepted values: <?dbhtml bgcolor="#D4D6EB" ?>
<?dbfo bgcolor="#D4D6EB" ?>
                            </entry>
                            <entry>Filename</entry>
                        </row>
                        <row>
                            <entry>Default: <?dbhtml bgcolor="#D4D6EB" ?>
<?dbfo bgcolor="#D4D6EB" ?>
                            </entry>
                            <entry>none</entry>
                        </row>
                    </tbody>
                </tgroup>
            </informaltable>
            <para><emphasis role="bold">Description:</emphasis> Name of a file, that contains an X.509 certificate (or a certificate chain) in PEM format, suitable as a TLS certificate, matching the private key. If the file contains a certificate chain, the file must begin with the certificate of the host, followed by the CA certificate that signed the certificate of the host, and any other signing CAs in order.</para>
        </simplesect>
        <simplesect condition="pe" xml:id="ss-cert-subject-option"><title>cert-subject()</title><indexterm><primary>cert-subject()</primary></indexterm><indexterm><primary>cert_subject()</primary></indexterm><informaltable frame="topbot" colsep="0" rowsep="0"><tgroup cols="2"><colspec colnum="1" colwidth="80pt"/><tbody><row><entry>Accepted values: <?dbhtml bgcolor="#D4D6EB" ?> <?dbfo bgcolor="#D4D6EB" ?> </entry><entry>string</entry></row><row><entry>Default: <?dbhtml bgcolor="#D4D6EB" ?> <?dbfo bgcolor="#D4D6EB" ?> </entry><entry>none</entry></row></tbody></tgroup></informaltable><para><emphasis role="bold">Description:</emphasis> Only available on Windows systems. The subject of the certificate you wish to use for authenticating the local endpoint of the TLS connection. If set, &abbrev; will retrieve the certificate that has the specified subject from the <emphasis>Local Computer > Personal</emphasis> certificate store. Therefore, if this option is used, first import the respective certificate and the corresponding private key to the appropriate certificate store as a <filename>.pfx</filename> file. The certificate's subject has to be specified in the following format: <userinput>cert-subject("HU, Budapest, Balabit, syslog-ng team, client")</userinput>.</para><para>To get the format for the <parameter>cert-subject()</parameter> string right, check the certificate's subject first. Concatenate the different key-value pairs in the subject, going from bottom to top, omitting the keys and equals signs, and adding commas for newline characters.</para><para>In the example provided in <xref linkend="fig-ms-certificate"/>, the <parameter>cert-subject()</parameter> string would look like this: </para><para><userinput>cert-subject("Copyright © 1997 Microsoft Corp., Microsoft Corporation, Microsoft Root Authority")</userinput></para><figure xml:id="fig-ms-certificate"><title>Getting details of the certificate subject for the cert-subject() string</title><mediaobject><imageobject role="html"><imagedata format="PNG" fileref="microsoft-certificate.png" contentwidth="70%"/></imageobject><imageobject role="fo"><imagedata format="PNG" fileref="&imgroot;/microsoft-certificate.png" contentwidth="70%"/></imageobject></mediaobject></figure></simplesect>
        <simplesect xml:id="tls-option-cipher-suite">
            <title>cipher-suite()</title>
            <indexterm>
                <primary>cipher-suite()</primary>
            </indexterm>
            <indexterm>
                <primary>cipher_suite()</primary>
            </indexterm>
            <informaltable frame="topbot" colsep="0" rowsep="0">
                <tgroup cols="2">
                    <colspec colnum="1" colwidth="80pt"/>
                    <tbody>
                        <row>
                            <entry>Accepted values: <?dbhtml bgcolor="#D4D6EB" ?>
<?dbfo bgcolor="#D4D6EB" ?>
                            </entry>
                            <entry>Name of a cipher, or a colon-separated list</entry>
                        </row>
                        <row>
                            <entry>Default: <?dbhtml bgcolor="#D4D6EB" ?>
<?dbfo bgcolor="#D4D6EB" ?>
                            </entry>
                            <entry>aes-128-cbc</entry>
                            <entry condition="ose">Depends on the OpenSSL version that &abbrev; uses</entry>
                        </row>
                    </tbody>
                </tgroup>
            </informaltable>
            <para><emphasis role="bold">Description:</emphasis> Specifies the cipher, hash, and key-exchange algorithms used for the encryption, for example, <userinput>ECDHE-ECDSA-AES256-SHA384</userinput>. The list of available algorithms depends on the version of OpenSSL used to compile &abbrev;. To specify multiple ciphers, separate the cipher names with a colon, and enclose the list between double-quotes, for example:</para>
            <synopsis>cipher-suite("ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384")</synopsis>
            <para condition="pe">The <parameter>cipher-suite()</parameter> option also determines the encryption protocol used in the connection: to disable SSLv3, use an algorithm that is available only in TLSv1.2, and that both the client and the server supports.</para>
            <itemizedlist condition="pe">
                <listitem>
                    <para><emphasis role="bold">Supports TLS v1.2</emphasis>: <userinput>ECDHE-RSA-AES256-GCM-SHA384</userinput>, <userinput>ECDHE-ECDSA-AES256-GCM-SHA384</userinput>, <userinput>ECDHE-RSA-AES256-SHA384</userinput>, <userinput>ECDHE-ECDSA-AES256-SHA384</userinput>, <userinput>DH-DSS-AES256-GCM-SHA384</userinput>, <userinput>DHE-DSS-AES256-GCM-SHA384</userinput>, <userinput>DH-RSA-AES256-GCM-SHA384</userinput>, <userinput>DHE-RSA-AES256-GCM-SHA384</userinput>, <userinput>DHE-RSA-AES256-SHA256</userinput>, <userinput>DHE-DSS-AES256-SHA256</userinput>, <userinput>DH-RSA-AES256-SHA256</userinput>, <userinput>DH-DSS-AES256-SHA256</userinput>, <userinput>ADH-AES256-GCM-SHA384</userinput>, <userinput>ADH-AES256-SHA256</userinput>, <userinput>ECDH-RSA-AES256-GCM-SHA384</userinput>, <userinput>ECDH-ECDSA-AES256-GCM-SHA384</userinput>, <userinput>ECDH-RSA-AES256-SHA384</userinput>, <userinput>ECDH-ECDSA-AES256-SHA384</userinput>, <userinput>AES256-GCM-SHA384</userinput>, <userinput>AES256-SHA256</userinput>, <userinput>ECDHE-RSA-AES128-GCM-SHA256</userinput>, <userinput>ECDHE-ECDSA-AES128-GCM-SHA256</userinput>, <userinput>ECDHE-RSA-AES128-SHA256</userinput>, <userinput>ECDHE-ECDSA-AES128-SHA256</userinput>, <userinput>DH-DSS-AES128-GCM-SHA256</userinput>, <userinput>DHE-DSS-AES128-GCM-SHA256</userinput>, <userinput>DH-RSA-AES128-GCM-SHA256</userinput>, <userinput>DHE-RSA-AES128-GCM-SHA256</userinput>, <userinput>DHE-RSA-AES128-SHA256</userinput>, <userinput>DHE-DSS-AES128-SHA256</userinput>, <userinput>DH-RSA-AES128-SHA256</userinput>, <userinput>DH-DSS-AES128-SHA256</userinput>, <userinput>ADH-AES128-GCM-SHA256</userinput>, <userinput>ADH-AES128-SHA256</userinput>, <userinput>ECDH-RSA-AES128-GCM-SHA256</userinput>, <userinput>ECDH-ECDSA-AES128-GCM-SHA256</userinput>, <userinput>ECDH-RSA-AES128-SHA256</userinput>, <userinput>ECDH-ECDSA-AES128-SHA256</userinput>, <userinput>AES128-GCM-SHA256</userinput>, <userinput>AES128-SHA256</userinput>, <userinput>NULL-SHA256</userinput></para>
                </listitem>
                <listitem>
                    <para><emphasis role="bold">Supports SSL v3</emphasis>: <userinput>ECDHE-RSA-AES256-SHA</userinput>, <userinput>ECDHE-ECDSA-AES256-SHA</userinput>, <userinput>SRP-DSS-AES-256-CBC-SHA</userinput>, <userinput>SRP-RSA-AES-256-CBC-SHA</userinput>, <userinput>SRP-AES-256-CBC-SHA</userinput>, <userinput>DHE-RSA-AES256-SHA</userinput>, <userinput>DHE-DSS-AES256-SHA</userinput>, <userinput>DH-RSA-AES256-SHA</userinput>, <userinput>DH-DSS-AES256-SHA</userinput>, <userinput>DHE-RSA-CAMELLIA256-SHA</userinput>, <userinput>DHE-DSS-CAMELLIA256-SHA</userinput>, <userinput>DH-RSA-CAMELLIA256-SHA</userinput>, <userinput>DH-DSS-CAMELLIA256-SHA</userinput>, <userinput>AECDH-AES256-SHA</userinput>, <userinput>ADH-AES256-SHA</userinput>, <userinput>ADH-CAMELLIA256-SHA</userinput>, <userinput>ECDH-RSA-AES256-SHA</userinput>, <userinput>ECDH-ECDSA-AES256-SHA</userinput>, <userinput>AES256-SHA</userinput>, <userinput>CAMELLIA256-SHA</userinput>, <userinput>PSK-AES256-CBC-SHA</userinput>, <userinput>ECDHE-RSA-AES128-SHA</userinput>, <userinput>ECDHE-ECDSA-AES128-SHA</userinput>, <userinput>SRP-DSS-AES-128-CBC-SHA</userinput>, <userinput>SRP-RSA-AES-128-CBC-SHA</userinput>, <userinput>SRP-AES-128-CBC-SHA</userinput>, <userinput>DHE-RSA-AES128-SHA</userinput>, <userinput>DHE-DSS-AES128-SHA</userinput>, <userinput>DH-RSA-AES128-SHA</userinput>, <userinput>DH-DSS-AES128-SHA</userinput>, <userinput>DHE-RSA-SEED-SHA</userinput>, <userinput>DHE-DSS-SEED-SHA</userinput>, <userinput>DH-RSA-SEED-SHA</userinput>, <userinput>DH-DSS-SEED-SHA</userinput>, <userinput>DHE-RSA-CAMELLIA128-SHA</userinput>, <userinput>DHE-DSS-CAMELLIA128-SHA</userinput>, <userinput>DH-RSA-CAMELLIA128-SHA</userinput>, <userinput>DH-DSS-CAMELLIA128-SHA</userinput>, <userinput>AECDH-AES128-SHA</userinput>, <userinput>ADH-AES128-SHA</userinput>, <userinput>ADH-SEED-SHA</userinput>, <userinput>ADH-CAMELLIA128-SHA</userinput>, <userinput>ECDH-RSA-AES128-SHA</userinput>, <userinput>ECDH-ECDSA-AES128-SHA</userinput>, <userinput>AES128-SHA</userinput>, <userinput>SEED-SHA</userinput>, <userinput>CAMELLIA128-SHA</userinput>, <userinput>PSK-AES128-CBC-SHA</userinput>, <userinput>ECDHE-RSA-RC4-SHA</userinput>, <userinput>ECDHE-ECDSA-RC4-SHA</userinput>, <userinput>AECDH-RC4-SHA</userinput>, <userinput>ADH-RC4-MD5</userinput>, <userinput>ECDH-RSA-RC4-SHA</userinput>, <userinput>ECDH-ECDSA-RC4-SHA</userinput>, <userinput>RC4-SHA</userinput>, <userinput>RC4-MD5</userinput>, <userinput>PSK-RC4-SHA</userinput>, <userinput>ECDHE-RSA-DES-CBC3-SHA</userinput>, <userinput>ECDHE-ECDSA-DES-CBC3-SHA</userinput>, <userinput>SRP-DSS-3DES-EDE-CBC-SHA</userinput>, <userinput>SRP-RSA-3DES-EDE-CBC-SHA</userinput>, <userinput>SRP-3DES-EDE-CBC-SHA</userinput>, <userinput>EDH-RSA-DES-CBC3-SHA</userinput>, <userinput>EDH-DSS-DES-CBC3-SHA</userinput>, <userinput>DH-RSA-DES-CBC3-SHA</userinput>, <userinput>DH-DSS-DES-CBC3-SHA</userinput>, <userinput>AECDH-DES-CBC3-SHA</userinput>, <userinput>ADH-DES-CBC3-SHA</userinput>, <userinput>ECDH-RSA-DES-CBC3-SHA</userinput>, <userinput>ECDH-ECDSA-DES-CBC3-SHA</userinput>, <userinput>DES-CBC3-SHA</userinput>, <userinput>PSK-3DES-EDE-CBC-SHA</userinput>, <userinput>ECDHE-RSA-NULL-SHA</userinput>, <userinput>ECDHE-ECDSA-NULL-SHA</userinput>, <userinput>AECDH-NULL-SHA</userinput>, <userinput>ECDH-RSA-NULL-SHA</userinput>, <userinput>ECDH-ECDSA-NULL-SHA</userinput>, <userinput>NULL-SHA</userinput>, <userinput>NULL-MD5</userinput></para>
                </listitem>
            </itemizedlist>
        </simplesect>
        <simplesect>
            <title>crl-dir()</title>
            <indexterm>
                <primary>crl-dir()</primary>
            </indexterm>
            <indexterm>
                <primary>crl_dir()</primary>
            </indexterm>
            <informaltable frame="topbot" colsep="0" rowsep="0">
                <tgroup cols="2">
                    <colspec colnum="1" colwidth="80pt"/>
                    <tbody>
                        <row>
                            <entry>Accepted values: <?dbhtml bgcolor="#D4D6EB" ?>
<?dbfo bgcolor="#D4D6EB" ?>
                            </entry>
                            <entry>Directory name</entry>
                        </row>
                        <row>
                            <entry>Default: <?dbhtml bgcolor="#D4D6EB" ?>
<?dbfo bgcolor="#D4D6EB" ?>
                            </entry>
                            <entry>none</entry>
                        </row>
                    </tbody>
                </tgroup>
            </informaltable>
            <para><emphasis role="bold">Description:</emphasis> Name of a directory that contains the Certificate Revocation Lists for trusted CAs. Similarly to <parameter>ca-dir()</parameter> files, use the 32-bit hash of the name of the issuing CAs as filenames. The extension of the files must be <userinput>.r0</userinput>.</para>
        </simplesect>
        <simplesect>
            <title>curve-list()</title>
            <indexterm>
                <primary>curve-list()</primary>
            </indexterm>
            <indexterm>
                <primary>curve_list()</primary>
            </indexterm>
            <informaltable frame="topbot" colsep="0" rowsep="0">
                <tgroup cols="2">
                    <colspec colnum="1" colwidth="80pt"/>
                    <tbody>
                        <row>
                            <entry>Accepted values: <?dbhtml bgcolor="#D4D6EB" ?>
<?dbfo bgcolor="#D4D6EB" ?>
                            </entry>
                            <entry>string (colon-separated list)</entry>
                        </row>
                        <row>
                            <entry>Default: <?dbhtml bgcolor="#D4D6EB" ?>
<?dbfo bgcolor="#D4D6EB" ?>
                            </entry>
                            <entry>none</entry>
                        </row>
                    </tbody>
                </tgroup>
            </informaltable>
            <para><emphasis role="bold">Description:</emphasis> A colon-separated list that specifies the curves that are permitted in the connection when using Elliptic Curve Cryptography (ECC). The &abbrev; application uses automatically the highest preference curve that both peers support. If not specified, the list includes every supported curve. For example:</para>
            <synopsis>curve-list('prime256v1:secp521r1')</synopsis>
            <para condition="ose">The list of available curves depends on the version of OpenSSL used to compile &abbrev;. For a list of supported curves, execute the following command on the host you build &abbrev;: <command>openssl ecparam -list_curves</command></para>
            <para condition="pe">The &product; application currently supports the following curves: <userinput>sect163k1</userinput>, <userinput>sect163r1</userinput>, <userinput>sect163r2</userinput>, <userinput>sect193r1</userinput>, <userinput>sect193r2,</userinput>, <userinput>sect233k1</userinput>, <userinput>sect233r1</userinput>, <userinput>sect239k1</userinput>, <userinput>sect283k1</userinput>, <userinput>sect283r1,</userinput>, <userinput>sect409k1</userinput>, <userinput>sect409r1</userinput>, <userinput>sect571k1</userinput>, <userinput>sect571r1</userinput>, <userinput>secp160k1,</userinput>, <userinput>secp160r1</userinput>, <userinput>secp160r2</userinput>, <userinput>secp192k1</userinput>, <userinput>prime192v1</userinput>, <userinput>secp224k1,</userinput>, <userinput>secp224r1</userinput>, <userinput>secp256k1</userinput>, <userinput>prime256v1</userinput>, <userinput>secp384r1</userinput>, <userinput>secp521r1,</userinput>, <userinput>brainpoolP256r1</userinput>, <userinput>brainpoolP384r1</userinput>, <userinput>brainpoolP512r1</userinput>.</para>
        </simplesect>
        <simplesect>
            <title>dhparam-file()</title>
            <indexterm>
                <primary>dhparam-file()</primary>
            </indexterm>
            <indexterm>
                <primary>dhparam_file()</primary>
            </indexterm>
            <indexterm>
                <primary>Diffie-Hellman parameter file</primary>
            </indexterm>
            <indexterm>
                <primary>DH parameter file</primary>
            </indexterm>
            <indexterm>
                <primary>dhparam</primary>
            </indexterm>
            <informaltable frame="topbot" colsep="0" rowsep="0">
                <tgroup cols="2">
                    <colspec colnum="1" colwidth="80pt"/>
                    <tbody>
                        <row>
                            <entry>Accepted values: <?dbhtml bgcolor="#D4D6EB" ?>
<?dbfo bgcolor="#D4D6EB" ?>
                            </entry>
                            <entry>string (filename)</entry>
                        </row>
                        <row>
                            <entry>Default: <?dbhtml bgcolor="#D4D6EB" ?>
<?dbfo bgcolor="#D4D6EB" ?>
                            </entry>
                            <entry>none</entry>
                        </row>
                    </tbody>
                </tgroup>
            </informaltable>
            <para><emphasis role="bold">Description:</emphasis> Specifies a file containing Diffie-Hellman parameters, generated using the <command>openssl dhparam</command> utility. Note that &abbrev; supports only DH parameter files in the PEM format. If you do not set this parameter, <link xmlns:ns1="http://www.w3.org/1999/xlink" ns1:href="https://www.ietf.org/rfc/rfc3526.txt">&abbrev; uses the 4096-bit MODP Group, as described in RFC 3526</link>.</para>
        </simplesect>
        <simplesect>
            <title>key-file()</title>
            <indexterm>
                <primary>key-file()</primary>
            </indexterm>
            <indexterm>
                <primary>key_file()</primary>
            </indexterm>
            <informaltable frame="topbot" colsep="0" rowsep="0">
                <tgroup cols="2">
                    <colspec colnum="1" colwidth="80pt"/>
                    <tbody>
                        <row>
                            <entry>Accepted values: <?dbhtml bgcolor="#D4D6EB" ?>
<?dbfo bgcolor="#D4D6EB" ?>
                            </entry>
                            <entry>Filename</entry>
                        </row>
                        <row>
                            <entry>Default: <?dbhtml bgcolor="#D4D6EB" ?>
<?dbfo bgcolor="#D4D6EB" ?>
                            </entry>
                            <entry>none</entry>
                        </row>
                    </tbody>
                </tgroup>
            </informaltable>
            <para><emphasis role="bold">Description:</emphasis> Name of a file, that contains an unencrypted private key in PEM format, suitable as a TLS key.</para>
        </simplesect>
        <simplesect>
            <title>peer-verify()</title>
            <indexterm>
                <primary>peer-verify()</primary>
            </indexterm>
            <indexterm>
                <primary>peer_verify()</primary>
            </indexterm>
            <informaltable frame="topbot" colsep="0" rowsep="0">
                <tgroup cols="2">
                    <colspec colnum="1" colwidth="80pt"/>
                    <tbody>
                        <row>
                            <entry>Accepted values: <?dbhtml bgcolor="#D4D6EB" ?>
<?dbfo bgcolor="#D4D6EB" ?>
                            </entry>
                            <entry><userinput>optional-trusted</userinput> | <userinput>optional-untrusted</userinput> | <userinput>required-trusted</userinput> | <userinput>required-untrusted</userinput>
                            </entry>
                        </row>
                        <row>
                            <entry>Default: <?dbhtml bgcolor="#D4D6EB" ?>
<?dbfo bgcolor="#D4D6EB" ?>
                            </entry>
                            <entry><userinput>required-trusted</userinput>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </informaltable>
            <para><emphasis role="bold">Description:</emphasis> Verification method of the peer, the four possible values is a combination of two properties of validation:</para>
            <itemizedlist>
                <listitem>
                    <para>whether the peer is required to provide a certificate (required or optional prefix), and</para>
                </listitem>
                <listitem>
                    <para>whether the certificate provided needs to be valid or not.</para>
                </listitem>
            </itemizedlist>
            <para>The following table summarizes the possible options and their results depending on the certificate of the peer.</para>
            <informaltable>
                <tgroup cols="5">
                    <colspec colnum="1" colname="col1"/>
                    <colspec colnum="2" colname="col2"/>
                    <colspec colnum="3" colname="col3"/>
                    <colspec colnum="4" colname="col4"/>
                    <colspec colnum="5" colname="col5"/>
                    <thead>
                        <row>
                            <entry namest="col1" nameend="col2" morerows="1"/>
                            <entry namest="col3" nameend="col5" align="center">The remote peer has:</entry>
                        </row>
                        <row>
                            <entry align="center"> no certificate </entry>
                            <entry align="center"> invalid certificate </entry>
                            <entry align="center"> valid certificate </entry>
                        </row>
                    </thead>
                    <tbody>
                        <row>
                            <entry morerows="3" rotate="1" valign="middle">
<?dbhtml bgcolor="#D4D6EB" ?>
<?dbfo bgcolor="#D4D6EB" ?><emphasis role="bold">Local peer-verify() setting</emphasis>
                            </entry>
                            <entry align="center">
<?dbhtml bgcolor="#D4D6EB" ?>
<?dbfo bgcolor="#D4D6EB" ?><emphasis role="bold">optional-untrusted</emphasis>
                            </entry>
                            <entry> TLS-encryption </entry>
                            <entry> TLS-encryption </entry>
                            <entry> TLS-encryption </entry>
                        </row>
                        <row>
                            <entry align="center">
<?dbhtml bgcolor="#D4D6EB" ?>
<?dbfo bgcolor="#D4D6EB" ?><emphasis role="bold">optional-trusted</emphasis>
                            </entry>
                            <entry> TLS-encryption </entry>
                            <entry> rejected connection </entry>
                            <entry> TLS-encryption </entry>
                        </row>
                        <row>
                            <entry align="center">
<?dbhtml bgcolor="#D4D6EB" ?>
<?dbfo bgcolor="#D4D6EB" ?><emphasis role="bold">required-untrusted</emphasis>
                            </entry>
                            <entry> rejected connection </entry>
                            <entry> TLS-encryption </entry>
                            <entry> TLS-encryption </entry>
                        </row>
                        <row>
                            <entry align="center">
<?dbhtml bgcolor="#D4D6EB" ?>
<?dbfo bgcolor="#D4D6EB" ?><emphasis role="bold">required-trusted</emphasis>
                            </entry>
                            <entry> rejected connection </entry>
                            <entry> rejected connection </entry>
                            <entry> TLS-encryption </entry>
                        </row>
                    </tbody>
                </tgroup>
            </informaltable>
            <para>For untrusted certificates only the existence of the certificate is checked, but it does not have to be valid &mdash; syslog-ng accepts the certificate even if it is expired, signed by an unknown CA, or its CN and the name of the machine mismatches.</para>
            <warning>
                <para>When validating a certificate, the entire certificate chain must be valid, including the CA certificate. If any certificate of the chain is invalid, &abbrev; will reject the connection.</para>
            </warning>
        </simplesect>
        <simplesect>
            <title>trusted-dn()</title>
            <indexterm>
                <primary>trusted-dn()</primary>
            </indexterm>
            <indexterm>
                <primary>trusted_dn()</primary>
            </indexterm>
            <informaltable frame="topbot" colsep="0" rowsep="0">
                <tgroup cols="2">
                    <colspec colnum="1" colwidth="80pt"/>
                    <tbody>
                        <row>
                            <entry>Accepted values: <?dbhtml bgcolor="#D4D6EB" ?>
<?dbfo bgcolor="#D4D6EB" ?>
                            </entry>
                            <entry>list of accepted distinguished names</entry>
                        </row>
                        <row>
                            <entry>Default: <?dbhtml bgcolor="#D4D6EB" ?>
<?dbfo bgcolor="#D4D6EB" ?>
                            </entry>
                            <entry>none</entry>
                        </row>
                    </tbody>
                </tgroup>
            </informaltable>
            <para><emphasis role="bold">Description:</emphasis> To accept connections only from hosts using certain certificates signed by the trusted CAs, list the distinguished names of the accepted certificates in this parameter. For example using <userinput>trusted-dn("*, O=Example Inc, ST=Some-State, C=*")</userinput> will accept only certificates issued for the <userinput>Example Inc</userinput> organization in <userinput>Some-State</userinput> state.</para>
        </simplesect>
        <simplesect>
            <title>trusted-keys()</title>
            <indexterm>
                <primary>trusted-keys()</primary>
            </indexterm>
            <indexterm>
                <primary>trusted_keys()</primary>
            </indexterm>
            <informaltable frame="topbot" colsep="0" rowsep="0">
                <tgroup cols="2">
                    <colspec colnum="1" colwidth="80pt"/>
                    <tbody>
                        <row>
                            <entry>Accepted values: <?dbhtml bgcolor="#D4D6EB" ?>
<?dbfo bgcolor="#D4D6EB" ?>
                            </entry>
                            <entry>list of accepted SHA-1 fingerprints</entry>
                        </row>
                        <row>
                            <entry>Default: <?dbhtml bgcolor="#D4D6EB" ?>
<?dbfo bgcolor="#D4D6EB" ?>
                            </entry>
                            <entry>none</entry>
                        </row>
                    </tbody>
                </tgroup>
            </informaltable>
            <para><emphasis role="bold">Description:</emphasis> To accept connections only from hosts using certain certificates having specific SHA-1 fingerprints, list the fingerprints of the accepted certificates in this parameter. For example <userinput>trusted-keys("SHA1:00:EF:ED:A4:CE:00:D1:14:A4:AB:43:00:EF:00:91:85:FF:89:28:8F", "SHA1:0C:42:00:3E:B2:60:36:64:00:E2:83:F0:80:46:AD:00:A8:9D:00:15")</userinput>.</para>
            <para>To find the fingerprint of a certificate, you can use the following command: <command>openssl x509 -in &lt;certificate-filename&gt; -sha1 -noout -fingerprint</command></para><note><para>When using the <userinput>trusted-keys()</userinput> and <userinput>trusted-dn()</userinput> parameters at the same time, note the following:</para><itemizedlist><listitem><para>If the fingerprint of the peer is listed in the <userinput>trusted-keys()</userinput> parameter and the DN of the peer is listed in the <userinput>trusted-dn()</userinput> parameter, then the certificate validation is performed.</para></listitem><listitem><para>If either the fingerprint of the peer is not listed in the <userinput>trusted-keys()</userinput> parameter or the DN of the peer is not listed in the <userinput>trusted-dn()</userinput> parameter, then the authentication of the peer fails and the connection is closed.</para></listitem></itemizedlist></note>
        </simplesect>
    </section>
</chapter>
