<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter
 [  <!ENTITY % entities SYSTEM "../../common/syslog-ng-entities.ent">
 %entities;]>
<chapter xml:id="chapter-patterndb" xmlns="http://docbook.org/ns/docbook" version="5.0">
    <title>Processing message content with a pattern database</title>
<!-- FIXME find a better title -->
<!-- FIXME describe the various ways patterndb can be used: message classification and tagging, content extraction, message correlation, ... -->
    <section xml:id="concepts-pattern-databases">
        <title>Classifying log messages</title>
        <indexterm>
            <primary>classifying messages</primary>
            <secondary>concepts of</secondary>
        </indexterm>
        <indexterm>
            <primary>pattern database</primary>
            <secondary>concepts of</secondary>
        </indexterm>
        <para>The syslog-ng application can compare the contents of the received log messages to predefined message patterns. By comparing the messages to the known patterns, syslog-ng is able to identify the exact type of the messages, and sort them into message classes. The message classes can be used to classify the type of the event described in the log message. The message classes can be customized, and for example can label the messages as user login, application crash, file transfer, and so on events.</para>
        <para>To find the pattern that matches a particular message, syslog-ng uses a method called longest prefix match radix tree. This means that syslog-ng creates a tree structure of the available patterns, where the different characters available in the patterns for a given position are the branches of the tree.</para>
<!-- FIXME missing figure -->
        <para>To classify a message, syslog-ng selects the first character of the message (the text of message, not the header), and selects the patterns starting with this character, other patterns are ignored for the rest of the process. After that, the second character of the message is compared to the second character of the selected patterns. Again, matching patterns are selected, and the others discarded. This process is repeated until a single pattern completely matches the message, or no match is found. In the latter case, the message is classified as unknown, otherwise the class of the matching pattern is assigned to the message.</para>
        <para>To make the message classification more flexible and robust, the patterns can contain pattern parsers: elements that match on a set of characters. For example, the NUMBER parser matches on any integer or hexadecimal number (for example 1, 123, 894054, 0xFFFF, and so on). Other pattern parsers match on various strings and IP addresses. For the details of available pattern parsers, see <xref linkend="syslog-ng-patterndb-using-parsers"/>.</para>
        <para>The functionality of the pattern database is similar to that of the logcheck project, but it is much easier to write and maintain the patterns used by syslog-ng, than the regular expressions used by logcheck. Also, it is much easier to understand syslog-ng pattens than regular expressions.</para>
        <para>Pattern matching based on regular expressions is computationally very intensive, especially when the number of patterns increases. The solution used by syslog-ng can be performed real-time, and is independent from the number of patterns, so it scales much better. The following patterns describe the same message: <userinput>Accepted password for bazsi from 10.50.0.247 port 42156 ssh2</userinput></para>
        <para>A regular expression matching this message from the logcheck project: <userinput>Accepted (gssapi(-with-mic|-keyex)?|rsa|dsa|password|publickey|keyboard-interactive/pam) for [^[:space:]]+ from [^[:space:]]+ port [0-9]+( (ssh|ssh2))?</userinput></para>
        <para>A syslog-ng database pattern for this message: <userinput>Accepted @QSTRING:auth_method: @ for@QSTRING:username: @from @QSTRING:client_addr: @port @NUMBER:port:@ ssh2</userinput></para>
        <para>For details on using pattern databases to classify log messages, see <xref linkend="configuring-pattern-databases"/>.</para>
        <xi:include href="../../common/syslog-ng-patterndb-structure.xml" xmlns:xi="http://www.w3.org/2001/XInclude"/>
        <xi:include href="../../common/syslog-ng-patterndb-operation.xml" xmlns:xi="http://www.w3.org/2001/XInclude"/>
        <section xml:id="concepts-artificial-ignorance">
            <title>Artificial ignorance</title>
            <para>Artificial ignorance is a method to detect anomalies. When applied to log analysis, it means that you ignore the regular, common log messages - these are the result of the regular behavior of your system, and therefore are not too interesting. However, new messages that have not appeared in the logs before can sign important events, and should be therefore investigated. "By definition, something we have never seen before is anomalous" (Marcus J. Ranum).Â </para>
            <para>The syslog-ng application can classify messages using a pattern database: messages that do not match any pattern are classified as unknown. This provides a way to use artificial ignorance to review your log messages. You can periodically review the unknown messages &mdash; syslog-ng can send them to a separate destination, and add patterns for them to the pattern database. By reviewing and manually classifying the unknown messages, you can iteratively classify more and more messages, until only the really anomalous messages show up as unknown.</para>
            <para>Obviously, for this to work, a large number of message patterns are required. The radix-tree matching method used for message classification is very effective, can be performed very fast, and scales very well. Basically the time required to perform a pattern matching is independent from the number of patterns in the database. For sample pattern databases, see <xref linkend="patterndb-download"/>.</para>
        </section>
    </section>
    <section xml:id="configuring-pattern-databases">
        <title>Using pattern databases</title>
        <indexterm>
            <primary>parsers</primary>
        </indexterm>
        <indexterm>
            <primary>message parsing</primary>
        </indexterm>
        <indexterm>
            <primary>parsing messages</primary>
        </indexterm>
        <indexterm>
            <primary>pattern database</primary>
        </indexterm>
        <indexterm>
            <primary>classifying messages</primary>
            <secondary>configuration</secondary>
        </indexterm>
        <indexterm>
            <primary>message classification</primary>
        </indexterm>
        <para>To classify messages using a pattern database, include a <parameter>db-parser()</parameter> statement in your syslog-ng configuration file using the following syntax:</para>
        <formalpara>
            <title>Declaration:</title>
            <para/>
        </formalpara>
        <synopsis>parser &lt;identifier&gt; {db-parser(file("&lt;database_filename&gt;"));};</synopsis>
        <para>Note that using the parser in a log statement only performs the classification, but does not automatically do anything with the results of the classification.</para>
        <example>
            <title>Defining pattern databases</title>
            <para>The following statement uses the database located at <filename>/opt/syslog-ng/var/db/patterndb.xml</filename>.</para>
            <synopsis>parser pattern_db {
            db-parser(
                file("/opt/syslog-ng/var/db/patterndb.xml")
            );
            };</synopsis>
            <para>To apply the patterns on the incoming messages, include the parser in a log statement:</para>
            <synopsis>log {
        source(s_all);
        parser(pattern_db);
        destination( di_messages_class);
        };</synopsis>
        </example>
        <note>
            <para>The default location of the pattern database file is <filename>/opt/syslog-ng/var/run/patterndb.xml</filename>. The <parameter>file</parameter> option of the <parameter>db-parser()</parameter> statement can be used to specify a different file, thus different db-parser statements can use different pattern databases. Later versions of syslog-ng will be able to dynamically generate a main database from separate pattern database files.</para>
        </note>
        <example>
            <title>Using classification results</title>
            <para>The following destination separates the log messages into different files based on the class assigned to the pattern that matches the message (for example Violation and Security type messages are stored in a separate file), and also adds the ID of the matching rule to the message:</para>
            <synopsis>destination di_messages_class {
        file("/var/log/messages-${.classifier.class}"
        template("${.classifier.rule_id};${S_UNIXTIME};${SOURCEIP};${HOST};${PROGRAM};${PID};${MSG}\n")
        template-escape(no)
    );
};</synopsis>
        </example>
        <para>For details on how to create your own pattern databases see <xref linkend="reference-patterndb-schemes"/>.</para>
        <section xml:id="patterndb-filters">
            <title>Using parser results in filters and templates</title>
            <indexterm>
                <primary>pattern database</primary>
                <secondary>using the results</secondary>
            </indexterm>
            <indexterm>
                <primary>message filtering</primary>
                <secondary>using parsers</secondary>
            </indexterm>
            <indexterm>
                <primary>parsing messages</primary>
                <secondary>filtering parsed messages</secondary>
            </indexterm>
            <indexterm>
                <primary>parsers</primary>
            </indexterm>
            <indexterm>
                <primary>message parsing</primary>
            </indexterm>
            <indexterm>
                <primary>parsing messages</primary>
            </indexterm>
            <indexterm>
                <primary>pattern database</primary>
            </indexterm>
            <indexterm>
                <primary>classifying messages</primary>
                <secondary>filtering</secondary>
            </indexterm>
            <indexterm>
                <primary>message classification</primary>
            </indexterm>
            <para>The results of message classification and parsing can be used in custom filters and templates, for example, in file and database templates. The following built-in macros allow you to use the results of the classification:</para>
            <itemizedlist>
                <listitem>
                    <para>The <parameter>.classifier.class</parameter> macro contains the class assigned to the message (for example violation, security, or unknown).</para>
                </listitem>
                <listitem>
                    <para>The <parameter>.classifier.rule_id</parameter> macro contains the identifier of the message pattern that matched the message.</para>
                </listitem>
                <listitem>
                    <para>The <parameter>.classifier.context_id</parameter> macro contains the identifier of the context for messages that were correlated. For details on correlating messages, see <xref linkend="patterndb-correlation"/>.</para>
                </listitem>
            </itemizedlist>
            <indexterm>
                <primary>filtering</primary>
                <secondary>on message class</secondary>
            </indexterm>
            <indexterm>
                <primary>filtering</primary>
                <secondary>.classifier_class</secondary>
            </indexterm>
            <example>
                <title>Using classification results for filtering messages</title>
                <para>To filter on a specific message class, create a filter that checks the <parameter>.classifier_class</parameter> macro, and use this filter in a log statement.</para>
                <synopsis>filter fi_class_violation {
                    match("violation"
                    value(".classifier.class")
                    type("string")
                    );
                    };</synopsis>
                <synopsis>log {
                    source(s_all);
                    parser(pattern_db);
                    filter(fi_class_violation);
                    destination(di_class_violation);
                    };</synopsis>
                <para>Filtering on the <parameter>unknown</parameter> class selects messages that did not match any rule of the pattern database. Routing these messages into a separate file allows you to periodically review new or unknown messages.</para>
                <para>To filter on messages matching a specific classification rule, create a filter that checks the <parameter>.classifier.rule_id</parameter> macro. The unique identifier of the rule (for example <userinput>e1e9c0d8-13bb-11de-8293-000c2922ed0a</userinput>) is the <userinput>id</userinput> attribute of the rule in the XML database.</para>
                <synopsis>filter fi_class_rule {
                    match("e1e9c0d8-13bb-11de-8293-000c2922ed0a"
                    value(".classifier.rule_id")
                    type("string")
                    );
                    };</synopsis>
            </example>
            <para>Pattern database rules can assign tags to messages. These tags can be used to select tagged messages using the <parameter>tags()</parameter> filter function.</para>
            <indexterm type="parameter">
                <primary>tags()</primary>
            </indexterm>
            <xi:include href="../../common/wnt/note-patterndb-class-tag.xml" xmlns:xi="http://www.w3.org/2001/XInclude"/>
            <para>The message-segments parsed by the pattern parsers can also be used as macros as well. To accomplish this, you have to add a name to the parser, and then you can use this name as a macro that refers to the parsed value of the message.</para>
            <example>
                <title>Using pattern parsers as macros</title>
                <para>For example, you want to parse messages of an application that look like <userinput>"Transaction: &lt;type&gt;."</userinput>, where &lt;type&gt; is a string that has different values (for example refused, accepted, incomplete, and so on). To parse these messages, you can use the following pattern:</para>
                <synopsis>'Transaction: @ESTRING::.@'</synopsis>
                <para>Here the @ESTRING@ parser parses the message until the next full stop character. To use the results in a filter or a filename template, include a name in the parser of the pattern, for example:</para>
                <synopsis>'Transaction: @ESTRING:TRANSACTIONTYPE:.@'</synopsis>
                <para>After that, add a custom template to the log path that uses this template. For example, to select every <userinput>accepted</userinput> transaction, use the following custom filter in the log path:</para>
                <synopsis>match("accepted" value("TRANSACTIONTYPE"));</synopsis>
            </example>
            <note>
                <para>The above macros can be used in database columns and filename templates as well, if you create custom templates for the destination or logspace.</para>
                <para>Use a consistent naming scheme for your macros, for example, <userinput>APPLICATIONNAME_MACRONAME</userinput>.</para>
            </note>
        </section>
        <section xml:id="patterndb-download">
            <title>Downloading sample pattern databases</title>
            <indexterm>
                <primary>patterndb</primary>
                <secondary>download</secondary>
            </indexterm>
            <indexterm>
                <primary>download</primary>
                <secondary>pattern databases</secondary>
            </indexterm>
            <para>To simplify the building of pattern databases, BalaBit has released (and will continue to release) sample databases. You can download sample pattern databases from the <link xmlns:ns1="http://www.w3.org/1999/xlink" ns1:href="https://github.com/balabit/syslog-ng-patterndb/">BalaBit GitHub page</link> (older samples are temporarily available <link xmlns:ns1="http://www.w3.org/1999/xlink" ns1:href="https://my.balabit.com/downloads/patterndb-snapshot/">here</link>.</para>
            <para>Note that these pattern databases are only samples and experimental databases. They are not officially supported, and may or may not work in your environment.</para>
            <para>The syslog-ng pattern databases are available under the Creative Commons Attribution-Share Alike 3.0 (CC by-SA) license. This includes every pattern database written by community contributors or the Balabit staff. It means that:</para>
            <itemizedlist>
                <listitem>
                    <para>You are free to use and modify the patterns for your needs.</para>
                </listitem>
                <listitem>
                    <para>If you redistribute the pattern databases, you must distribute your modifications under the same license.</para>
                </listitem>
                <listitem>
                    <para>If you redistribute the pattern databases, you must make it obvious that the source of the original syslog-ng pattern databases is the <link xmlns:ns1="http://www.w3.org/1999/xlink" ns1:href="https://github.com/balabit/syslog-ng-patterndb/">Balabit GitHub page</link>.</para>
                </listitem>
            </itemizedlist>
            <para>For legal details, the full text of the license is <link xmlns:ns1="http://www.w3.org/1999/xlink" ns1:href="https://creativecommons.org/licenses/by-sa/3.0/us/legalcode">available here</link>.</para>
            <para>If you create patterns that are not available in the GitHub repository, consider sharing them with us and the syslog-ng community, and send them to the <link xmlns:ns1="http://www.w3.org/1999/xlink" ns1:href="https://lists.balabit.hu/mailman/listinfo/syslog-ng/">syslog-ng mailing list</link>, or to the following e-mail address:<email>patterndb@balabit.com</email></para>
        </section>
    </section>
    <section xml:id="patterndb-correlation">
        <title>Correlating log messages using pattern databases</title>
        <indexterm>
            <primary>message correlation</primary>
        </indexterm>
        <indexterm>
            <primary>correlating messages</primary>
        </indexterm>
        <indexterm>
            <primary>pattern databases</primary>
            <secondary>correlating messages</secondary>
        </indexterm>
        <indexterm>
            <primary>message context</primary>
        </indexterm>
        <indexterm>
            <primary>context of messages</primary>
        </indexterm>
        <para>The &abbrev; application can correlate log messages identified using <link linkend="chapter-patterndb">pattern databases</link>. Alternatively, you can also correlate log messages using the <parameter>grouping-by()</parameter> parser. For details, see <xref linkend="grouping-by-parser"/>.</para>

        <xi:include href="../../common/chunk/correlation-intro.xml" xmlns:xi="http://www.w3.org/2001/XInclude"/>

        <para>(For details on triggering actions and generating messages, see <xref linkend="patterndb-triggers-actions"/>.)</para>
        <para>There are two attributes for pattern database rules that determine if a message matching the rule is added to a context: <parameter>context-scope</parameter> and <parameter>context-id</parameter>. The <parameter>context-scope</parameter> attribute acts as an early filter, selecting messages sent by the same process (${HOST}${PROGRAM}${PID} is identical), application (${HOST}${PROGRAM} is identical), or host, while the <parameter>context-id</parameter> actually adds the message to the context specified in the id. The <parameter>context-id</parameter> can be a simple string, or can contain macros or values extracted from the log messages for further filtering. Starting with &abbrev; version <phrase condition="ose">3.5</phrase>, if a message is added to a context, &abbrev; automatically adds the identifier of the context to the <parameter>.classifier.context_id</parameter> macro of the message.</para>

        <xi:include href="../../common/wnt/note-message-context.xml" xmlns:xi="http://www.w3.org/2001/XInclude"/>

        <para>Another parameter of a rule is the <parameter>context-timeout</parameter> attribute, which determines how long a context is stored, that is, how long &abbrev; waits for related messages to arrive.</para>

        <xi:include href="../../common/chunk/correlation-context-timeout.xml" xmlns:xi="http://www.w3.org/2001/XInclude"/>

        <example>
            <title>Using message correlation</title>
            <synopsis>&lt;rule xml:id="..." context-id="ssh-session" context-timeout="86400" context-scope="process"&gt;
    &lt;patterns&gt;
        &lt;pattern&gt;Accepted @ESTRING:usracct.authmethod: @for @ESTRING:usracct.username: @from @ESTRING:usracct.device: @port @ESTRING:: @@ANYSTRING:usracct.service@&lt;/pattern&gt;
    &lt;/patterns&gt;
...
&lt;/rule&gt;</synopsis>
        </example>
        <para>For details on configuring message correlation, see the <link linkend="element-patterndb-rule-attributes">context-id, context-timeout, and context-scope</link> attributes of pattern database rules.</para>
        <section xml:id="referencing-previous-messages">
            <title>Referencing earlier messages of the context</title>
            <indexterm type="parameter">
                <primary>@distance</primary>
            </indexterm>
            <para>When using the <userinput>&lt;value&gt;</userinput> element in pattern database rules together with message correlation, you can also refer to fields and values of earlier messages of the context by adding the <userinput>@&lt;distance-of-referenced-message-from-the-current&gt;</userinput> suffix to the macro. For example, if there are three log messages in a context, and you are creating a generated message for the third log message, the <userinput>${HOST}@1</userinput> expression refers to the host field of the current (third) message in the context, the <userinput>${HOST}@2</userinput> expression refers to the host field of the previous (second) message in the context, <userinput>${PID}@3</userinput> to the PID of the first message, and so on. For example, the following message can be created from SSH login/logout messages (for details on generating new messages, see <xref linkend="patterndb-triggers-actions"/>): <userinput>An SSH session for ${SSH_USERNAME}@1 from ${SSH_CLIENT_ADDRESS}@2 closed. Session lasted from ${DATE}@2 to ${DATE}</userinput>.</para>
            <warning>
                <para>When referencing an earlier message of the context, always enclose the field name between braces, for example, <userinput>${PID}@3</userinput>. The reference will not work if you omit the braces.</para>
            </warning>
            <xi:include href="../../common/wnt/note-escape-at.xml" xmlns:xi="http://www.w3.org/2001/XInclude"/>
            <xi:include href="../../common/chunk/example-patterndb-referencing-earlier-values.xml" xmlns:xi="http://www.w3.org/2001/XInclude"/>
            <para>If you do not know in which message of the context contains the information you need, you can use the <parameter>grep</parameter> template function. For details, see <xref linkend="template-function-grep"/>.</para>
            <xi:include href="../../common/chunk/example-grep-template-function.xml" xmlns:xi="http://www.w3.org/2001/XInclude"/>
            <para>To perform calculations on fields that have numerical values, see <xref linkend="template-function-numerical"/>.</para>
        </section>
    </section>
    <section xml:id="patterndb-triggers-actions">
        <title>Triggering actions for identified messages</title>
        <indexterm>
            <primary>alerting</primary>
        </indexterm>
        <indexterm>
            <primary>actions</primary>
        </indexterm>
        <indexterm>
            <primary>secondary messages</primary>
        </indexterm>
        <indexterm>
            <primary>generating alerts</primary>
        </indexterm>
        <indexterm>
            <primary>triggers</primary>
        </indexterm>
        <indexterm>
            <primary>triggered messages</primary>
        </indexterm>
        <indexterm>
            <primary>message triggers</primary>
        </indexterm>
        <para>The &abbrev; application can generate (trigger) messages automatically if certain events occur, for example, a specific log message is received, or the correlation timeout of a message expires. Basically, you can define messages for every pattern database rule that are emitted when a message matching the rule is received. Triggering messages is often used together with message correlation, but can also be used separately. When used together with message correlation, you can also create a new correlation context when a new message is received.</para>
        <indexterm type="parameter">
            <primary>inject-mode</primary>
        </indexterm>
        <para>The generated message is injected into the same place where the <parameter>db-parser()</parameter> statement is referenced in the log path. To post the generated message into the <parameter>internal()</parameter> source instead, use the <parameter>inject-mode()</parameter> option in the definition of the parser.</para>
        <example>
            <title>Sending triggered messages to the <parameter>internal()</parameter> source</title>
            <para>To send the generated messages to the <parameter>internal</parameter> source, use the <userinput>inject-mode(internal)</userinput> option:</para>
            <synopsis>parser p_db {db-parser(
    file("mypatterndbfile.xml")
    inject-mode(internal)
);}; </synopsis>
            <para>To inject the generated messages where the pattern database is referenced, use the <userinput>inject-mode(pass-through)</userinput> option:</para>
            <synopsis>parser p_db {db-parser(
    file("mypatterndbfile.xml")
    inject-mode(pass-through)
);}; </synopsis>
        </example>
        <para>The generated message must be configured in the pattern database rule. It is possible to create an entire message, use macros and values extracted from the original message with pattern database, and so on.</para>

        <xi:include href="../../common/chunk/example-patterndb-actions.xml" xmlns:xi="http://www.w3.org/2001/XInclude"/>

        <example>
            <title>Creating a new context from an action</title>
            <para>In &abbrev; version <phrase condition="ose">3.8</phrase><phrase condition="pe">7</phrase> and newer, you can create a new context as an action. For details, see <xref linkend="element-patterndb-create-context"/>.</para>

            <xi:include href="../../common/chunk/example-create-context-action.xml" xmlns:xi="http://www.w3.org/2001/XInclude"/>

        </example>

        <para>For details on configuring actions, see the description of the <link linkend="patterndb-schema-actions">pattern database format</link>.</para>
        <section xml:id="patterndb-actions-conditional">
            <title>Conditional actions</title>
            <indexterm>
                <primary>actions</primary>
                <secondary>conditional actions</secondary>
            </indexterm>
            <para>To limit when a message is triggered, use the <parameter>condition</parameter> attribute and specify a filter expression: the action will be executed only if the condition is met. For example, the following action is executed only if the message was sent by the host called <userinput>myhost</userinput>.</para>
            <synopsis>&lt;action condition="'${HOST}' == 'example'"&gt;</synopsis>
            <para>You can use the same operators in the condition that can be used in filters. For details, see <xref linkend="filters-comparing"/>.</para>
            <para>The following action can be used to log the length of an SSH session (the time difference between a login and a logout message in the context):</para>
            <synopsis>&lt;actions&gt;
    &lt;action&gt;
        &lt;message&gt;
            &lt;values&gt;
                &lt;value name="MESSAGE"&gt;An SSH session for ${SSH_USERNAME}@1 from ${SSH_CLIENT_ADDRESS}@2 closed. Session lasted from ${DATE}@2 ${DATE} &lt;/value&gt;
            &lt;/values&gt;
        &lt;/message&gt;
    &lt;/action&gt;
&lt;/actions&gt;</synopsis>
            <example>
                <title>Actions based on the number of messages</title>
                <indexterm>
                    <primary>actions</primary>
                    <secondary></secondary>
                </indexterm>
                <indexterm type="parameter">
                    <primary>$(context-length)</primary>
                </indexterm>
                <para>The following example triggers different actions based on the number of messages in the context. This way you can check if the context contains enough messages for the event to be complete, and execute a different action if it does not.</para>
                <synopsis>&lt;actions&gt;
    &lt;action condition='"$(context-length)" &gt;= "4"'&gt;
        &lt;message&gt;
            &lt;values&gt;
                &lt;value name="PROGRAM"&gt;event&lt;/value&gt;
                &lt;value name="MESSAGE"&gt;Event complete&lt;/value&gt;
            &lt;/values&gt;
        &lt;/message&gt;
    &lt;/action&gt;
    &lt;action condition='"$(context-length)" &lt; "4"'&gt;
        &lt;message&gt;
            &lt;values&gt;
                &lt;value name="PROGRAM"&gt;error&lt;/value&gt;
            &lt;value name="MESSAGE"&gt;Error detected&lt;/value&gt;
            &lt;/values&gt;
        &lt;/message&gt;
    &lt;/action&gt;
&lt;/actions&gt;</synopsis>
            </example>
        </section>
        <section xml:id="patterndb-actions-external">
            <title>External actions</title>
            <indexterm>
                <primary>actions</primary>
                <secondary>external actions</secondary>
            </indexterm>
            <para>To perform an external action when a message is triggered, for example, to send the message in an e-mail, you have to route the generated messages to an external application using the <parameter>program()</parameter> destination.</para>
            <example xml:id="example-trigger-email">
                <title>Sending triggered messages to external applications</title>
                <para>The following sample configuration selects the triggered messages and sends them to an external script.</para>
                <orderedlist>
                    <listitem>
                        <para>Set a field in the triggered message that is easy to identify and filter. For example:</para>
                        <synopsis>&lt;values&gt;
    &lt;value name="MESSAGE"&gt;A log message from ${HOST} matched rule number $.classifier.rule_id&lt;/value&gt;
    &lt;value name="TRIGGER"&gt;yes&lt;/value&gt;
&lt;/values&gt;</synopsis>
                    </listitem>
                    <listitem>
                        <para>Create a destination that will process the triggered messages.</para>
                        <synopsis>destination d_triggers { program("/bin/myscript"; ); };</synopsis>
                    </listitem>
                    <listitem>
                        <para>Create a filter that selects the triggered messages from the internal source.</para>
                        <synopsis>filter f_triggers {match("yes" value ("TRIGGER") type(string));};</synopsis>
                    </listitem>
                    <listitem>
                        <para>Create a logpath that selects the triggered messages from the internal source and sends them to the script:</para>
                        <synopsis>log { source(s_local); filter(f_triggers); destination(d_triggers); };</synopsis>
                    </listitem>
                    <listitem>
                        <para>Create a script that will actually process the generated messages, for example:</para>
                        <synopsis>#!/usr/bin/perl
while (&lt;&gt;) {
        # body of the script to send emails, snmp traps, and so on
}</synopsis>
                    </listitem>
                </orderedlist>
            </example>
        </section>
        <section xml:id="patterndb-actions-correlation">
            <title>Actions and message correlation</title>
            <indexterm>
                <primary>actions</primary>
                <secondary>message correlation</secondary>
            </indexterm>
            <para>Certain features of generating messages can be used only if message correlation is used as well. For details on correlating messages, see <xref linkend="patterndb-correlation"/>.</para>
            <itemizedlist>
                <listitem>
                    <para>The &abbrev; application automatically fills the fields for the generated message based on the scope of the context, for example, the HOST and PROGRAM fields if the <parameter>context-scope</parameter> is <userinput>program</userinput>.</para>
                </listitem>
                <listitem>
                    <para>When used together with message correlation, you can also refer to fields and values of earlier messages of the context by adding the <userinput>@&lt;distance-of-referenced-message-from-the-current&gt;</userinput> suffix to the macro. For details, see <xref linkend="referencing-previous-messages"/>.</para>
                    <xi:include href="../../common/chunk/example-patterndb-referencing-earlier-values.xml" xmlns:xi="http://www.w3.org/2001/XInclude"/>
                </listitem>
                <listitem>
                    <para>You can use the name-value pairs of other messages of the context. If you set the <parameter>inherit-properties</parameter> attribute of the generated message to <parameter>context</parameter>, &abbrev; collects every name-value pair from each message stored in the context, and includes them in the generated message. This means that you can refer to a name-value pair without having to know which message of the context included it. If a name-value pair appears in multiple messages of the context, the value in the latest message will be used. To refer to an earlier value, use the <userinput>@&lt;distance-of-referenced-message-from-the-current&gt;</userinput> suffix format.</para>
                    <synopsis>&lt;action&gt;
    &lt;message inherit-properties='context'&gt;</synopsis>
                    <example xml:id="patterndb-inherit-properties">
                        <title>Using the <parameter>inherit-properties</parameter> option</title>
                        <para>For example, if <parameter>inherit-properties</parameter> is set to <userinput>context</userinput>, and you have a rule that collects SSH login and logout messages to the same context, you can use the following value to generate a message collecting the most important information form both messages, including the beginning and end date.</para>
                        <synopsis>&lt;value name="MESSAGE"&gt;An SSH session for ${SSH_USERNAME} from ${SSH_CLIENT_ADDRESS} closed. Session lasted from ${DATE}@2 to $DATE pid: $PID.&lt;/value&gt;</synopsis>
                        <para>The following is a detailed rule for this purpose.</para>
                        <synopsis>&lt;patterndb version='4' pub_date='2015-04-13'&gt;
    &lt;ruleset name='sshd' id='12345678'&gt;
        &lt;pattern&gt;sshd&lt;/pattern&gt;
            &lt;rules&gt;
                &lt;!-- The pattern database rule for the first log message --&gt;
                &lt;rule provider='me' id='12347598' class='system'
                    context-id="ssh-login-logout" context-timeout="86400"
                    context-scope="process"&gt;
                &lt;!-- Note the context-id that groups together the
                relevant messages, and the context-timeout value that
                determines how long a new message can be added to the
                context  --&gt;
                    &lt;patterns&gt;
                        &lt;pattern&gt;Accepted @ESTRING:SSH.AUTH_METHOD: @for @ESTRING:SSH_USERNAME: @from @ESTRING:SSH_CLIENT_ADDRESS: @port @ESTRING:: @@ANYSTRING:SSH_SERVICE@&lt;/pattern&gt;
                        &lt;!-- This is the actual pattern used to identify
                        the log message. The segments between the @
                        characters are parsers that recognize the variable
                        parts of the message - they can also be used as
                        macros.  --&gt;
                    &lt;/patterns&gt;
                &lt;/rule&gt;
                &lt;!-- The pattern database rule for the fourth log message --&gt;
                &lt;rule provider='me' id='12347599' class='system' context-id="ssh-login-logout" context-scope="process"&gt;
                    &lt;patterns&gt;
                         &lt;pattern&gt;pam_unix(sshd:session): session closed for user @ANYSTRING:SSH_USERNAME@&lt;/pattern&gt;
                    &lt;/patterns&gt;
                    &lt;actions&gt;
                        &lt;action&gt;
                            &lt;message inherit-properties='context'&gt;
                                &lt;values&gt;
                                    &lt;value name="MESSAGE"&gt;An SSH session for ${SSH_USERNAME} from ${SSH_CLIENT_ADDRESS} closed. Session lasted from ${DATE}@2 to $DATE pid: $PID.&lt;/value&gt;
                                    &lt;value name="TRIGGER"&gt;yes&lt;/value&gt;
                                    &lt;!-- This is the new log message
                                    that is generated when the logout
                                    message is received. The macros ending
                                    with @2 reference values of the
                                    previous message from the context. --&gt;
                                &lt;/values&gt;
                            &lt;/message&gt;
                        &lt;/action&gt;
                    &lt;/actions&gt;
                &lt;/rule&gt;
            &lt;/rules&gt;
    &lt;/ruleset&gt;
&lt;/patterndb&gt;</synopsis>
                    </example>
                </listitem>
                <listitem>
                    <para>It is possible to generate a message when the <parameter>context-timeout</parameter> of the original message expires and no new message is added to the context during this time. To accomplish this, include the <userinput>trigger="timeout"</userinput> attribute in the action element:</para>
                    <synopsis>&lt;action trigger="timeout"&gt;</synopsis>
                    <example xml:id="patterndb-timeout-action">
                        <title>Sending alert when a client disappears</title>
                        <para>The following example shows how to combine various features of &abbrev; to send an e-mail alert if a client stops sending messages.</para>
                        <itemizedlist>
                            <listitem>
                                <para>Configure your clients to send MARK messages periodically. It is enough to configure MARK messages for the destination that forwards your log messages to your &abbrev; server (<userinput>mark-mode(periodical)</userinput>).</para>
                            </listitem>
                            <listitem>
                                <para>On your &abbrev; server, create a pattern database rule that matches on the incoming MARK messages. In the rule, set the <parameter>context-scope</parameter> attribute to <userinput>host</userinput>, and the <parameter>context-timeout</parameter> attribute to a value that is higher than the <parameter>mark-freq</parameter> value set on your clients (by default, <userinput>mark-freq</userinput> is 1200 seconds, so set <userinput>context-timeout</userinput> at least to 1500 seconds, but you might want to use a higher value, depending on your environment).</para>
                            </listitem>
                            <listitem>
                                <para>Add an action to this rule that sends you an e-mail alert if the <userinput>context-timeout</userinput> expires, and the server does not receive a new MARK message (<userinput>&lt;action trigger="timeout"&gt;</userinput>).</para>
                            </listitem>
                            <listitem>
                                <para>On your &abbrev; server, use the pattern database in the log path that handles incoming log messages.</para>
                            </listitem>
                        </itemizedlist>
                    </example>
                </listitem>
            </itemizedlist>
        </section>
    </section>
    <section xml:id="reference-parsers-pattern-databases">
        <title>Creating pattern databases</title>

        <xi:include href="../../common/syslog-ng-patterndb-using-parsers.xml" xmlns:xi="http://www.w3.org/2001/XInclude"/>

        <section xml:id="what-is-new-patterndb-v5">
            <title>What's new in the syslog-ng pattern database format V5</title>
            <para>The V5 database format has the following differences compared to the V4 format:</para>
            <itemizedlist>
                <listitem>
                    <para>The &lt;ruleset&gt; element can now store multiple reference URLs using the new &lt;rule_urls&gt; element. For details, see <xref linkend="element-patterndb-ruleset"/>.</para>
                </listitem>
                <listitem>
                    <para>In an &lt;action&gt;, you can now initialize a new context. As a result, the &lt;message&gt; element is not required. For details, see <xref linkend="element-patterndb-create-context"/>.</para>
                </listitem>
                <listitem>
                    <para>The <parameter>inherit-properties</parameter> attribute is deprecated, use the <parameter>inherit-mode</parameter> attribute instead. For details, see <xref linkend="element-patterndb-action"/>.</para>
                </listitem>
            </itemizedlist>
        </section>

        <section xml:id="reference-patterndb-schemes">
            <title>The syslog-ng pattern database format</title>
            <indexterm>
                <primary>pattern database</primary>
            </indexterm>
            <indexterm>
                <primary>classifying messages</primary>
                <secondary>creating databases</secondary>
            </indexterm>
            <indexterm>
                <primary>message classification</primary>
            </indexterm>
            <indexterm>
                <primary>pattern database schema</primary>
            </indexterm>
            <para>Pattern databases are XML files that contain rules describing the message patterns. For sample pattern databases, see <xref linkend="patterndb-download"/>.</para>
            <para>The following scheme describes the V4 format of the pattern database. This format is used by &abbrev; <phrase condition="pe">4 F1</phrase><phrase condition="ose">3.2</phrase> and later, and is backwards-compatible with the earlier V3 format.</para>
            <para>For a sample database containing only a single pattern, see <xref linkend="example-pattern-database-v4"/>.</para>
            <tip>
                <para>Use the <command>pdbtool</command> utility that is bundled with syslog-ng to test message patterns and convert existing databases to the latest format. For details, see <xref linkend="pdbtool.1"/>.</para>
                <para>To automatically create an initial pattern database from an existing log file, use the <command>pdbtool patternize</command> command. For details, see <xref linkend="pdbtool-patternize"/>.</para>
            </tip>
            <example xml:id="example-pattern-database-v4">
                <title>A V4 pattern database containing a single rule</title>
                <indexterm>
                    <primary>pattern database</primary>
                </indexterm>
                <para>The following pattern database contains a single rule that matches a log message of the <userinput>ssh</userinput> application. A sample log message looks like:</para>
                <synopsis>Accepted password for sampleuser from 10.50.0.247 port 42156 ssh2</synopsis>
                <para>The following is a simple pattern database containing a matching rule.</para>
                <synopsis>&lt;patterndb version='4' pub_date='2010-10-17'&gt;
    &lt;ruleset name='ssh' id='123456678'&gt;
        &lt;pattern&gt;ssh&lt;/pattern&gt;
            &lt;rules&gt;
                &lt;rule provider='me' id='182437592347598' class='system'&gt;
                    &lt;patterns&gt;
                        &lt;pattern&gt;Accepted @QSTRING:SSH.AUTH_METHOD: @ for@QSTRING:SSH_USERNAME: @from\ @QSTRING:SSH_CLIENT_ADDRESS: @port @NUMBER:SSH_PORT_NUMBER:@ ssh2&lt;/pattern&gt;
                    &lt;/patterns&gt;
                &lt;/rule&gt;
            &lt;/rules&gt;
    &lt;/ruleset&gt;
&lt;/patterndb&gt;</synopsis>
                <para>Note that the rule uses macros that refer to parts of the message, for example, you can use the <userinput>${SSH_USERNAME}</userinput> macro refer to the username used in the connection.</para>
                <para>The following is the same example, but with a test message and test values for the parsers.</para>
                <synopsis>&lt;patterndb version='4' pub_date='2010-10-17'&gt;
    &lt;ruleset name='ssh' id='123456678'&gt;
        &lt;pattern&gt;ssh&lt;/pattern&gt;
            &lt;rules&gt;
                &lt;rule provider='me' id='182437592347598' class='system'&gt;
                    &lt;patterns&gt;
                        &lt;pattern&gt;Accepted @QSTRING:SSH.AUTH_METHOD: @ for@QSTRING:SSH_USERNAME: @from\ @QSTRING:SSH_CLIENT_ADDRESS: @port @NUMBER:SSH_PORT_NUMBER:@ ssh2&lt;/pattern&gt;
                    &lt;/patterns&gt;
                    &lt;examples&gt;
                        &lt;example&gt;
                            &lt;test_message&gt;Accepted password for sampleuser from 10.50.0.247 port 42156 ssh2&lt;/test_message&gt;
                            &lt;test_values&gt;
                                &lt;test_value name="SSH.AUTH_METHOD"&gt;password&lt;/test_value&gt;
                                &lt;test_value name="SSH_USERNAME"&gt;sampleuser&lt;/test_value&gt;
                                &lt;test_value name="SSH_CLIENT_ADDRESS"&gt;10.50.0.247&lt;/test_value&gt;
                                &lt;test_value name="SSH_PORT_NUMBER"&gt;42156&lt;/test_value&gt;
                            &lt;/test_values&gt;
                       &lt;/example&gt;
                    &lt;/examples&gt;
                &lt;/rule&gt;
            &lt;/rules&gt;
    &lt;/ruleset&gt;
&lt;/patterndb&gt;</synopsis>
            </example>
            <section xml:id="element-patterndb-patterndb">
                <title>Element: patterndb</title>
                <simplesect>
                    <title>Location</title>
                    <para>/<emphasis role="bold">patterndb</emphasis></para>
                </simplesect>
                <simplesect>
                    <title>Description</title>
                    <para>The container element of the pattern database.</para>
                </simplesect>
                <simplesect>
                    <title>Attributes</title>
                    <itemizedlist>
                        <listitem>
                            <para><emphasis role="bold">version</emphasis>: The schema version of the pattern database. The current version is <userinput>4</userinput>.</para>
                        </listitem>
                        <listitem>
                            <para><emphasis role="bold">pubdate</emphasis>: The publication date of the XML file.</para>
                        </listitem>
                    </itemizedlist>
                </simplesect>
                <simplesect>
                    <title>Children</title>
                    <itemizedlist>
                        <listitem>
                            <para><link linkend="element-patterndb-ruleset"><emphasis role="bold">ruleset</emphasis></link></para>
                        </listitem>
                    </itemizedlist>
                </simplesect>
                <simplesect>
                    <title>Example</title>
                    <synopsis>&lt;patterndb version='4' pub_date='2010-10-25'&gt;</synopsis>
                </simplesect>
            </section>
            <section xml:id="element-patterndb-ruleset">
                <title>Element: ruleset</title>
                <simplesect>
                    <title>Location</title>
                    <para>/<link linkend="element-patterndb-patterndb">patterndb</link>/<emphasis role="bold">ruleset</emphasis></para>
                </simplesect>
                <simplesect>
                    <title>Description</title>
                    <para>A container element to group log patterns for an application or program. A <userinput>&lt;patterndb&gt;</userinput> element may contain any number of <userinput>&lt;ruleset&gt;</userinput> elements.</para>
                </simplesect>
                <simplesect>
                    <title>Attributes</title>
                    <itemizedlist>
                        <listitem>
                            <para><emphasis role="bold">name</emphasis>: The name of the application. Note that the function of this attribute is to make the database more readable, syslog-ng uses the <userinput>&lt;pattern&gt;</userinput> element to identify the applications sending log messages.</para>
                        </listitem>
                        <listitem>
                            <para><emphasis role="bold">id</emphasis>: A unique ID of the application, for example, the md5 sum of the <userinput>name</userinput> attribute.</para>
                        </listitem>
                    </itemizedlist>
                </simplesect>
                <simplesect>
                    <title>Children</title>
                    <itemizedlist>
                        <listitem>
                            <para><link linkend="patterndb-schema-patterns"><emphasis role="bold">patterns</emphasis></link></para>
                        </listitem>
                        <listitem>
                            <para><link linkend="element-patterndb-rules"><emphasis role="bold">rules</emphasis></link></para>
                        </listitem>
                        <listitem>
                            <para><link linkend="patterndb-schema-actions"><emphasis role="bold">actions</emphasis></link></para>
                        </listitem>
                        <listitem>
                            <para><link linkend="element-patterndb-tags"><emphasis role="bold">tags</emphasis></link></para>
                        </listitem>
                        <listitem>
                            <para><emphasis role="bold">description</emphasis>: OPTIONAL &mdash; A description of the ruleset or the application.</para>
                        </listitem>
                        <listitem>
                            <para><emphasis role="bold">url</emphasis>: OPTIONAL &mdash; An URL referring to further information about the ruleset or the application.</para>
                        </listitem>
                        <listitem>
                            <para><emphasis role="bold">rule_urls</emphasis>: OPTIONAL &mdash; To list multiple URLs referring to further information about the ruleset or the application, enclose the &lt;url&gt; elements into an &lt;urls&gt; element.</para>
                        </listitem>
                    </itemizedlist>
                </simplesect>
                <simplesect>
                    <title>Example</title>
                    <synopsis>&lt;ruleset name='su' id='480de478-d4a6-4a7f-bea4-0c0245d361e1'&gt;</synopsis>
                </simplesect>
            </section>
            <section xml:id="patterndb-schema-patterns">
                <title>Element: patterns</title>
                <simplesect>
                    <title>Location</title>
                    <para>/<link linkend="element-patterndb-patterndb">patterndb</link>/<link linkend="element-patterndb-ruleset">ruleset</link>/<emphasis role="bold">patterns</emphasis></para>
                </simplesect>
                <simplesect>
                    <title>Description</title>
                    <para>A container element. A <userinput>&lt;patterns&gt;</userinput> element may contain any number of <userinput>&lt;pattern&gt;</userinput> elements.</para>
                </simplesect>
                <simplesect>
                    <title>Attributes</title>
                    <para>N/A</para>
                </simplesect>
                <simplesect>
                    <title>Children</title>
                    <itemizedlist>
                        <listitem>
                            <para><emphasis role="bold">pattern</emphasis>: The name of the application &mdash; syslog-ng matches this value to the ${PROGRAM} header of the syslog message to find the rulesets applicable to the syslog message.</para>
                            <para>Specifying multiple patterns is useful if two or more applications have different names (that is, different ${PROGRAM} fields), but otherwise send identical log messages.</para>
                            <para>It is not necessary to use multiple patterns if only the end of the ${PROGRAM} fields is different, use only the beginning of the ${PROGRAM} field as the <userinput>pattern</userinput>. For example, the Postfix e-mail server sends messages using different process names, but all of them begin with the <userinput>postfix</userinput> string.</para>
                            <para>You can also use parsers in the program pattern if needed, and use the parsed results later. For example: <parameter>&lt;pattern&gt;postfix\@ESTRING:.postfix.component:[@&lt;/pattern&gt;</parameter></para>
                            <note>
                                <para>If the <userinput>&lt;pattern&gt;</userinput> element of a ruleset is not specified, &abbrev; will use this ruleset as a fallback ruleset: it will apply the ruleset to messages that have an empty PROGRAM header, or if none of the program patterns matched the PROGRAM header of the incoming message.</para>
                            </note>
                        </listitem>
                    </itemizedlist>
                </simplesect>
                <simplesect>
                    <title>Example</title>
                    <synopsis>&lt;patterns&gt;
    &lt;pattern&gt;firstapplication&lt;/pattern&gt;
    &lt;pattern&gt;otherapplication&lt;/pattern&gt;
&lt;/patterns&gt;</synopsis>
                    <para>Using parsers in the program pattern:</para>
                    <synopsis>&lt;pattern&gt;postfix\@ESTRING:.postfix.component:[@&lt;/pattern&gt;</synopsis>
                </simplesect>
            </section>
            <section xml:id="element-patterndb-rules">
                <title>Element: rules</title>
                <simplesect>
                    <title>Location</title>
                    <para>/<link linkend="element-patterndb-patterndb">patterndb</link>/<link linkend="element-patterndb-ruleset">ruleset</link>/<emphasis role="bold">rules</emphasis></para>
                </simplesect>
                <simplesect>
                    <title>Description</title>
                    <para>A container element for the rules of the ruleset.</para>
                </simplesect>
                <simplesect>
                    <title>Attributes</title>
                    <para>N/A</para>
                </simplesect>
                <simplesect>
                    <title>Children</title>
                    <itemizedlist>
                        <listitem>
                            <para><link linkend="element-patterndb-rule"><emphasis role="bold">rule</emphasis></link></para>
                        </listitem>
                    </itemizedlist>
                </simplesect>
                <simplesect>
                    <title>Example</title>
                    <synopsis>&lt;rules&gt;
    &lt;rule provider='me' id='182437592347598' class='system'&gt;
        &lt;patterns&gt;
            &lt;pattern&gt;Accepted @QSTRING:SSH.AUTH_METHOD: @ for@QSTRING:SSH_USERNAME: @from\ @QSTRING:SSH_CLIENT_ADDRESS: @port @NUMBER:SSH_PORT_NUMBER:@ ssh2&lt;/pattern&gt;
        &lt;/patterns&gt;
    &lt;/rule&gt;
&lt;/rules&gt;</synopsis>
                </simplesect>
            </section>
            <section xml:id="element-patterndb-rule">
                <title>Element: rule</title>
                <simplesect>
                    <title>Location</title>
                    <para>/<link linkend="element-patterndb-patterndb">patterndb</link>/<link linkend="element-patterndb-ruleset">ruleset</link>/<link linkend="element-patterndb-rules">rules</link>/<emphasis role="bold">rule</emphasis></para>
                </simplesect>
                <simplesect>
                    <title>Description</title>
                    <para>An element containing message patterns and how a message that matches these patterns is classified.</para>
                    <note>
                        <para>If the following characters appear in the message, they must be escaped in the rule as follows:</para>
                        <itemizedlist>
                            <listitem>
                                <para><userinput>@</userinput>: Use @@, for example <userinput>user@@example.com</userinput></para>
                            </listitem>
                            <listitem>
                                <para><emphasis>&lt;</emphasis>: Use <userinput>&amp;lt;</userinput></para>
                            </listitem>
                            <listitem>
                                <para><emphasis>&gt;</emphasis>: Use <userinput>&amp;gt;</userinput></para>
                            </listitem>
                            <listitem>
                                <para>&amp;: Use <userinput>&amp;amp;</userinput></para>
                            </listitem>
                        </itemizedlist>
                    </note>
                    <para>The <emphasis role="bold">&lt;rules&gt;</emphasis> element may contain any number of <emphasis role="bold">&lt;rule&gt;</emphasis> elements.</para>
                </simplesect>
                <simplesect xml:id="element-patterndb-rule-attributes" xreflabel="Attributes of the rule element">
                    <title>Attributes</title>
                    <itemizedlist>
                        <listitem>
                            <para><emphasis role="bold">provider</emphasis>: The provider of the rule. This is used to distinguish between who supplied the rule, that is, if it has been created by &vendor;, or added to the XML by a local user.</para>
                        </listitem>
                        <listitem>
                            <para><emphasis role="bold">id</emphasis>: The globally unique ID of the rule.</para>
                        </listitem>
                        <listitem>
                            <para><emphasis role="bold">class</emphasis>: The class of the rule &mdash; syslog-ng assigns this class to the messages matching a pattern of this rule.</para>
                        </listitem>

                         <xi:include href="../../common/chunk/patterndb-context-attributes.xml" xmlns:xi="http://www.w3.org/2001/XInclude"/>

                    </itemizedlist>
                </simplesect>
                <simplesect>
                    <title>Children</title>
                    <itemizedlist>
                        <listitem>
                            <para><link linkend="element-patterndb-rule-patterns"><emphasis role="bold">patterns</emphasis></link></para>
                        </listitem>
                    </itemizedlist>
                </simplesect>
                <simplesect>
                    <title>Example</title>
                    <synopsis>&lt;rule provider='balabit' id='f57196aa-75fd-11dd-9bba-001e6806451b' class='violation'&gt;</synopsis>
                    <para>The following example specifies attributes for correlating messages as well. For details on correlating messages, see <xref linkend="patterndb-correlation"/>.</para>
                    <synopsis>&lt;rule provider='balabit' id='f57196aa-75fd-11dd-9bba-001e6806451b' class='violation' context-id='same-session' context-scope='process' context-timeout='360'&gt;</synopsis>
                </simplesect>
            </section>
            <section xml:id="element-patterndb-rule-patterns">
                <title>Element: patterns</title>
                <simplesect>
                    <title>Location</title>
                    <para>/<link linkend="element-patterndb-patterndb">patterndb</link>/<link linkend="element-patterndb-ruleset">ruleset</link>/<link linkend="element-patterndb-rules">rules</link>/<link linkend="element-patterndb-rule">rule</link>/<emphasis role="bold">patterns</emphasis></para>
                </simplesect>
                <simplesect>
                    <title>Description</title>
                    <para>An element containing the patterns of the rule. If a <emphasis role="bold">&lt;patterns&gt;</emphasis> element contains multiple <emphasis role="bold">&lt;pattern&gt;</emphasis> elements, the class of the <emphasis role="bold">&lt;rule&gt;</emphasis> is assigned to every syslog message matching any of the patterns.</para>
                </simplesect>
                <simplesect>
                    <title>Attributes</title>
                    <para>N/A</para>
                </simplesect>
                <simplesect>
                    <title>Children</title>
                    <itemizedlist>
                        <listitem>
                            <para><emphasis role="bold">pattern</emphasis>: A pattern describing a log message. This element is also called <userinput>message pattern</userinput>. For example:<synopsis>&lt;pattern&gt;+ ??? root-&lt;/pattern&gt;</synopsis></para>
                            <note>
                                <para>Support for XML entities is limited, you can use only the following entities: <userinput>&amp;amp; &amp;lt; &amp;gt; &amp;quot; &amp;apos;</userinput>. User-defined entities are not supported.</para>
                            </note>
                        </listitem>
                        <listitem>
                            <para><emphasis role="bold">description</emphasis>: OPTIONAL &mdash; A description of the pattern or the log message matching the pattern.</para>
                        </listitem>
                        <listitem>
                            <para><link linkend="element-patterndb-urls"><emphasis role="bold">urls</emphasis></link></para>
                        </listitem>
                        <listitem>
                            <para><link linkend="element-patterndb-values"><emphasis role="bold">values</emphasis></link></para>
                        </listitem>
                        <listitem>
                            <para><link linkend="element-patterndb-examples"><emphasis role="bold">examples</emphasis></link></para>
                        </listitem>
                    </itemizedlist>
                </simplesect>
                <simplesect>
                    <title>Example</title>
                    <synopsis>&lt;patterns&gt;
    &lt;pattern&gt;Accepted @QSTRING:SSH.AUTH_METHOD: @ for@QSTRING:SSH_USERNAME: @from\ @QSTRING:SSH_CLIENT_ADDRESS: @port @NUMBER:SSH_PORT_NUMBER:@ ssh2&lt;/pattern&gt;
&lt;/patterns&gt;</synopsis>
                </simplesect>
            </section>
            <section xml:id="element-patterndb-urls">
                <title>Element: urls</title>
                <simplesect>
                    <title>Location</title>
                    <para>/<link linkend="element-patterndb-patterndb">patterndb</link>/<link linkend="element-patterndb-ruleset">ruleset</link>/<link linkend="element-patterndb-rules">rules</link>/<link linkend="element-patterndb-rule">rule</link>/<link linkend="element-patterndb-rule-patterns">patterns</link>/<emphasis role="bold">urls</emphasis></para>
                </simplesect>
                <simplesect>
                    <title>Description</title>
                    <para>OPTIONAL &mdash; An element containing one or more URLs referring to further information about the patterns or the matching log messages.</para>
                </simplesect>
                <simplesect>
                    <title>Attributes</title>
                    <para>N/A</para>
                </simplesect>
                <simplesect>
                    <title>Children</title>
                    <itemizedlist>
                        <listitem>
                            <para><emphasis role="bold">url</emphasis>: OPTIONAL &mdash; An URL referring to further information about the patterns or the matching log messages.</para>
                        </listitem>
                    </itemizedlist>
                </simplesect>
                <simplesect>
                    <title>Example</title>
                    <para>N/A</para>
                </simplesect>
            </section>
            <section xml:id="element-patterndb-values">
                <title>Element: values</title>
                <simplesect>
                    <title>Location</title>
                    <para>/<link linkend="element-patterndb-patterndb">patterndb</link>/<link linkend="element-patterndb-ruleset">ruleset</link>/<link linkend="element-patterndb-rules">rules</link>/<link linkend="element-patterndb-rule">rule</link>/<link linkend="element-patterndb-rule-patterns">patterns</link>/<emphasis role="bold">values</emphasis></para>
                </simplesect>
                <simplesect>
                    <title>Description</title>
                    <para>OPTIONAL &mdash; Name-value pairs that are assigned to messages matching the patterns, for example, the representation of the event in the message according to the Common Event Format (CEF) or Common Event Exchange (CEE). The names can be used as macros to reference the assigned values.</para>
                </simplesect>
                <simplesect>
                    <title>Attributes</title>
                    <para>N/A</para>
                </simplesect>
                <simplesect>
                    <title>Children</title>
                    <itemizedlist>
                        <listitem>
                            <para><emphasis role="bold">value</emphasis>: OPTIONAL &mdash; Contains the value of the name-value pair that is assigned to the message.</para>
                            <para>The &lt;value&gt; element of name-value pairs can include template functions. For details, see <xref linkend="template-functions"/>, for examples, see <xref linkend="template-function-if"/>.</para>
                            <para>When used together with message correlation, the &lt;value&gt; element of name-value pairs can include references to the values of earlier messages from the same context. For details, see <xref linkend="patterndb-correlation"/>.</para>
                        </listitem>
                        <listitem>
                            <indexterm type="parameter">
                                <primary>name &mdash; pattern value</primary>
                            </indexterm>
                            <para><emphasis>name</emphasis>: The name of the name-value pair. It can also be used as a macro to reference the assigned value.</para>
                        </listitem>
                    </itemizedlist>
                </simplesect>
                <simplesect>
                    <title>Example</title>
                    <synopsis>&lt;values&gt;
    &lt;value name=".classifier.outcome"&gt;/Success&lt;/value&gt;
&lt;/values&gt;</synopsis>
                </simplesect>
            </section>
            <section xml:id="element-patterndb-examples">
                <title>Element: examples</title>
                <simplesect>
                    <title>Location</title>
                    <para>/<link linkend="element-patterndb-patterndb">patterndb</link>/<link linkend="element-patterndb-ruleset">ruleset</link>/<link linkend="element-patterndb-rules">rules</link>/<link linkend="element-patterndb-rule">rule</link>/<link linkend="element-patterndb-rule-patterns">patterns</link>/<emphasis role="bold">examples</emphasis></para>
                </simplesect>
                <simplesect>
                    <title>Description</title>
                    <para>OPTIONAL &mdash; A container element for sample log messages that should be recognized by the pattern. These messages can be used also to test the patterns and the parsers.</para>
                </simplesect>
                <simplesect>
                    <title>Attributes</title>
                    <para>N/A</para>
                </simplesect>
                <simplesect>
                    <title>Children</title>
                    <itemizedlist>
                        <listitem>
                            <para><link linkend="element-patterndb-example"><emphasis role="bold">example</emphasis></link></para>
                        </listitem>
                    </itemizedlist>
                </simplesect>
                <simplesect>
                    <title>Example</title>
                    <synopsis>&lt;examples&gt;
    &lt;example&gt;
        &lt;test_message&gt;Accepted password for sampleuser from 10.50.0.247 port 42156 ssh2&lt;/test_message&gt;
        &lt;test_values&gt;
            &lt;test_value name="SSH.AUTH_METHOD"&gt;password&lt;/test_value&gt;
            &lt;test_value name="SSH_USERNAME"&gt;sampleuser&lt;/test_value&gt;
            &lt;test_value name="SSH_CLIENT_ADDRESS"&gt;10.50.0.247&lt;/test_value&gt;
            &lt;test_value name="SSH_PORT_NUMBER"&gt;42156&lt;/test_value&gt;
        &lt;/test_values&gt;
    &lt;/example&gt;
&lt;/examples&gt;</synopsis>
                </simplesect>
            </section>
            <section xml:id="element-patterndb-example">
                <title>Element: example</title>
                <simplesect>
                    <title>Location</title>
                    <para>/<link linkend="element-patterndb-patterndb">patterndb</link>/<link linkend="element-patterndb-ruleset">ruleset</link>/<link linkend="element-patterndb-rules">rules</link>/<link linkend="element-patterndb-rule">rule</link>/<link linkend="element-patterndb-rule-patterns">patterns</link>/<link linkend="element-patterndb-examples">examples</link>/<emphasis role="bold">example</emphasis></para>
                </simplesect>
                <simplesect>
                    <title>Description</title>
                    <para>OPTIONAL &mdash; A container element for a sample log message.</para>
                </simplesect>
                <simplesect>
                    <title>Attributes</title>
                    <para>N/A</para>
                </simplesect>
                <simplesect>
                    <title>Children</title>
                    <itemizedlist>
                        <listitem>
                            <indexterm type="parameter">
                                <primary>test_message</primary>
                            </indexterm>
                            <para><emphasis role="bold">test_message</emphasis>: OPTIONAL &mdash; A sample log message that should match this pattern. For example:<synopsis>&lt;test_message program="myapplication"&gt;Content filter has been enabled&lt;/test_message&gt;</synopsis></para>
                            <itemizedlist>
                                <listitem>
                                    <para><emphasis>program</emphasis>: The program pattern of the test message. For example:<synopsis>&lt;test_message program="proftpd">ubuntu (::ffff:192.168.2.179[::ffff:192.168.2.179]) - FTP session closed.&lt;/test_message&gt;</synopsis></para>
                                </listitem>
                            </itemizedlist>
                        </listitem>
                        <listitem>
                            <indexterm type="parameter">
                                <primary>test_values</primary>
                            </indexterm>
                            <para><emphasis role="bold">test_values</emphasis>: OPTIONAL &mdash; A container element to test the results of the parsers used in the pattern.</para>
                            <itemizedlist>
                                <listitem>
                                    <indexterm type="parameter">
                                        <primary>test_value</primary>
                                    </indexterm>
                                    <para><emphasis role="bold">test_value</emphasis>: OPTIONAL &mdash; The expected value of the parser when matching the pattern to the test message. For example:<synopsis>&lt;test_value name=".dict.ContentFilter"&gt;enabled&lt;/test_value&gt;</synopsis></para>
                                    <itemizedlist>
                                        <listitem>
                                            <indexterm type="parameter">
                                                <primary>name &mdash; test_value</primary>
                                            </indexterm>
                                            <para><emphasis>name</emphasis>: The name of the parser to test.</para>
                                        </listitem>
                                    </itemizedlist>
                                </listitem>
                            </itemizedlist>
                        </listitem>
                    </itemizedlist>
                </simplesect>
                <simplesect>
                    <title>Example</title>
                    <synopsis>&lt;examples&gt;
    &lt;example&gt;
        &lt;test_message&gt;Accepted password for sampleuser from 10.50.0.247 port 42156 ssh2&lt;/test_message&gt;
        &lt;test_values&gt;
            &lt;test_value name="SSH.AUTH_METHOD"&gt;password&lt;/test_value&gt;
            &lt;test_value name="SSH_USERNAME"&gt;sampleuser&lt;/test_value&gt;
            &lt;test_value name="SSH_CLIENT_ADDRESS"&gt;10.50.0.247&lt;/test_value&gt;
            &lt;test_value name="SSH_PORT_NUMBER"&gt;42156&lt;/test_value&gt;
        &lt;/test_values&gt;
    &lt;/example&gt;
&lt;/examples&gt;</synopsis>
                </simplesect>
            </section>
            <section xml:id="patterndb-schema-actions">
                <title>Element: actions</title>
                <simplesect>
                    <title>Location</title>
                    <para>/<link linkend="element-patterndb-patterndb">patterndb</link>/<link linkend="element-patterndb-ruleset">ruleset</link>/<emphasis role="bold">actions</emphasis></para>
                </simplesect>
                <simplesect>
                    <title>Description</title>
                    <para>OPTIONAL &mdash; A container element for actions that are performed if a message is recognized by the pattern. For details on actions, see <xref linkend="patterndb-triggers-actions"/>.</para>
                </simplesect>
                <simplesect>
                    <title>Attributes</title>
                    <para>N/A</para>
                </simplesect>
                <simplesect>
                    <title>Children</title>
                    <itemizedlist>
                        <listitem>
                            <para><link linkend="element-patterndb-action"><emphasis role="bold">action</emphasis></link></para>
                        </listitem>
                    </itemizedlist>
                </simplesect>
                <simplesect>
                    <title>Example</title>

                    <xi:include href="../../common/chunk/example-patterndb-actions.xml" xmlns:xi="http://www.w3.org/2001/XInclude"/>

                </simplesect>
            </section>
            <section xml:id="element-patterndb-action">
                <title>Element: action</title>
                <simplesect>
                    <title>Location</title>
                    <para>/<link linkend="element-patterndb-patterndb">patterndb</link>/<link linkend="element-patterndb-ruleset">ruleset</link>/<link linkend="patterndb-schema-actions">actions</link>/<emphasis role="bold">action</emphasis></para>
                </simplesect>
                <simplesect>
                    <title>Description</title>
                    <para>OPTIONAL &mdash; A container element describing an action that is performed when a message matching the rule is received.</para>
                </simplesect>
                <simplesect>
                    <title>Attributes</title>
                    <itemizedlist>
                        <listitem>
                            <indexterm type="parameter">
                                <primary>condition</primary>
                            </indexterm>
                            <indexterm type="parameter">
                                <primary>$(context-length)</primary>
                            </indexterm>
                            <indexterm>
                                <primary>actions</primary>
                                <secondary>context-length</secondary>
                            </indexterm>
                            <para><emphasis>condition</emphasis>: A syslog-ng filter expression. The action is performed only if the message matches the filter. The filter can include macros and name-value pairs extracted from the message. When using actions together with message-correlation, you can also use the <parameter>$(context-length)</parameter> macro, which returns the number of messages in the current context. For example, this can be used to determine if the expected number of messages has arrived to the context: <parameter>condition='"$(context-length)" >= "5"'</parameter></para>
                        </listitem>
                        <listitem>
                            <indexterm type="parameter">
                                <primary>rate</primary>
                            </indexterm>
                            <para><emphasis>rate</emphasis>: Specifies maximum how many messages should be generated in the specified time period in the following format: <userinput>&lt;number-of-messages&gt;/&lt;period-in-seconds&gt;</userinput>. For example: <userinput>1/60</userinput> allows 1 message per minute. Rates apply within the scope of the context, that is, if <userinput>context-scope="host"</userinput> and <userinput>rate="1/60"</userinput>, then maximum one message is generated per minute for every host that sends a log message matching the rule. Excess messages are dropped. Note that when applying the rate to the generated messages, &abbrev; uses the timestamps of the log messages, similarly to calculating the <parameter>context-timeout</parameter>. That way <userinput>rate</userinput> is applied correctly even if the log messages are processed offline.</para>
                        </listitem>
                        <listitem>
                            <indexterm type="parameter">
                                <primary>trigger</primary>
                            </indexterm>
                            <para><emphasis>trigger</emphasis>: Specifies when the action is executed. The <parameter>trigger</parameter> attribute has the following possible values:</para>
                            <itemizedlist>
                                <listitem>
                                    <indexterm type="parameter">
                                        <primary>match</primary>
                                    </indexterm>
                                    <para><emphasis>match</emphasis>: Execute the action immediately when a message matching the rule is received.</para>
                                </listitem>
                                <listitem>
                                    <indexterm type="parameter">
                                        <primary>timeout</primary>
                                    </indexterm>
                                    <para><emphasis>timeout</emphasis>: Execute the action when the correlation timer (<link linkend="element-patterndb-rule-attributes"><parameter>context-timeout</parameter></link>) of the pattern database rule expires. This is available only if actions are used together with correlating messages.</para>
                                </listitem>
                            </itemizedlist>
                        </listitem>
                    </itemizedlist>
                </simplesect>
                <simplesect>
                    <title>Children</title>
                    <itemizedlist>
                        <listitem>
                            <para><link linkend="element-patterndb-create-context"><emphasis role="bold">create-context</emphasis></link></para>
                        </listitem>
                        <listitem>
                            <indexterm type="parameter">
                                <primary>message</primary>
                            </indexterm>
                            <para><emphasis role="bold">message</emphasis>: A container element storing the message to be sent when the action is executed. Currently &abbrev; sends these messages to the <parameter>internal()</parameter> destination.</para>
                            <itemizedlist>
                                <listitem>
                                    <indexterm type="parameter">
                                        <primary>inherit-mode</primary>
                                    </indexterm>

                                    <xi:include href="../../common/chunk/option-inherit-mode.xml" xmlns:xi="http://www.w3.org/2001/XInclude"/>

                                    <para>For details on the message context, see <xref linkend="patterndb-correlation"/> and <xref linkend="patterndb-actions-correlation"/>. For details on triggering messages, see <xref linkend="patterndb-triggers-actions"/></para>
                                    <para condition="ose">This option is available in &abbrev; 3.8 and later.</para>
                                </listitem>
                            </itemizedlist>
                            <itemizedlist>
                                <listitem>
                                    <indexterm type="parameter">
                                        <primary>inherit-properties</primary>
                                    </indexterm>
                                    <para><emphasis>inherit-properties</emphasis>: This attribute is deprecated. Use the <parameter>inherit-mode</parameter> attribute instead.</para>
                                    <para>If set to <userinput>TRUE</userinput>, the original message that triggered the action is cloned, including its name-value pairs and tags.</para>
                                    <para>If set to <parameter>context</parameter>, &abbrev; collects every name-value pair from each message stored in the context, and includes them in the generated message. If a name-value pair appears in multiple messages of the context, the value in the latest message will be used. Note that tags are not merged, the generated message will inherit the tags assigned to the last message of the context.</para>
                                    <para>For details on the message context, see <xref linkend="patterndb-correlation"/> and <xref linkend="patterndb-actions-correlation"/>. For details on triggering messages, see <xref linkend="patterndb-triggers-actions"/></para>
                                    <para condition="pe">This option is available in &abbrev; 5.3.2 and later.</para>
                                </listitem>
                            </itemizedlist>
                        </listitem>
                        <listitem>
                            <indexterm type="parameter">
                                <primary>values &mdash; action</primary>
                            </indexterm>
                            <para><emphasis role="bold">values</emphasis>: A container element for values and fields that are used to create the message generated by the action.</para>
                            <itemizedlist>
                                <listitem>
                                    <indexterm type="parameter">
                                        <primary>value &mdash; action</primary>
                                    </indexterm>
                                    <para><emphasis role="bold">value</emphasis>: Sets the value of the message field specified in the <parameter>name</parameter> attribute of the element. For example, to specify the body of the generated message, use the following syntax:</para>
                                    <synopsis>&lt;value name="MESSAGE"&gt;A log message matched rule number $.classifier.rule_id&lt;/value&gt;</synopsis>
                                    <para>Note that currently it is not possible to add DATE, FACILITY, or SEVERITY fields to the message.</para>
                                    <para>When the action is used together with message correlation, the &abbrev; application automatically adds fields to the message based on the <parameter>context-scope</parameter> parameter. For example, using <userinput>context-scope="process"</userinput> automatically fills the HOST, PROGRAM, and PID fields of the generated message.</para>
                                </listitem>
                                <listitem>
                                    <indexterm type="parameter">
                                        <primary>name &mdash; value &mdash; action</primary>
                                    </indexterm>
                                    <para><emphasis>name</emphasis>: Name of the message field set by the <parameter>value</parameter> element.</para>
                                </listitem>
                            </itemizedlist>
                        </listitem>
                    </itemizedlist>
                </simplesect>
                <simplesect>
                    <title>Example</title>

                    <xi:include href="../../common/chunk/example-patterndb-actions.xml" xmlns:xi="http://www.w3.org/2001/XInclude"/>

                </simplesect>
            </section>
            <section xml:id="element-patterndb-create-context">
                <title>Element: create-context</title>
                <simplesect>
                    <title>Location</title>
                    <para>/<link linkend="element-patterndb-patterndb">patterndb</link>/<link linkend="element-patterndb-ruleset">ruleset</link>/<link linkend="patterndb-schema-actions">actions</link>/<link linkend="element-patterndb-action">action</link>/<emphasis role="bold">create-context</emphasis></para>
                </simplesect>
                <simplesect>
                    <title>Description</title>
                    <para>OPTIONAL &mdash; Creates a new correlation context from the current message and its associated context. This can be used to "split" a context.</para>
                    <para>Available in &abbrev; version <phrase condition="ose">3.8</phrase><phrase condition="pe">7</phrase> and later.</para>
                </simplesect>
                <simplesect>
                    <title>Attributes</title>
                    <indexterm type="parameter">
                        <primary>context-id</primary>
                    </indexterm>
                    <indexterm type="parameter">
                        <primary>context-scope</primary>
                    </indexterm>
                    <indexterm type="parameter">
                        <primary>context-timeout</primary>
                    </indexterm>
                    <itemizedlist>

                        <xi:include href="../../common/chunk/patterndb-context-attributes.xml" xmlns:xi="http://www.w3.org/2001/XInclude"/>

                    </itemizedlist>
                </simplesect>
                <simplesect>
                    <title>Children</title>
                    <itemizedlist>
                        <listitem>
                            <indexterm type="parameter">
                                <primary>message</primary>
                            </indexterm>
                             <para><emphasis role="bold">message</emphasis>: A container element storing the message that is added to the new context when the action is executed.</para>
                            <itemizedlist>
                                <listitem>
                                    <indexterm type="parameter">
                                        <primary>inherit-mode</primary>
                                    </indexterm>

                                    <xi:include href="../../common/chunk/option-inherit-mode.xml" xmlns:xi="http://www.w3.org/2001/XInclude"/>

                                    <para>For details on the message context, see <xref linkend="patterndb-correlation"/> and <xref linkend="patterndb-actions-correlation"/>. For details on triggering messages, see <xref linkend="patterndb-triggers-actions"/></para>
                                </listitem>
                            </itemizedlist>
                        </listitem>
                    </itemizedlist>
                </simplesect>
                <simplesect>
                    <title>Example</title>
                     <xi:include href="../../common/chunk/example-create-context-action.xml" xmlns:xi="http://www.w3.org/2001/XInclude"/>
                </simplesect>
            </section>
            <section xml:id="element-patterndb-tags">
                <title>Element: tags</title>
                <simplesect>
                    <title>Location</title>
                    <para>/<link linkend="element-patterndb-patterndb">patterndb</link>/<link linkend="element-patterndb-ruleset">ruleset</link>/<emphasis role="bold">tags</emphasis></para>
                </simplesect>
                <simplesect>
                    <title>Description</title>
                    <para>OPTIONAL &mdash; An element containing custom keywords (tags) about the messages matching the patterns. The tags can be used to label specific events (for example user logons). It is also possible to filter on these tags later (for details, see <xref linkend="tagging-messages"/>). Starting with &product; 3.2, the list of tags assigned to a message can be referenced with the <parameter>${TAGS}</parameter> macro.</para>
                </simplesect>
                <simplesect>
                    <title>Attributes</title>
                    <para>N/A</para>
                </simplesect>
                <simplesect>
                    <title>Children</title>
                    <itemizedlist>
                        <listitem>
                            <indexterm type="parameter">
                                <primary>tag &mdash; rule</primary>
                            </indexterm>
                            <para><emphasis role="bold">tag</emphasis>: OPTIONAL &mdash; A keyword or tags applied to messages matching the rule.</para>
                        </listitem>
                    </itemizedlist>
                </simplesect>
                <simplesect>
                    <title>Example</title>
                    <synopsis>&lt;tags&gt;&lt;tag&gt;UserLogin&lt;/tag&gt;&lt;/tags&gt;</synopsis>
                </simplesect>
            </section>
        </section>
    </section>
</chapter>
