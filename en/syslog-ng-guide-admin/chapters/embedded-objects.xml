<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE section
 [  <!ENTITY % entities SYSTEM "../../common/syslog-ng-entities.ent">
 %entities;]>
<section xml:id="embedded-objects" xmlns="http://docbook.org/ns/docbook" version="5.0">
    <title>Using channels in configuration objects</title>
    <indexterm significance="preferred">
        <primary>channels</primary>
    </indexterm>
    <indexterm type="parameter" significance="preferred">
        <primary>channel</primary>
    </indexterm>
    <para>Starting with &abbrev; <phrase condition="ose">3.4</phrase>, every configuration object is a log expression. Every configuration object is essentially a configuration block, and can include multiple objects. To reference the block, only the top-level object must be referenced. That way you can use embedded log statements, junctions and in-line object definitions within source, destination, filter, rewrite and parser definitions. For example, a source can include a rewrite rule to modify the messages received by the source, and that combination can be used as a simple source in a log statement. This feature allows you to preprocess the log messages very close to the source itself.</para>
    <para>To embed multiple objects into a configuration object, use the following syntax. Note that you must enclose the configuration block between braces instead of parenthesis.</para>
    <synopsis>&lt;type-of-top-level-object&gt; &lt;name-of-top-level-object&gt; {
    channel {
        &lt;configuration-objects&gt;
    };
};</synopsis>
    <example xml:id="example-channels">
        <title>Using channels</title>
        <para>For example, to process a log file in a specific way, you can define the required processing rules (parsers and rewrite expressions) and combine them in a single object:</para>
        <synopsis>source s_apache {
    channel {
        source { file("/var/log/apache/error.log"); };
        parser(p_apache_parser);
    };
};

log { source(s_apache); ... };</synopsis>
        <para>The <parameter>s_apache</parameter> source uses a file source (the error log of an Apache webserver) and references a specific parser to process the messages of the error log. The log statement references only the <parameter>s_apache</parameter> source, and any other object in the log statement can already use the results of the <parameter>p_apache_parser</parameter>parser.</para>
    </example>
    <note>
        <para>You must start the object definition with a <parameter>channel</parameter> even if you will use a <parameter>junction</parameter>, for example:</para>
        <synopsis>parser demo-parser() {
    channel {
        junction {
            channel { ... };
            channel { ... };
        };
    };
};</synopsis>
        <para>If you want to embed configuration objects into sources or destinations, always use channels, otherwise the source or destination will not behave as expected. For example, the following configuration is good:</para>
        <synopsis>source s_filtered_hosts {
    pipe("/dev/pipe");
    syslog(ip(192.168.0.1) transport("tcp"));
    syslog(ip(127.0.0.1) transport("tcp"));
    filter(netmask(10.0.0.0/16));
};</synopsis>
    </note>
</section>
