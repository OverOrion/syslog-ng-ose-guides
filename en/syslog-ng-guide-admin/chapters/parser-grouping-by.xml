<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE section
 [  <!ENTITY % entities SYSTEM "../../common/syslog-ng-entities.ent">
 %entities;]>
<section xml:id="grouping-by-parser" xmlns="http://docbook.org/ns/docbook" version="5.0">
    <title>Correlating messages using the <userinput>grouping-by()</userinput> parser</title>
    <indexterm>
        <primary>correlating messages</primary>
    </indexterm>
    <indexterm>
        <primary>correlate messages</primary>
    </indexterm>
    <indexterm>
        <primary>parsers</primary>
        <secondary>correlating</secondary>
    </indexterm>
    <indexterm>
        <primary>parsers</primary>
        <secondary>grouping-by()</secondary>
    </indexterm>
    <para>The &abbrev; application can correlate log messages that match a set of filters. This works similarly to SQL GROUP BY statements. Alternatively, you can also correlate log messages using pattern databases. For details, see <xref linkend="patterndb-correlation"/>.</para>

    <xi:include href="../../common/chunk/correlation-intro.xml" xmlns:xi="http://www.w3.org/2001/XInclude"/>

    <formalpara>
        <title>How the grouping-by() parser works</title>
        <para/>
    </formalpara>
    <synopsis>
    +--------------------+
    |Incoming log message|
    +--------------------+
              |
              |
              |
              |
              V
    +-------------------------------------------+    No
    |Does it match key(), scope(), and where()? +----------> Ignore message
    +-------------------------------------------+
              |
              |
              V
    Add message to context
              |
              |
              v                    No
    Is it a trigger() message or --------> Wait until timeout() or a new message
    has the timeout() expired?
             +
             |
             |
             v                              No
    Does the context match having()? +-------------> Close the context
            +                                         and do nothing
            |
            |
            v
    Inject the aggregate() log message and close the context
    </synopsis>
    <para>The <parameter>grouping-by()</parameter> parser has three options that determine if a message is added to a context: <parameter>scope()</parameter>, <parameter>key()</parameter>, and <parameter>where()</parameter>.</para>
    <itemizedlist>
        <listitem>
            <para>The <parameter>scope()</parameter> option acts as an early filter, selecting messages sent by the same process (<userinput>${HOST}${PROGRAM}${PID}</userinput> is identical), application (<userinput>${HOST}${PROGRAM}</userinput> is identical), or host.</para>
        </listitem>
        <listitem>
            <para>The <parameter>key()</parameter> identifies the context the message belongs to. (The value of the key must be the same for every message of the context.)</para>
        </listitem>
        <listitem>
            <para>To use a filter to further limit the messages that are added to the context, you can use the <parameter>where()</parameter> option.</para>
        </listitem>
    </itemizedlist>
    <para>The <parameter>timeout()</parameter> option determines how long a context is stored, that is, how long &abbrev; waits for related messages to arrive. If the group has a specific log message that ends the context (for example, a logout message), you can specify it using the <parameter>trigger()</parameter> option.</para>
    <para>When the context is closed, and the messages match the filter set in the <parameter>having()</parameter> option (or the <parameter>having()</parameter> option is not set), &abbrev; generates and sends the message set in the <parameter>aggregate()</parameter> option.</para>

    <xi:include href="../../common/wnt/note-message-context.xml" xmlns:xi="http://www.w3.org/2001/XInclude"/>

    <formalpara>
        <title>Declaration:</title>
        <para/>
    </formalpara>
    <synopsis>parser parser_name {
    grouping-by(
        key()
        having()
        aggregate()
        timeout()
    );
};</synopsis>

    <para>For the parser to work, you must set at least the following options: <parameter>key()</parameter>, <parameter>having()</parameter>, <parameter>aggregate()</parameter>, and either <parameter>timeout()</parameter> or <parameter>trigger()</parameter>.</para>

    <xi:include href="../../common/chunk/correlation-context-timeout.xml" xmlns:xi="http://www.w3.org/2001/XInclude"/>

    <example>
        <title>Correlating Linux Audit logs</title>
        <para>Linux audit logs tend to be broken into several log messages (generated as a list of lines). Usually, the related lines are close to each other in time, but multiple events can be logged at around the same time, which get mixed up in the output. The example below is the audit log for running <command>ntpdate</command>:</para>
        <synopsis>type=SYSCALL msg=audit(1440927434.124:40347): arch=c000003e syscall=59 success=yes exit=0 a0=7f121cef0b88 a1=7f121cef0c00 a2=7f121e690d98 a3=2 items=2 ppid=4312 pid=4347 auid=4294967295 uid=0 gid=0 euid=0 suid=0 fsuid=0 egid=0 sgid=0 fsgid=0 tty=(none) ses=4294967295 comm="ntpdate" exe="/usr/sbin/ntpdate" key=(null)
type=EXECVE msg=audit(1440927434.124:40347): argc=3 a0="/usr/sbin/ntpdate" a1="-s" a2="ntp.ubuntu.com"
type=CWD msg=audit(1440927434.124:40347):  cwd="/"
type=PATH msg=audit(1440927434.124:40347): item=0 name="/usr/sbin/ntpdate" inode=2006003 dev=08:01 mode=0100755 ouid=0 ogid=0 rdev=00:00 nametype=NORMAL
type=PATH msg=audit(1440927434.124:40347): item=1 name="/lib64/ld-linux-x86-64.so.2" inode=5243184 dev=08:01 mode=0100755 ouid=0 ogid=0 rdev=00:00 nametype=NORMAL
type=PROCTITLE msg=audit(1440927434.124:40347): proctitle=2F62696E2F7368002F7573722F7362696E2F6E7470646174652D64656269616E002D73</synopsis>
        <para>These lines are connected by their second field: <userinput>msg=audit(1440927434.124:40347)</userinput>. You can parse such messages using the <link linkend="linux-audit-parser">Linux Audit Parser of &abbrev;</link>, and then use the parsed <userinput>.auditd.msg</userinput> field to group the messages.</para>
        <synopsis>parser auditd_groupingby {
    grouping-by(
        key(".auditd.msg")
        aggregate(
            value($(format-json .auditd.*))
            )
        timeout(10)
    );
};</synopsis>
    </example>

    <section xml:id="referencing-previous-messages-grouping-by">
        <title>Referencing earlier messages of the context</title>
        <indexterm type="parameter">
            <primary>@distance</primary>
        </indexterm>
        <para>When creating the aggregated message, or in the various parameters of the <parameter>grouping-by()</parameter> parser, you can also refer to fields and values of earlier messages of the context by adding the <userinput>@&lt;distance-of-referenced-message-from-the-current&gt;</userinput> suffix to the macro. For example, if there are three log messages in a context, the <userinput>${HOST}@1</userinput> expression refers to the host field of the current (third) message in the context, the <userinput>${HOST}@2</userinput> expression refers to the host field of the previous (second) message in the context, <userinput>${PID}@3</userinput> to the PID of the first message, and so on. For example, the following message can be created from SSH login/logout messages: <userinput>An SSH session for ${SSH_USERNAME}@1 from ${SSH_CLIENT_ADDRESS}@2 closed. Session lasted from ${DATE}@2 to ${DATE}</userinput>.</para>
        <warning>
            <para>When referencing an earlier message of the context, always enclose the field name between braces, for example, <userinput>${PID}@3</userinput>. The reference will not work if you omit the braces.</para>
        </warning>
        <xi:include href="../../common/wnt/note-escape-at.xml" xmlns:xi="http://www.w3.org/2001/XInclude"/>
        <xi:include href="../../common/chunk/example-patterndb-referencing-earlier-values.xml" xmlns:xi="http://www.w3.org/2001/XInclude"/>
        <para>If you do not know in which message of the context contains the information you need, you can use the <parameter>grep</parameter> template function. For details, see <xref linkend="template-function-grep"/>.</para>
        <xi:include href="../../common/chunk/example-grep-template-function.xml" xmlns:xi="http://www.w3.org/2001/XInclude"/>
        <para>To perform calculations on fields that have numerical values, see <xref linkend="template-function-numerical"/>.</para>
    </section>

    <section xml:id="grouping-by-parser-options">
        <title>Options of <userinput>grouping-by</userinput> parsers</title>
        <para>The <parameter>grouping-by</parameter> has the following options.</para>
        <simplesect xml:id="grouping-by-parser-aggregate">
            <title>aggregate()</title>
            <indexterm>
              <primary>aggregate()</primary>
            </indexterm>
            <indexterm>
              <primary>grouping-by()</primary>
              <secondary>aggregate()</secondary>
            </indexterm>
            <informaltable frame="topbot" colsep="0" rowsep="0">
              <tgroup cols="2">
                  <colspec colnum="1" colwidth="50pt"/>
                  <tbody>
                      <row>
                          <entry>Synopsis:
                            <?dbhtml bgcolor="#D4D6EB" ?>
                            <?dbfo bgcolor="#D4D6EB" ?>
                          </entry>
                          <entry>aggregate()</entry>
                      </row>
                  </tbody>
              </tgroup>
            </informaltable>
            <para><emphasis role="bold">Description:</emphasis> Specifies the message that &abbrev; generates when the context is closed. Note that the <parameter>aggregate()</parameter> option has access to every message of the context, and has the following options:</para>
            <itemizedlist>
                <listitem>
                    <indexterm type="parameter">
                        <primary>inherit-mode()</primary>
                    </indexterm>

                    <xi:include href="../../common/chunk/option-inherit-mode.xml" xmlns:xi="http://www.w3.org/2001/XInclude"/>

                    <para>For details on the message context, see <xref linkend="grouping-by-parser"/>.</para>
                </listitem>
                <listitem>
                    <indexterm type="parameter">
                        <primary>tags()</primary>
                    </indexterm>
                    <para><emphasis>tags</emphasis>: </para>
                </listitem>
                <listitem>
                    <indexterm type="parameter">
                        <primary>value()</primary>
                    </indexterm>
                    <para><emphasis>value</emphasis>: The text of the generated message. You can include text, macros, template functions, and you can also reference every message of the context. For details on accessing other messages of the context, see <xref linkend="referencing-previous-messages-grouping-by"/>.</para>
                </listitem>
            </itemizedlist>
        </simplesect>
        <simplesect xml:id="grouping-by-parser-having">
            <title>having()</title>
            <indexterm>
              <primary>having()</primary>
            </indexterm>
            <indexterm>
              <primary>grouping-by()</primary>
              <secondary>having()</secondary>
            </indexterm>
            <informaltable frame="topbot" colsep="0" rowsep="0">
              <tgroup cols="2">
                  <colspec colnum="1" colwidth="50pt"/>
                  <tbody>
                      <row>
                          <entry>Synopsis:
                            <?dbhtml bgcolor="#D4D6EB" ?>
                            <?dbfo bgcolor="#D4D6EB" ?>
                          </entry>
                          <entry>having()</entry>
                      </row>
                  </tbody>
              </tgroup>
            </informaltable>
            <para><emphasis role="bold">Description:</emphasis> Specifies a filter: &abbrev; generates the aggregate message only if the result of the filter expression is true. Note that the <parameter>having()</parameter> filter has access to every message of the context. For details on accessing other messages of the context, see <xref linkend="referencing-previous-messages-grouping-by"/>.</para>
        </simplesect>
        <simplesect xml:id="grouping-by-parser-inject-mode">
            <title>inject-mode()</title>
            <indexterm>
              <primary>inject-mode()</primary>
            </indexterm>
            <indexterm>
              <primary>grouping-by()</primary>
              <secondary>inject-mode()</secondary>
            </indexterm>
            <informaltable frame="topbot" colsep="0" rowsep="0">
              <tgroup cols="2">
                  <colspec colnum="1" colwidth="50pt"/>
                  <tbody>
                      <row>
                          <entry>Synopsis:
                            <?dbhtml bgcolor="#D4D6EB" ?>
                            <?dbfo bgcolor="#D4D6EB" ?>
                          </entry>
                          <entry>inject-mode()</entry>
                      </row>
                  </tbody>
              </tgroup>
            </informaltable>
            <para><emphasis role="bold">Description:</emphasis> By default, the aggregated message that &abbrev; generates is injected into the same place where the <parameter>grouping-by()</parameter> statement is referenced in the log path. To post the generated message into the <parameter>internal()</parameter> source instead, use the <parameter>inject-mode()</parameter> option in the definition of the parser.</para>
            <example>
                <title>Sending triggered messages to the <parameter>internal()</parameter> source</title>
                <para>To send the generated messages to the <parameter>internal</parameter> source, use the <userinput>inject-mode("internal")</userinput> option:</para>
                <synopsis>parser p_grouping-by {grouping-by(
    ...
    inject-mode("internal")
);};</synopsis>
                <para>To inject the generated messages where the parser is referenced, use the <userinput>inject-mode("pass-through")</userinput> option:</para>
                <synopsis>parser p_grouping-by {grouping-by(
    ...
    inject-mode("pass-through")
);};</synopsis>
            </example>
            <para>The generated message must be configured in the pattern database rule. It is possible to create an entire message, use macros and values extracted from the original message with pattern database, and so on.</para>
        </simplesect>
        <simplesect xml:id="grouping-by-parser-key">
            <title>key()</title>
            <indexterm>
              <primary>key()</primary>
            </indexterm>
            <indexterm>
              <primary>grouping-by()</primary>
              <secondary>key()</secondary>
            </indexterm>
            <informaltable frame="topbot" colsep="0" rowsep="0">
              <tgroup cols="2">
                  <colspec colnum="1" colwidth="50pt"/>
                  <tbody>
                      <row>
                          <entry>Synopsis:
                            <?dbhtml bgcolor="#D4D6EB" ?>
                            <?dbfo bgcolor="#D4D6EB" ?>
                          </entry>
                          <entry>key()</entry>
                      </row>
                  </tbody>
              </tgroup>
            </informaltable>
            <para><emphasis role="bold">Description:</emphasis> Specifies the key (that is, the name of a name-value pair) that every message must have to be added to the context. The value of the key must be the same for every message of the context. For example, this can be a session-id parsed from firewall messages, and so on.</para>
        </simplesect>
        <simplesect xml:id="grouping-by-parser-scope">
            <title>scope()</title>
            <indexterm>
              <primary>scope()</primary>
            </indexterm>
            <indexterm>
              <primary>grouping-by()</primary>
              <secondary>scope()</secondary>
            </indexterm>
            <informaltable frame="topbot" colsep="0" rowsep="0">
              <tgroup cols="2">
                  <colspec colnum="1" colwidth="50pt"/>
                  <tbody>
                      <row>
                          <entry>Synopsis:
                            <?dbhtml bgcolor="#D4D6EB" ?>
                            <?dbfo bgcolor="#D4D6EB" ?>
                          </entry>
                          <entry>scope()</entry>
                      </row>
                  </tbody>
              </tgroup>
            </informaltable>
            <para><emphasis role="bold">Description:</emphasis> Specifies which messages belong to the same context. The following values are available:</para>

            <xi:include href="../../common/chunk/correlation-context-scope.xml" xmlns:xi="http://www.w3.org/2001/XInclude"/>

        </simplesect>
        <simplesect xml:id="grouping-by-parser-timeout">
            <title>timeout()</title>
            <indexterm>
              <primary>timeout()</primary>
            </indexterm>
            <indexterm>
              <primary>grouping-by()</primary>
              <secondary>timeout()</secondary>
            </indexterm>
            <informaltable frame="topbot" colsep="0" rowsep="0">
              <tgroup cols="2">
                  <colspec colnum="1" colwidth="50pt"/>
                  <tbody>
                      <row>
                          <entry>Synopsis:
                            <?dbhtml bgcolor="#D4D6EB" ?>
                            <?dbfo bgcolor="#D4D6EB" ?>
                          </entry>
                          <entry>timeout([seconds])</entry>
                      </row>
                  </tbody>
              </tgroup>
            </informaltable>
            <para><emphasis role="bold">Description:</emphasis> Specifies the maximum time to wait for all messages of the context to arrive. If no new message is added to the context during this period, the context is assumed to be complete and &abbrev; generates and sends the triggered message (specified in the <link linkend="grouping-by-parser-aggregate">aggregate()</link> option), and clears the context. If a new message is added to the context, the timeout period is restarted.</para>
        </simplesect>
        <simplesect xml:id="grouping-by-parser-trigger">
            <title>trigger()</title>
            <indexterm>
              <primary>trigger()</primary>
            </indexterm>
            <indexterm>
              <primary>grouping-by()</primary>
              <secondary>trigger()</secondary>
            </indexterm>
            <informaltable frame="topbot" colsep="0" rowsep="0">
              <tgroup cols="2">
                  <colspec colnum="1" colwidth="50pt"/>
                  <tbody>
                      <row>
                          <entry>Synopsis:
                            <?dbhtml bgcolor="#D4D6EB" ?>
                            <?dbfo bgcolor="#D4D6EB" ?>
                          </entry>
                          <entry>trigger()</entry>
                      </row>
                  </tbody>
              </tgroup>
            </informaltable>
            <para><emphasis role="bold">Description:</emphasis> A filter that specifies the final message of the context. If the filter matches the incoming message, &abbrev; generates and sends the triggered message (specified in the <link linkend="grouping-by-parser-aggregate">aggregate()</link> option), and clears the context.</para>
        </simplesect>
        <simplesect xml:id="grouping-by-parser-where">
            <title>where()</title>
            <indexterm>
              <primary>where()</primary>
            </indexterm>
            <indexterm>
              <primary>grouping-by()</primary>
              <secondary>where()</secondary>
            </indexterm>
            <informaltable frame="topbot" colsep="0" rowsep="0">
              <tgroup cols="2">
                  <colspec colnum="1" colwidth="50pt"/>
                  <tbody>
                      <row>
                          <entry>Synopsis:
                            <?dbhtml bgcolor="#D4D6EB" ?>
                            <?dbfo bgcolor="#D4D6EB" ?>
                          </entry>
                          <entry>where()</entry>
                      </row>
                  </tbody>
              </tgroup>
            </informaltable>
            <para><emphasis role="bold">Description:</emphasis> Specifies a filter condition. Messages not matching the filter will not be added to the context. Note that the <parameter>where()</parameter> filter has access only to the current message.</para>
        </simplesect>
    </section>
</section>
