<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE section
 [  <!ENTITY % entities SYSTEM "../../common/syslog-ng-entities.ent">
 %entities;]>
<section xml:id="monitor-syslog-ng-statistics-metrics" xmlns="http://docbook.org/ns/docbook" version="5.0">
    <title>The <parameter>monitoring()</parameter> source</title>
    <indexterm>
        <primary>source drivers</primary>
        <secondary><parameter>monitoring()</parameter> driver</secondary>
    </indexterm>
    <indexterm>
        <primary>source drivers</primary>
        <secondary><parameter>monitoring-welf()</parameter> driver</secondary>
    </indexterm>
    <indexterm>
        <primary>statistics</primary>
    </indexterm>
    <indexterm>
        <primary>log statistics</primary>
    </indexterm>
    <indexterm>
        <primary>message statistics</primary>
    </indexterm>
    <indexterm>
        <primary>message counters</primary>
    </indexterm>
    <indexterm>
        <primary>monitoring &abbrev;</primary>
    </indexterm>
    <para>The <parameter>monitoring()</parameter> source allows you to select which statistics of &abbrev; you want to monitor. In addition, the statistics are available as structured name-value pairs, so you can format the output similarly to other log messages. That way, you can easily convert the statistics and metrics, for example, into JSON or WELF format. That way, you can send the statistics of your log messages into a monitoring solution (for example, Riemann, Redis, or Graphite).</para>
    <para>The <parameter>monitoring()</parameter> source queries the statistics (counters) that &abbrev; collects, formats them, and optionally resets the counters. The <parameter>monitoring()</parameter> source emits only these messages, making it easy to route them to their appropriate destination. The <link linkend="global-option-stats-level"><parameter>stats-level()</parameter> global option</link> determines exactly which statistics &abbrev; collects.</para>
    <formalpara>
        <title>Declaration:</title>
        <para/>
    </formalpara>
    <synopsis>source s_monitor{
    monitoring(
        query("*")
    );};</synopsis>
    <example xml:id="example-source-monitor-json">
        <title>Save all statistics into a file in JSON format</title>
        <para>The following configuration increases the <parameter>stats-level()</parameter> option to 3, and generates a JSON-formatted message every 10 seconds. The generated message contains every available statistics, and is saved into the <filename>/var/log/syslog-ng-statistics.log</filename> file.</para>
        <synopsis>@version: &techversion;
options{
    stats-level(3);
    keep-hostname(no);
};
source s_monitor{ monitoring(
    query("*")
    freq(10)
    message-template('$(format-json --scope nv_pairs)')
    );};
destination d_file {
    file("/var/log/syslog-ng-statistics.log");
};
log {
    source(s_monitor);
    destination(d_file);
};</synopsis>
    <para>The generated message is similar to this one:</para>
    <synopsis>[2017-04-03T14:00:31.786133] Outgoing message; message='AprÂ  3 14:00:31 example-hostname syslog-ng[12281]: {"src":{"severity":{"7":{"processed":"0"},"6":{"processed":"0"},"5":{"processed":"0"},"4":{"processed":"0"},"3":{"processed":"0"},"2":{"processed":"0"},"1":{"processed":"0"},"0":{"processed":"0"}},"monitoring":{"s_monitor#0":{"stamp":"0","processed":"0"}},"facility":{"other":{"processed":"0"},"9":{"processed":"0"},"8":{"processed":"0"},"7":{"processed":"0"},"6":{"processed":"0"},"5":{"processed":"0"},"4":{"processed":"0"},"3":{"processed":"0"},"23":{"processed":"0"},"22":{"processed":"0"},"21":{"processed":"0"},"20":{"processed":"0"},"2":{"processed":"0"},"19":{"processed":"0"},"18":{"processed":"0"},"17":{"processed":"0"},"16":{"processed":"0"},"15":{"processed":"0"},"14":{"processed":"0"},"13":{"processed":"0"},"12":{"processed":"0"},"11":{"processed":"0"},"10":{"processed":"0"},"1":{"processed":"0"},"0":{"processed":"0"}}},"source":{"s_monitor":{"processed":"0"}},"global":{"sdata_updates":{"processed":"0"},"payload_reallocs":{"processed":"2"},"msg_clones":{"processed":"0"}},"destination":{"d_file":{"processed":"0"}},"center":{"received":{"processed":"0"},"queued":{"processed":"0"}},"PROGRAM":"syslog-ng","PID":"12281"}\x0a'</synopsis>
    <para>For reference, the JSON part in a readable format is:</para>
    <synopsis>{
  "center" : {
      "queued" : { "processed" : "0" },
      "received" : { "processed" : "0" }
    },
  "destination" : { "d_file" : { "processed" : "0" } },
  "global" : {
      "msg_clones" : { "processed" : "0" },
      "payload_reallocs" : { "processed" : "2" },
      "sdata_updates" : { "processed" : "0" }
    },
  "PID" : "12281",
  "PROGRAM" : "syslog-ng",
  "source" : { "s_monitor" : { "processed" : "0" } },
  "src" : {
      "facility" : {
          "0" : { "processed" : "0" },
          "1" : { "processed" : "0" },
          "2" : { "processed" : "0" },
          "3" : { "processed" : "0" },
          "4" : { "processed" : "0" },
          "5" : { "processed" : "0" },
          "6" : { "processed" : "0" },
          "7" : { "processed" : "0" },
          "8" : { "processed" : "0" },
          "9" : { "processed" : "0" },
          "10" : { "processed" : "0" },
          "11" : { "processed" : "0" },
          "12" : { "processed" : "0" },
          "13" : { "processed" : "0" },
          "14" : { "processed" : "0" },
          "15" : { "processed" : "0" },
          "16" : { "processed" : "0" },
          "17" : { "processed" : "0" },
          "18" : { "processed" : "0" },
          "19" : { "processed" : "0" },
          "20" : { "processed" : "0" },
          "21" : { "processed" : "0" },
          "22" : { "processed" : "0" },
          "23" : { "processed" : "0" },
          "other" : { "processed" : "0" }
        },
      "monitoring" : { "s_monitor#0" : {
              "processed" : "0",
              "stamp" : "0"
            } },
      "severity" : {
          "0" : { "processed" : "0" },
          "1" : { "processed" : "0" },
          "2" : { "processed" : "0" },
          "3" : { "processed" : "0" },
          "4" : { "processed" : "0" },
          "5" : { "processed" : "0" },
          "6" : { "processed" : "0" },
          "7" : { "processed" : "0" }
        }
    }
}</synopsis>
    </example>

    <section xml:id="reference-source-monitoring">
        <title><parameter>monitoring()</parameter> source options</title>
        <para>The <parameter>monitoring()</parameter> driver has the following options. Only the <parameter>query()</parameter> option is required, other options are optional.</para>
        <simplesect>
            <title>clear-on-read()</title>
            <indexterm>
                <primary>clear-on-read()</primary>
            </indexterm>
            <indexterm>
                <primary>clear_on_read()</primary>
            </indexterm>
            <informaltable frame="topbot" colsep="0" rowsep="0">
                <tgroup cols="2">
                    <colspec colnum="1" colwidth="40pt"/>
                    <tbody>
                        <row>
                            <entry>Type: <?dbhtml bgcolor="#D4D6EB" ?>
<?dbfo bgcolor="#D4D6EB" ?>
                            </entry>
                            <entry>boolean</entry>
                        </row>
                        <row>
                            <entry>Default: <?dbhtml bgcolor="#D4D6EB" ?>
<?dbfo bgcolor="#D4D6EB" ?>
                            </entry>
                            <entry>no</entry>
                        </row>
                    </tbody>
                </tgroup>
            </informaltable>
            <para><emphasis role="bold">Description</emphasis>: Reset the counters after reading. Note that if a destination is not available, &abbrev; will not reset its counter even if <parameter>clear-on-read()</parameter> is set to <userinput>yes</userinput>.</para>
            <para>If you use multiple monitoring source, and you use the <parameter>clear-on-read()</parameter> parameter, make sure to adjust the queries appropriately. Overlapping queries that read and reset the same counters result in incorrect statistics.</para>
        </simplesect>
        <simplesect>
            <title>freq()</title>
            <indexterm>
                <primary>freq()</primary>
            </indexterm>
            <informaltable frame="topbot" colsep="0" rowsep="0">
                <tgroup cols="2">
                    <colspec colnum="1" colwidth="40pt"/>
                    <tbody>
                        <row>
                            <entry>Type: <?dbhtml bgcolor="#D4D6EB" ?>
<?dbfo bgcolor="#D4D6EB" ?>
                            </entry>
                            <entry>integer</entry>
                        </row>
                        <row>
                            <entry>Default: <?dbhtml bgcolor="#D4D6EB" ?>
<?dbfo bgcolor="#D4D6EB" ?>
                            </entry>
                            <entry>600 [seconds]</entry>
                        </row>
                    </tbody>
                </tgroup>
            </informaltable>
            <para><emphasis role="bold">Description</emphasis>: Specifies how often does &abbrev; execute the query and send a statistics message.</para>
        </simplesect>
        <simplesect>
            <title>message-template()</title>
            <indexterm>
                <primary>message-template()</primary>
            </indexterm>
            <indexterm>
                <primary>message_template()</primary>
            </indexterm>
            <informaltable frame="topbot" colsep="0" rowsep="0">
                <tgroup cols="2">
                    <colspec colnum="1" colwidth="40pt"/>
                    <tbody>
                        <row>
                            <entry>Type: <?dbhtml bgcolor="#D4D6EB" ?>
<?dbfo bgcolor="#D4D6EB" ?>
                            </entry>
                            <entry>string</entry>
                        </row>
                        <row>
                            <entry>Default: <?dbhtml bgcolor="#D4D6EB" ?>
<?dbfo bgcolor="#D4D6EB" ?>
                            </entry>
                            <entry> N/A </entry>
                        </row>
                    </tbody>
                </tgroup>
            </informaltable>
            <para><emphasis role="bold">Description</emphasis>: Specifies how the message containing the queried statistics is formatted. You can use macros and template functions in the format string. For example, you can format the message as a JSON object:</para>
            <synopsis>source s_monitor{ monitoring(
    query("*")
    freq(10)
    message-template('$(format-json --scope nv_pairs)')
    );};</synopsis>
            <para>Note that here you can only format the payload of the message (that is the, ${MESSAGE} part). You can format the headers or other parts of the outgoing message in the destination driver.</para>
        </simplesect>
        <simplesect>
            <title>query()</title>
            <indexterm>
                <primary>query()</primary>
            </indexterm>
            <informaltable frame="topbot" colsep="0" rowsep="0">
                <tgroup cols="2">
                    <colspec colnum="1" colwidth="40pt"/>
                    <tbody>
                        <row>
                            <entry>Type: <?dbhtml bgcolor="#D4D6EB" ?>
<?dbfo bgcolor="#D4D6EB" ?>
                            </entry>
                            <entry>string</entry>
                        </row>
                        <row>
                            <entry>Default: <?dbhtml bgcolor="#D4D6EB" ?>
<?dbfo bgcolor="#D4D6EB" ?>
                            </entry>
                            <entry> N/A </entry>
                        </row>
                    </tbody>
                </tgroup>
            </informaltable>
            <para><emphasis role="bold">Description</emphasis>: Specifies which statistical counters will be included in the messages. Note that the list of available counters depends on your &abbrev; configuration (mainly the configured sources and destinations) and on the <link linkend="global-option-stats-level"><parameter>stats-level()</parameter> global option</link>. The <userinput>*</userinput> string includes every available counters. The syntax of the <parameter>query</parameter> option is identical to the <command>syslog-ng-ctl query get &lt;query&gt;</command> command.</para>
            <synopsis>source s_monitor{ monitoring(
    query("*")
    );};</synopsis>
            <para>For example, the <userinput>"destination*"</userinput> query lists the configured destinations, and the metrics related to each destination. An example output:</para>
            <synopsis>destination.java.d_elastic#0.java_dst(ElasticSearch,elasticsearch-syslog-ng-test,t7cde889529c034aea9ec_micek).stats.dropped: 0
destination.java.d_elastic#0.java_dst(ElasticSearch,elasticsearch-syslog-ng-test,t7cde889529c034aea9ec_micek).stats.processed: 0
destination.java.d_elastic#0.java_dst(ElasticSearch,elasticsearch-syslog-ng-test,t7cde889529c034aea9ec_micek).stats.stored: 0
destination.d_elastic.stats.processed: 0</synopsis>
        </simplesect>
    </section>

    <section xml:id="source-monitoring-welf">
        <title>The <parameter>monitoring-welf()</parameter> source</title>
        <para>This source is actually preconfigured <parameter>monitoring()</parameter> source that generates statistics messages in WELF format. Starting with <phrase condition="pe">&abbrev; version 7.0.2</phrase>, &abbrev; uses this driver for new installations to generate statistics.</para>
        <synopsis>@version: &techversion;
@include 'scl.conf'
options {
    stats_level(3);
};
source s_monitoring_welf {
    monitoring-welf(freq(1) query('*'));
};
destination d_file {
    file("/tmp/output.txt");
};
log {
    source(s_monitoring_welf);
    destination(d_file);
};</synopsis>
        <para>The output is similar to the following:</para>
        <synopsis>Apr  3 14:03:26 example-host syslog-ng[12363]: PID=12363 PROGRAM=syslog-ng center.queued.processed=0 center.received.processed=0 destination.d_file.processed=0 global.msg_clones.processed=0 global.payload_reallocs.processed=2 global.sdata_updates.processed=0 source.s_monitoring_welf.processed=0 src.facility.0.processed=0 src.facility.1.processed=0 src.facility.10.processed=0 src.facility.11.processed=0 src.facility.12.processed=0 src.facility.13.processed=0 src.facility.14.processed=0 src.facility.15.processed=0 src.facility.16.processed=0 src.facility.17.processed=0 src.facility.18.processed=0 src.facility.19.processed=0 src.facility.2.processed=0 src.facility.20.processed=0 src.facility.21.processed=0 src.facility.22.processed=0 src.facility.23.processed=0 src.facility.3.processed=0 src.facility.4.processed=0 src.facility.5.processed=0 src.facility.6.processed=0 src.facility.7.processed=0 src.facility.8.processed=0 src.facility.9.processed=0 src.facility.other.processed=0 src.monitoring.s_monitoring_welf#0.processed=0 src.monitoring.s_monitoring_welf#0.stamp=0 src.severity.0.processed=0 src.severity.1.processed=0 src.severity.2.processed=0 src.severity.3.processed=0 src.severity.4.processed=0 src.severity.5.processed=0 src.severity.6.processed=0 src.severity.7.processed=0\x0a'</synopsis>
    </section>
</section>
