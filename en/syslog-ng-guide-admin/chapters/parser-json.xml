<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE section
 [  <!ENTITY % entities SYSTEM "../../common/syslog-ng-entities.ent">
 %entities;]>
<section xml:id="json-parser" xmlns="http://docbook.org/ns/docbook" version="5.0">
    <title>The JSON parser</title>
    <indexterm>
        <primary>segmenting messages</primary>
    </indexterm>
    <indexterm>
        <primary>JSON parsers</primary>
    </indexterm>
    <indexterm>
        <primary>splitting messages</primary>
    </indexterm>
    <indexterm>
        <primary>parsers</primary>
        <secondary>json-parser</secondary>
    </indexterm>
    <para>JavaScript Object Notation (JSON) is a text-based open standard designed for human-readable data interchange. It is used primarily to transmit data between a server and web application, serving as an alternative to XML. It is described in <link xmlns:ns1="http://www.w3.org/1999/xlink" ns1:href="https://tools.ietf.org/html/rfc4627">RFC 4627</link>. The &abbrev; application can separate parts of incoming JSON-encoded log messages to name-value pairs. For details on using value-pairs in &abbrev; see <xref linkend="concepts-value-pairs"/>.</para>
    <para>You can refer to the separated parts of the JSON message using the key of the JSON object as a macro. For example, if the JSON contains <userinput>{"KEY1":"value1","KEY2":"value2"}</userinput>, you can refer to the values as <userinput>${KEY1}</userinput> and <userinput>${KEY2}</userinput>. If the JSON content is structured, &abbrev; converts it to dot-notation-format. For example, to access the value of the following structure <userinput>{"KEY1": {"KEY2": "VALUE"}}</userinput>, use the <userinput>${KEY1.KEY2}</userinput> macro.</para>
    <warning>
        <para>If the names of keys in the JSON content are the same as the names of &abbrev; soft macros, the value from the JSON content will overwrite the value of the macro. For example, the <userinput>{"PROGRAM":"value1","MESSAGE":"value2"}</userinput> JSON content will overwrite the <userinput>${PROGRAM}</userinput> and <userinput>${MESSAGE}</userinput> macros. To avoid overwriting such macros, use the <parameter>prefix()</parameter> option.</para>
        <para>Hard macros cannot be modified, so they will not be overwritten. For details on the macro types, see <xref linkend="macros-hard-vs-soft"/>.</para>
    </warning>
    <note>
        <para>The JSON parser currently supports only integer, double and string values when interpreting JSON structures. As syslog-ng does not handle different data types internally, the JSON parser converts all JSON data to string values. In case of boolean types, the value is converted to 'TRUE' or 'FALSE' as their string representation.</para>
        <para>The JSON parser discards messages if it cannot parse them as JSON messages, so it acts as a JSON-filter as well.</para>
    </note>
    <para>To create a JSON parser, define a parser that has the <parameter>json-parser()</parameter> option. Defining the prefix and the marker are optional. By default, the parser will process the <userinput>${MESSAGE}</userinput> part of the log message. To process other parts of a log message with the JSON parser, use the <parameter>template()</parameter> option. You can also define the parser inline in the log path.</para>
    <formalpara>
        <title>Declaration:</title>
        <para/>
    </formalpara>
    <synopsis>parser parser_name {
    json-parser(
        marker()
        prefix()
    );
};</synopsis>
    <example>
        <title>Using a JSON parser</title>
        <para>In the following example, the source is a JSON encoded log message. The syslog parser is disabled, so that &abbrev; does not parse the message: <userinput>flags(no-parse)</userinput>. The json-parser inserts "<userinput>.json.</userinput>" prefix before all extracted name-value pairs. The destination is a file, that uses the <parameter>format-json</parameter> template function. Every name-value pair that begins with a dot ("<userinput>.</userinput>") character will be written to the file (<userinput>dot-nv-pairs</userinput>). The log line connects the source, the destination and the parser.</para>
        <synopsis>source s_json {
    network(port(21514) flags(no-parse));
};

destination d_json {
    file("/tmp/test.json"
        template("$(format-json --scope dot-nv-pairs)\n"));
};

parser p_json {
    json-parser (prefix(".json."));
};

log {
    source(s_json);
    parser(p_json);
    destination(d_json);
};</synopsis>
        <para>You can also define the parser inline in the log path.</para>
        <synopsis>source s_json {
    network(port(21514) flags(no-parse));
};

destination d_json {
    file("/tmp/test.json"
        template("$(format-json --scope dot-nv-pairs)\n"));
};

log {
    source(s_json);
    parser {
        json-parser (prefix(".json."));
    };
    destination(d_json);
};</synopsis>
    </example>
    <section xml:id="json-parser-options">
        <title>Options of JSON parsers</title>
        <para>The JSON parser has the following options.</para>
        <simplesect xml:id="json-parser-extract-prefix">
            <title>extract-prefix()</title>
            <indexterm>
                <primary>extract-prefix()</primary>
            </indexterm>
            <indexterm>
                <primary>extract_prefix()</primary>
            </indexterm>
            <informaltable frame="topbot" colsep="0" rowsep="0">
                <tgroup cols="2">
                    <colspec colnum="1" colwidth="50pt"/>
                    <tbody>
                        <row>
                            <entry>Synopsis:
									<?dbhtml bgcolor="#D4D6EB" ?>
<?dbfo bgcolor="#D4D6EB" ?>
                            </entry>
                            <entry>extract-prefix()</entry>
                        </row>
                    </tbody>
                </tgroup>
            </informaltable>
            <para><emphasis role="bold">Description:</emphasis> Extract only the specified subtree from the JSON message. Use the dot-notation to specify the subtree. The rest of the message will be ignored. For example, assuming that the incoming object is named <userinput>msg</userinput>, the <userinput>json-parser(extract-prefix("foo.bar[5]"));</userinput> &abbrev; parser is equivalent to the <userinput>msg.foo.bar[5]</userinput> javascript code. Note that the resulting expression must be a JSON object, so that &abbrev; can extract its members into name-value pairs.</para>
            <para>This feature also works when the top-level object is an array, because you can use an array index at the first indirection level, for example: <userinput>json-parser(extract-prefix("[5]"))</userinput>, which is equivalent to <userinput>msg[5]</userinput>.</para>
            <para>In addition to alphanumeric characters, the key of the JSON object can contain the following characters: <userinput>!"#$%&amp;'()*+,-/:;&lt;=&gt;?@\^_`{|}~</userinput></para>
            <para>It cannot contain the following characters: <userinput>.[]</userinput></para>
            <example>
                <title>Convert logstash eventlog format v0 to v1</title>
                <para>The following parser converts messages in the logstash eventlog v0 format to the v1 format.</para>
                <synopsis>parser p_jsoneventv0 {
  channel {
    parser { json-parser(extract-prefix("@fields")); };
    parser { json-parser(prefix(".json.")); };
    rewrite {
      set("1" value("@version"));
      set("${.json.@timestamp}" value("@timestamp"));
      set("${.json.@message}" value("message"));
    };
  };
};</synopsis>
            </example>
        </simplesect>
        <simplesect xml:id="json-parser-marker">
            <title>marker</title>
            <indexterm type="parameter">
                <primary>marker</primary>
            </indexterm>
            <informaltable frame="topbot" colsep="0" rowsep="0">
                <tgroup cols="2">
                    <colspec colnum="1" colwidth="50pt"/>
                    <tbody>
                        <row>
                            <entry>Synopsis:
									<?dbhtml bgcolor="#D4D6EB" ?>
<?dbfo bgcolor="#D4D6EB" ?>
                            </entry>
                            <entry>marker()</entry>
                        </row>
                    </tbody>
                </tgroup>
            </informaltable>
            <para><emphasis role="bold">Description:</emphasis> Use a marker in case of mixed log messages, to identify JSON encoded messages for the parser.</para>
            <para>Some logging implementations require a marker to be set before the JSON payload. The JSON parser is able to find these markers and parse the message only if it is present.</para>
            <example>
                <title>Using the marker option in JSON parser</title>
                <para>This json parser parses log messages which use the "@cee:" marker in front of the json payload. It inserts "<userinput>.cee.</userinput>" in front of the name of name-value pairs, so later on it is easier to find name-value pairs that were parsed using this parser. (For details on selecting name-value pairs, see <xref linkend="options-value-pairs"/>.)</para>
                <synopsis>parser {
        json-parser(
            marker("@cee:")
            prefix(".cee.")
        );
    };</synopsis>
            </example>
        </simplesect>
        <simplesect xml:id="json-parser-prefix">
            <xi:include href="../../common/chunk/option-parser-prefix.xml" xmlns:xi="http://www.w3.org/2001/XInclude"/>
        </simplesect>
        <simplesect>
            <xi:include href="../../common/chunk/option-parser-template.xml" xmlns:xi="http://www.w3.org/2001/XInclude"/>
        </simplesect>
    </section>
</section>
