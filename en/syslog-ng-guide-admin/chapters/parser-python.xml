<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE section
[
<!ENTITY % entities SYSTEM "../../shared/syslog-ng-entities.ent">
%entities;
]>
<section xml:id="python-parser" xmlns="http://docbook.org/ns/docbook" version="5.0">
    <title>The Python Parser</title>
    <indexterm>
        <primary>segmenting messages</primary>
    </indexterm>
    <indexterm>
        <primary>python parser</primary>
    </indexterm>
    <indexterm>
        <primary>custom python parser</primary>
    </indexterm>
    <indexterm>
        <primary>parsers</primary>
        <secondary>python</secondary>
    </indexterm>
    <para>The Python Log Parser allows you to write your own parser in Python. Practically, that way you can process the log message (or parts of the log message) any way you need. For example, you can import external Python modules to process the messages, query databases to enrich the messages with additional data, and many other things.</para>
    <xi:include href="../../shared/chunk/python-blocks.xml" xmlns:xi="http://www.w3.org/2001/XInclude"/>
    <formalpara>
        <title>Declaration:</title>
        <para/>
    </formalpara>
    <para>Python parsers consist of two parts. The first is a &abbrev; parser object that you use in your &abbrev; configuration, for example, in the log path. This parser references a Python class, which is the second part of the Python parsers. The Python class processes the log messages it receives, and can do virtually anything that you can code in Python.</para>
    <synopsis>parser &lt;name_of_the_python_parser&gt;{
  python(
    class("&lt;name_of_the_python_class_executed_by_the_parser&gt;")
  );
};

python {
import re
class MyParser(object):
    def init(self, options):
        '''Optional. This method is executed when syslog-ng is started or reloaded.'''
        return True
    def deinit(self):
        '''Optional. This method is executed when syslog-ng is stopped or reloaded.'''
        return True
    def parse(self, msg):
        '''Required. This method receives and processes the log message.'''
        return True
};</synopsis>
    <simplesect xml:id="python-parser-methods">
        <title>Methods of the python() parser</title>
        <formalpara>
            <title>The <parameter>init (self, options)</parameter> method (optional)</title>
            <para/>
        </formalpara>
        <para>The &abbrev; application initializes Python objects only when it is started or reloaded. That means it keeps the state of internal variables while &abbrev; is running. The <parameter>init</parameter> method is executed as part of the initialization. You can perform any initialization steps that are necessary for your parser to work. For example, if you want to perform a lookup from a file or a database, you can open the file or connect to the database here, or you can initialize a counter that you will increase in the <parameter>parse()</parameter> method.</para>
        <para>The return value of the <parameter>init()</parameter> method must be <userinput>True</userinput>. If it returns <userinput>False</userinput>, or raises an exception, &abbrev; will not start.</para>
        <para><userinput>options</userinput>: This optional argument contains the contents of the <parameter>options()</parameter> parameter of the parser object as a Python dict.</para>
        <synopsis>parser my_python_parser{
  python(
    class("MyParser")
    options("regex", "seq: (?P&lt;seq&gt;\\d+), thread: (?P&lt;thread&gt;\\d+), runid: (?P&lt;runid&gt;\\d+), stamp: (?P&lt;stamp&gt;[^ ]+) (?P&lt;padding&gt;.*$)")
  );
};
class MyParser(object):
    def init(self, options):
        pattern = options["regex"]
        self.regex = re.compile(pattern)
        self.counter = 0
        return True</synopsis>
        <formalpara>
            <title>The <parameter>parse(self, log_message)</parameter> method</title>
            <para/>
        </formalpara>
        <para>The <parameter>parse()</parameter> method processes the log messages it receives, and can do virtually anything that you can code in Python. This method is required, otherwise &abbrev; will not start.</para>
        <para>The return value of the <parameter>parse()</parameter> method must be <userinput>True</userinput>. If it returns <userinput>False</userinput>, or raises an exception, &abbrev; will drop the message.</para>
        <xi:include href="../../shared/chunk/python-blocks-nvpairs.xml" xmlns:xi="http://www.w3.org/2001/XInclude"/>
        <formalpara>
            <title>The <parameter>deinit(self)</parameter> method (optional)</title>
            <para/>
        </formalpara>
        <para>This method is executed when &abbrev; is stopped or reloaded.</para>
        <xi:include href="../../shared/wnt/warning-python-parser-deinit.xml" xmlns:xi="http://www.w3.org/2001/XInclude"/>
    </simplesect>
    <simplesect xml:id="python-parser-example">
        <title>Example: Parse loggen logs</title>
        <para>The following sample code parses the messages of the <command>loggen</command> tool (for details, see <xref linkend="loggen.1"/>). The following is a sample loggen message:</para>
        <synopsis>&lt;38&gt;2017-04-05T12:16:46 localhost prg00000[1234]: seq: 0000000000, thread: 0000, runid: 1491387406, stamp: 2017-04-05T12:16:46 PADDPADDPADDPADDPADDPADDPADDPADDPADDPADDPADDPADDPADDPADDPADDPADDPADDPADDPADDPADDPADDPADDPADDPADDPADDPADDPADDPADDPADDPADDPADDPADD</synopsis>
        <para>The &abbrev; parser object references the LoggenParser class and passes a set of regular expressions to parse the loggen messages. The <userinput>init()</userinput> method of the LoggenParser class compiles these expressions into a pattern. The <userinput>parse</userinput> method uses these patterns to extract the fields of the message into name-value pairs. The destination template of the &abbrev; log statement uses the extracted fields to format the output message.</para>
<!-- FIXME calloutosra megcsinalni a konfigmagyarazatot? -->
        <synopsis>@version: &techversion;
@include "scl.conf"
parser my_python_parser{
  python(
    class("LoggenParser")
    options("regex", "seq: (?P&lt;seq&gt;\\d+), thread: (?P&lt;thread&gt;\\d+), runid: (?P&lt;runid&gt;\\d+), stamp: (?P&lt;stamp&gt;[^ ]+) (?P&lt;padding&gt;.*$)")
  );
};
log {
  source { tcp(port(5555)); };
  parser(my_python_parser);
  destination {  file("/tmp/regexparser.log.txt" template("seq: $seq thread: $thread runid: $runid stamp: $stamp my_counter: $MY_COUNTER"));};
};
python {
import re
class LoggenParser(object):
    def init(self, options):
        pattern = options["regex"]
        self.regex = re.compile(pattern)
        self.counter = 0
        return True
    def deinit(self):
        return True
    def parse(self, log_message):
        match = self.regex.match(log_message['MESSAGE'])
        if match:
            for key, value in match.groupdict().items():
                log_message[key] = value
            log_message['MY_COUNTER'] = self.counter
            self.counter += 1
            return True
        return False
};</synopsis>
    </simplesect>
    <simplesect xml:id="python-parser-example-windows-logs">
        <title>Example: Parse Windows eventlogs in Python - performance</title>
        <para>The following example uses regular expressions to process Windows log messages received in XML format from the &agent; application. The parser extracts different fields from messages received from the Security and the Application eventlog containers. Using the following configuration file, &abbrev; could process about 25000 real-life Windows log messages per second.</para>
        <synopsis>@version: &techversion;
options {
    keep_hostname(yes);
    keep_timestamp(no);
    stats_level(2);
    use_dns(no);
};
source s_network_aa5fdf25c39d4017a8e504cdb641b477 {
    network(flags(no-parse)
        ip(0.0.0.0)
        log_fetch_limit(1000)
        log_iw_size(100000)
        max_connections(100)
        port(514));
};
parser p_python_parser_79c31da44bb64de6b5de84be4ae15a15 {
    python(options("regex_for_security", ".* Security ID:  (?P&lt;security_id&gt;\\S+)   Account Name:  (?P&lt;account_name&gt;\\S+)   Account Domain:  (?P&lt;account_domain&gt;\\S+)   Logon ID:  (?P&lt;logon_id&gt;\\S+).*Process Name: (?P&lt;process_name&gt;\\S+).*EventID (?P&lt;event_id&gt;\\d+)", "regex_others", "(.*)EventID (?P&lt;event_id&gt;\\d+)")
class("EventlogParser"));
};
destination d_file_78363e1dd90c4ebcbb0ee1eff5a2e310 {
    file("/var/testdb_working_dir/fcd713a2-d48e-4025-9192-ec4a9852cafa.$HOST"
        flush_lines(1000)
        log_fifo_size(200000));
};
log {
    source(s_network_aa5fdf25c39d4017a8e504cdb641b477);
    parser(p_python_parser_79c31da44bb64de6b5de84be4ae15a15);
    destination(d_file_78363e1dd90c4ebcbb0ee1eff5a2e310);

    flags(flow-control);
};

python {
import re
class EventlogParser(object):
    def init(self, options):
        self.regex_security = re.compile(options["regex_for_security"])
        self.regex_others = re.compile(options["regex_others"])
        return True
    def deinit(self):
        return True
    def parse(self, log_message):
        security_match = self.regex_security.match(log_message['MESSAGE'])
        if security_match:
            for key, value in security_match.groupdict().items():
                log_message[key] = value
        else:
            others_match = self.regex_others.match(log_message['MESSAGE'])
            if others_match:
                for key, value in others_match.groupdict().items():
                    log_message[key] = value
        return True
};</synopsis>
    </simplesect>
<!--
FIXME whois lookupos pelda webszerver logokra?
-->
</section>
