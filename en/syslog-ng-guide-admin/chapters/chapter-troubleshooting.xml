<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter
[
<!ENTITY % entities SYSTEM "../../shared/syslog-ng-entities.ent">
%entities;
]>
<chapter xml:id="chapter-troubleshooting-syslog-ng" xmlns="http://docbook.org/ns/docbook" version="5.0">
    <title>Troubleshooting syslog-ng</title>
    <indexterm>
        <primary>troubleshooting</primary>
    </indexterm>
    <indexterm>
        <primary>error solving</primary>
    </indexterm>
    <indexterm>
        <primary>syslog-ng</primary>
        <secondary>troubleshooting</secondary>
    </indexterm>
    <para>This chapter provides tips and guidelines about troubleshooting problems related to syslog-ng.<phrase condition="pe6"> Troubleshooting the &agent; application is discussed in <olink targetdoc="syslog-ng-windows-agent-guide-admin" targetptr="chapter-windows-troubleshooting"/>.</phrase></para>
    <itemizedlist>
        <listitem>
            <para>As a general rule, first try to get logging the messages to a local file. Once this is working, you know that syslog-ng is running correctly and receiving messages, and you can proceed to forwarding the messages to the server.</para>
        </listitem>
        <listitem>
            <para>Always check the configuration files for any syntax errors on both the client and the server using the <command>syslog-ng --syntax-only</command> command.</para>
        </listitem>
        <listitem>
            <para>If the &abbrev; server does not receive the messages, verify that the IP addresses and ports are correct in your sources and destinations. Also, check that the client and the server uses the same protocol (a common error is to send logs on UDP, but configure the server to receive logs on TCP.</para>
            <para>If the problem persist, use <command>tcpdump</command> or a similar packet sniffer tool on the client to verify that the messages are sent correctly, and on the server to verify that it receives the messages.</para>
        </listitem>
        <listitem>
            <para>To find message-routing problems, run &abbrev; with the following command <command>syslog-ng -Fevd</command>. That way &abbrev; will run in the foreground, and display debug messages about the messages that are processed.</para>
        </listitem>
        <listitem>
            <para>If syslog-ng is closing the connections for no apparent reason, be sure to check the log messages of syslog-ng. You might also want to run syslog-ng with the <parameter>--verbose</parameter> or <parameter>--debug</parameter> command-line options for more-detailed log messages. You can enable these messages without restarting syslog-ng using the <command>syslog-ng-ctl verbose --set=on</command> command. For details, see the syslog-ng-ctl man page at <xref linkend="syslog-ng-ctl.1"/>.</para>
        </listitem>
        <listitem>
            <para>Build up encrypted connections step-by-step: first create a working unencrypted (for example TCP) connection, then add TLS encryption, and finally client authentication if needed.</para>
        </listitem>
        <listitem>
            <para>If you use the same driver and options in the destination of your &abbrev; client and the source of your &abbrev; server, everything should work as expected. Unfortunately there are some other combinations, that seem to be working, but result in losing parts of the messages. For details on the working combinations, see <xref linkend="concepts-things-to-consider"/>.</para>
        </listitem>
    </itemizedlist>
    <section xml:id="concepts-losing-messages">
        <title>Possible causes of losing log messages</title>
        <indexterm>
            <primary>losing messages</primary>
        </indexterm>
        <indexterm>
            <primary>message loss</primary>
        </indexterm>
        <para>During the course of a message from the sending application to the final destination of the message, there are a number of locations where a message may be lost, even though syslog-ng does its best to avoid message loss. Usually losing messages can be avoided with careful planning and proper configuration of syslog-ng and the hosts running syslog-ng. The following list shows the possible locations where messages may be lost, and provides methods to minimize the risk of losing messages.</para>
        <note>
            <para>If your &abbrev; host uses an NFS partition, see <xref linkend="concepts-nfs-support-in-syslog-ng"/>.</para>
        </note>
        <itemizedlist>
            <listitem>
                <para><emphasis>Between the application and the syslog-ng client</emphasis>: Make sure to use an appropriate source to receive the logs from the application (for example from <filename>/dev/log</filename>). For example, use <parameter>unix-stream</parameter> instead of <parameter>unix-dgram</parameter> whenever possible.</para>
            </listitem>
            <listitem>
                <para><emphasis>When syslog-ng is sending messages</emphasis>: If syslog-ng cannot send messages to the destination and the output buffer gets full, syslog-ng will drop messages.</para>
                <para>Use flags (flow-control) to avoid it (for details, see <xref linkend="configuring-flow-control"/>). For more information about the error caused by the missing flow-control, see <xref linkend="message-missing-flow-control"/>.</para>
                <para>The number of dropped messages is displayed per destination in the log message statistics of syslog-ng (for details, see <xref linkend="chapter-log-statistics"/>).</para>
            </listitem>
            <listitem>
                <para><emphasis>On the network</emphasis>: When transferring messages using the UDP protocol, messages may be lost without any notice or feedback &mdash; such is the nature of the UDP protocol. Always use the TCP protocol to transfer messages over the network whenever possible.</para>
                <para condition="pe">For details on minimizing message loss when using UDP, see the following tutorial:<olink targetdoc="syslog-ng-tutorial-udp-source"/>.</para>
            </listitem>
            <listitem>
                <para><emphasis>In the socket receive buffer</emphasis>: When transferring messages using the UDP protocol, the UDP datagram (that is, the message) that reaches the receiving host placed in a memory area called the <userinput>socket receive buffer</userinput>. If the host receives more messages than it can process, this area overflows, and the kernel drops messages without letting syslog-ng know about it. Using TCP instead of UDP prevents this issue. If you must use the UDP protocol, increase the size of the receive buffer using the <parameter>so-rcvbuf()</parameter> option.</para>
            </listitem>
            <listitem>
                <para><emphasis>When syslog-ng is receiving messages</emphasis>:</para>
                <itemizedlist>
                    <listitem>
                        <para>The receiving syslog-ng (for example the syslog-ng server or relay) may drop messages if the fifo of the destination file gets full. The number of dropped messages is displayed per destination in the log message statistics of syslog-ng (for details, see <xref linkend="chapter-log-statistics"/>).</para>
                    </listitem>
                    <listitem condition="pe">
                        <xi:include href="../../shared/chunk/pe-para-license-limit.xml" xmlns:xi="http://www.w3.org/2001/XInclude"/>
                    </listitem>
                </itemizedlist>
            </listitem>
            <listitem>
                <para><emphasis>When the destination cannot handle large load</emphasis>: When syslog-ng is sending messages at a high rate into an SQL database, a file, or another destination, it is possible that the destination cannot handle the load, and processes the messages slowly. As a result, the buffers of syslog-ng fill up, syslog-ng cannot process the incoming messages, and starts to loose messages. For details, see the previous entry. Use the <parameter>throttle</parameter> parameter to avoid this problem.</para>
            </listitem>
            <listitem>
                <para><emphasis>As a result of an unclean shutdown of the syslog-ng server</emphasis>: If the host running the syslog-ng server experiences an unclean shutdown, it takes time until the clients realize that the connection to the syslog-ng server is down. Messages that are put into the output TCP buffer of the clients during this period are not sent to the server.</para>
            </listitem>
            <listitem>
                <para><emphasis>When &abbrev; is writing messages into files</emphasis>: If &abbrev; receives a signal (SIG) while writing log messages to file, the log message that is processed by the <emphasis>write</emphasis> call can be lost if the <parameter>flush_lines</parameter> parameter is higher than 1.</para>
            </listitem>
        </itemizedlist>
    </section>
    <xi:include xmlns:xi="http://www.w3.org/2001/XInclude" href="syslog-ng-core-files.xml"/>
    <section xml:id="syslog-ng-strace-truss-tusc">
        <title>Collecting debugging information with strace, truss, or tusc</title>
        <indexterm>
            <primary>troubleshooting</primary>
            <secondary>truss</secondary>
        </indexterm>
        <indexterm>
            <primary>troubleshooting</primary>
            <secondary>strace</secondary>
        </indexterm>
        <indexterm>
            <primary>troubleshooting</primary>
            <secondary>tusc</secondary>
        </indexterm>
        <indexterm>
            <primary>truss</primary>
        </indexterm>
        <indexterm>
            <primary>strace</primary>
        </indexterm>
        <indexterm>
            <primary>tusc</primary>
        </indexterm>
        <para>To properly troubleshoot certain situations, it can be useful to trace which system calls &abbrev; performs. How this is performed depends on the platform running &abbrev;. In general, note the following points:</para>
        <itemizedlist>
            <listitem>
                <para>When &abbrev; is started, a supervisor process might stay in the foreground, while the actual syslog-ng daemon goes to the background. Always trace the background process.</para>
            </listitem>
            <listitem>
                <para>Apart from the system calls, the time between two system calls can be important as well. Make sure that your tracing tool records the time information as well. For details on how to do that, refer to the manual page of your specific tool (for example, <command>strace</command> on Linux, or <command>truss</command> on Solaris and BSD).</para>
            </listitem>
            <listitem>
                <para>Run your tracing tool in verbose mode, and if possible, set it to print long output strings, so the messages are not truncated.</para>
            </listitem>
            <listitem>
                <para>When using <command>strace</command>, also record the output of <command>lsof</command> to see which files are accessed.</para>
            </listitem>
        </itemizedlist>
        <para>The following are examples for tracing system calls of syslog-ng on some platforms. The output is saved into the <filename>/tmp/syslog-ng-trace.txt</filename> file, sufficed with the PID of the related syslog-ng process.The path of the syslog-ng binary assumes that you have installed &abbrev; from the official &abbrev; binaries available at the BalaBit website &mdash; native distribution-specific packages may use different paths.</para>
        <itemizedlist>
            <listitem>
                <para><emphasis>Linux</emphasis>: <command> strace -o /tmp/trace.txt -s256 -ff -ttT /opt/syslog-ng/sbin/syslog-ng -f /opt/syslog-ng/etc/syslog-ng.conf -Fdv</command></para>
            </listitem>
            <listitem>
                <para><emphasis>HP-UX</emphasis>: <command>tusc -f -o /tmp/syslog-ng-trace.txt -T /opt/syslog-ng/sbin/syslog-ng</command></para>
            </listitem>
            <listitem>
                <para><emphasis>IBM AIX and Solaris</emphasis>: <command>truss -f -o /tmp/syslog-ng-trace.txt -r all -w all -u libc:: /opt/syslog-ng/sbin/syslog-ng -d -d -d</command></para>
            </listitem>
        </itemizedlist>
        <tip>
            <para>To execute these commands on an already running &abbrev; process, use the <userinput>-p &lt;pid_of_syslog-ng&gt;</userinput> parameter.</para>
        </tip>
    </section>
    <xi:include xmlns:xi="http://www.w3.org/2001/XInclude" href="syslog-ng-failure-script.xml"/>
    <section xml:id="syslog-ng-stop">
        <title>Stopping syslog-ng</title>
        <para>To avoid problems, always use the init scripts to stop syslog-ng (<command>/etc/init.d/syslog-ng stop</command>), instead of using the <command>kill</command> command. This is especially true on Solaris and HP-UX systems, here use <command>/etc/init.d/syslog stop</command>.</para>
    </section>
    <section xml:id="report-bugs">
        <title>Reporting bugs and finding help</title>
        <para>If you need help, want to open a support ticket, or report a bug, we recommend using the <command>syslog-debun</command> tool to collect information about your environment and &abbrev; version. For details, see <xref linkend="syslog-debun.1"/>. For support contacts, see <xref linkend="common-preface-contact-support"/>.</para>
    </section>
    <section xml:id="diskbuffer-recovery" condition="pe6">
        <title>Recover data from orphaned diskbuffer files</title>
        <para>When you change the configuration of a &abbrev; host that uses disk-based buffering (also called disk queue), &abbrev; may start new disk buffer files for the destinations that you have changed. In such case, &abbrev; abandons the old disk queue files. If there were unsent log messages in the disk queue files, these messages remain in the disk queue files, and will not be sent to the destinations.</para>
        <para>To find, examine, and flush the log messages from such orphaned disk queue files, see the <olink targetdoc="syslog-ng-tutorial-diskbuffer-recovery"/> tutorial.</para>
    </section>
    <section xml:id="error-messages">
        <title>Error messages</title>
        <xi:include xmlns:xi="http://www.w3.org/2001/XInclude" href="message-missing-flow-control.xml"/>
        <xi:include xmlns:xi="http://www.w3.org/2001/XInclude" href="simplesect-alert.xml"/>
        <xi:include xmlns:xi="http://www.w3.org/2001/XInclude" href="simplesect-pem.xml"/>
        <xi:include xmlns:xi="http://www.w3.org/2001/XInclude" href="simplesect-tid.xml"/>
    </section>
</chapter>
