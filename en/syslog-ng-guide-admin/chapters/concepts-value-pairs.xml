<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE section [
<!ENTITY % entities SYSTEM "../../common/syslog-ng-entities.ent">
  %entities;]>
<section xml:id="concepts-value-pairs" xmlns="http://docbook.org/ns/docbook" version="5.0">
    <title>Structuring macros, metadata, and other value-pairs</title>
    <para><emphasis role="bold">Available in &abbrev; <phrase condition="ose">3.3</phrase><phrase condition="pe">5.1</phrase> and later.</emphasis></para>
    <para>The &abbrev; application allows you to select and construct name-value pairs from any information already available about the log message, or extracted from the message itself. You can directly use this structured information, for example, in the following places:</para>
    <itemizedlist>
        <listitem condition="ose">
            <para><link linkend="configuring-destinations-amqp"><parameter>amqp()</parameter></link> destination</para>
        </listitem>
        <listitem>
            <para><link linkend="template-function-format-welf"><parameter>format-welf()</parameter></link> template function</para>
        </listitem>
        <listitem>
            <para><link linkend="configuring-destinations-mongodb"><parameter>mongodb()</parameter></link> destination</para>
        </listitem>
        <listitem condition="ose">
            <para><link linkend="configuring-destinations-stomp"><parameter>stomp()</parameter></link> destination</para>
        </listitem>
        <listitem>
            <para>or in other destinations using the <link linkend="template-function-format-json"><parameter>format-json()</parameter></link> template function.</para>
        </listitem>
    </itemizedlist>
    <para>When using <parameter>value-pairs</parameter>, there are three ways to specify which information (that is, macros or other name-value pairs) to include in the selection.</para>
    <itemizedlist>
        <listitem>
            <para>Select groups of macros using the <parameter>scope()</parameter> parameter, and optionally remove certain macros from the group using the <parameter>exclude()</parameter> parameter.</para>
        </listitem>
        <listitem>
            <para>List specific macros to include using the <parameter>key()</parameter> parameter.</para>
        </listitem>
        <listitem>
            <para>Define new name-value pairs to include using the <parameter>pair()</parameter> parameter.</para>
        </listitem>
    </itemizedlist>
    <para>These parameters are detailed in <xref linkend="options-value-pairs"/>.</para>
    <section xml:id="specifying-data-types">
        <title>Specifying data types in value-pairs</title>
        <indexterm>
            <primary>data types</primary>
        </indexterm>
        <indexterm>
            <primary>type-hinting</primary>
        </indexterm>
        <indexterm>
            <primary>type-casting</primary>
        </indexterm>
        <indexterm>
            <primary>typecasting</primary>
            <see>type-casting</see>
        </indexterm>
        <para>By default, &abbrev; handles every data as strings. However, certain destinations and data formats (for example, SQL, MongoDB, JSON<phrase condition="ose">, AMQP</phrase>) support other types of data as well, for example, numbers or dates. The &abbrev; application allows you to specify the data type in templates (this is also called type-hinting). If the destination driver supports data types, it converts the incoming data to the specified data type. For example, this allows you to store integer numbers as numbers in MongoDB, instead of strings.</para>
        <warning>
            <para>Hazard of data loss! If &abbrev; cannot convert the data into the specified type, an error occurs, and &abbrev; drops the message by default. To change how &abbrev; handles data-conversion errors, see <xref linkend="global-option-typecasting-on-error"/>.</para>
        </warning>
        <para>To use type-hinting, enclose the macro or template containing the data with the type: <userinput>&lt;datatype&gt;("&lt;macro&gt;")</userinput>, for example: <userinput>int("$PID")</userinput>.</para>
        <para>Currently the <parameter>mongodb()</parameter> destination and the <parameter>format-json</parameter> template function supports data types.</para>
        <example>
            <title>Using type-hinting</title>
            <indexterm>
                <primary>mongodb</primary>
                <see>type-casting</see>
            </indexterm>
            <para>The following example stores the MESSAGE, PID, DATE, and PROGRAM fields of a log message in a MongoDB database. The DATE and PID parts are stored as numbers instead of strings.</para>
            <synopsis>mongodb(
    value-pairs(pair("date", datetime("$UNIXTIME"))
            pair("pid", int64("$PID"))
            pair("program", "$PROGRAM"))
            pair("message", "$MESSAGE"))
             )
);</synopsis>
            <para>The following example formats the same fields into JSON.</para>
            <synopsis>$(format-json date=datetime("$UNIXTIME") pid=int64("$PID") program="$PROGRAM" message="$MESSAGE")</synopsis>
        </example>
        <para>The &abbrev; application currently supports the following data-types.</para>
        <itemizedlist>
            <listitem>
                <para><parameter>boolean</parameter>: Converts the data to a boolean value. Anything that begins with a <userinput>t</userinput> or <userinput>1</userinput> is converted to true, anything that begins with an <userinput>f</userinput> or <userinput>0</userinput> is converted to false.</para>
            </listitem>
            <listitem>
                <para><parameter>datetime</parameter>: Use it only with UNIX timestamps, anything else will likely result in an error. This means that currently you can use only the <parameter>$UNIXTIME</parameter> macro for this purpose.</para>
            </listitem>
            <listitem>
                <para><parameter>double</parameter>: A floating-point number.</para>
            </listitem>
            <listitem>
                <para><parameter>literal</parameter>: The data as a literal string, without adding any quotes or escape characters.</para>
            </listitem>
            <listitem>
                <para><parameter>int</parameter> or <parameter>int32</parameter>: 32-bit integer.</para>
            </listitem>
            <listitem>
                <para><parameter>int64</parameter>: 64-bit integer.</para>
            </listitem>
            <listitem>
                <para><parameter>string</parameter>: The data as a string.</para>
            </listitem>
        </itemizedlist>
    </section>
    <simplesect xml:id="options-value-pairs">
        <title>value-pairs()</title>
        <indexterm type="parameter">
            <primary>value-pairs()</primary>
        </indexterm>
        <informaltable frame="topbot" colsep="0" rowsep="0">
            <tgroup cols="2">
                <colspec colnum="1" colwidth="40pt"/>
                <tbody>
                    <row>
                        <entry>Type:
                            <?dbhtml bgcolor="#D4D6EB" ?>
<?dbfo bgcolor="#D4D6EB" ?>
                        </entry>
                        <entry>parameter list of the <parameter>value-pairs()</parameter> option</entry>
                    </row>
                    <row>
                        <entry>Default:
                            <?dbhtml bgcolor="#D4D6EB" ?>
<?dbfo bgcolor="#D4D6EB" ?>
                        </entry>
                        <entry>
                            <synopsis>empty string</synopsis>
                        </entry>
                    </row>
                </tbody>
            </tgroup>
        </informaltable>
        <para><emphasis role="bold">Description:</emphasis> The <parameter>value-pairs()</parameter> option allows you to select specific information about a message easily using predefined macro groups. The selected information is represented as name-value pairs and can be used formatted to JSON format, or directly used in a <parameter>mongodb()</parameter> destination.</para>
        <example>
            <title>Using the <parameter>value-pairs()</parameter> option</title>
            <indexterm type="parameter">
                <primary>value-pairs()</primary>
            </indexterm>
            <para>The following example selects every available information about the log message, except for the date-related macros (<userinput>R_*</userinput> and <userinput>S_*</userinput>), selects the <userinput>.SDATA.meta.sequenceId</userinput> macro, and defines a new value-pair called <userinput>MSGHDR</userinput> that contains the program name and PID of the application that sent the log message.</para>
            <synopsis>value-pairs(
    scope(nv_pairs core syslog all_macros selected_macros everything)
    exclude("R_*")
    exclude("S_*")
    key(".SDATA.meta.sequenceId")
    pair("MSGHDR" "$PROGRAM[$PID]: ")
)</synopsis>
            <para>The following example selects the same information as the previous example, but converts it into JSON format.</para>
            <synopsis>$(format-json --scope nv_pairs,core,syslog,all_macros,selected_macros,everything \
  --exclude R_* --exclude S_* --key .SDATA.meta.sequenceId \
  --pair MSGHDR="$PROGRAM[$PID]: ")</synopsis>
        </example>
        <note>
            <para>Every macro is included in the selection only once, but redundant information may appear if multiple macros include the same information (for example, including several date-related macros in the selection).</para>
        </note>
        <para>The <parameter>value-pairs()</parameter> option has the following parameters. The parameters are evaluated in the following order:</para>
        <orderedlist>
            <listitem>
                <para><link xmlns:ns1="http://www.w3.org/1999/xlink" linkend="value-pairs-scope"><parameter>scope()</parameter></link></para>
            </listitem>
            <listitem>
                <para><link xmlns:ns1="http://www.w3.org/1999/xlink" linkend="value-pairs-exclude"><parameter>exclude()</parameter></link></para>
            </listitem>
            <listitem>
                <para><link xmlns:ns1="http://www.w3.org/1999/xlink" linkend="value-pairs-key"><parameter>key()</parameter></link></para>
            </listitem>
            <listitem>
                <para><link xmlns:ns1="http://www.w3.org/1999/xlink" linkend="value-pairs-pair"><parameter>pair()</parameter></link></para>
            </listitem>
        </orderedlist>
        <informaltable frame="topbot" colsep="0" rowsep="0" xml:id="value-pairs-exclude">
            <tgroup cols="2">
                <colspec colnum="1" colname="c1" colwidth="40pt"/>
                <colspec colnum="2" colname="c2"/>
                <tbody>
                    <row>
                        <entry>
                            <indexterm type="parameter">
                                <primary>exclude()</primary>
                            </indexterm><emphasis role="bold">exclude()</emphasis>
                        </entry>
                        <entry/>
                    </row>
                    <row>
                        <entry>Type:
                            <?dbhtml bgcolor="#D4D6EB" ?>
<?dbfo bgcolor="#D4D6EB" ?>
                        </entry>
                        <entry>Space-separated list of macros to remove from the selection created using the <parameter>scope()</parameter> option.</entry>
                    </row>
                    <row>
                        <entry>Default:<?dbhtml bgcolor="#D4D6EB" ?>
<?dbfo bgcolor="#D4D6EB" ?>
                        </entry>
                        <entry>empty string</entry>
                    </row>
                    <row>
                        <entry namest="c1" nameend="c2">
                            <para><emphasis role="bold">Description:</emphasis> This option removes the specified macros from the selection. Use it to remove unneeded macros selected using the <parameter>scope()</parameter> parameter.</para>
                            <para>For example, the following example removes the SDATA macros from the selection.</para>
                            <synopsis>value-pairs(
        scope(rfc5424 selected_macros)
        exclude(".SDATA*")
    )</synopsis>
                            <para>The name of the macro to remove can include wildcards <userinput>(*, ?)</userinput>. Regular expressions are not supported.</para>
                        </entry>
                    </row>
                </tbody>
            </tgroup>
        </informaltable>
        <informaltable frame="topbot" colsep="0" rowsep="0" xml:id="value-pairs-key">
            <tgroup cols="2">
                <colspec colnum="1" colname="c1" colwidth="40pt"/>
                <colspec colnum="2" colname="c2"/>
                <tbody>
                    <row>
                        <entry><emphasis role="bold">key()</emphasis>
                            <indexterm type="parameter">
                                <primary>key()</primary>
                            </indexterm>
                        </entry>
                        <entry/>
                    </row>
                    <row>
                        <entry>Type:
                            <?dbhtml bgcolor="#D4D6EB" ?>
<?dbfo bgcolor="#D4D6EB" ?>
                        </entry>
                        <entry>Space-separated list of macros to be included in selection</entry>
                    </row>
                    <row>
                        <entry>Default:
                            <?dbhtml bgcolor="#D4D6EB" ?>
<?dbfo bgcolor="#D4D6EB" ?>
                        </entry>
                        <entry>empty string</entry>
                    </row>
                    <row>
                        <entry namest="c1" nameend="c2">
                            <para><emphasis role="bold">Description:</emphasis> This option selects the specified macros. The selected macros will be included as <userinput>MACRONAME = MACROVALUE</userinput>, that is using <userinput>key("HOST")</userinput> will result in <userinput>HOST = $HOST</userinput>. You can use wildcards <userinput>(*, ?)</userinput> to select multiple macros. For example:</para>
                            <synopsis>value-pairs(
        scope(rfc3164)
        key("HOST"))</synopsis>
                            <synopsis>value-pairs(
        scope(rfc3164)
        key("HOST", "PROGRAM"))</synopsis>
                        </entry>
                    </row>
                </tbody>
            </tgroup>
        </informaltable>
        <informaltable frame="topbot" colsep="0" rowsep="0" xml:id="value-pairs-pair">
            <tgroup cols="2">
                <colspec colnum="1" colname="c1" colwidth="40pt"/>
                <colspec colnum="2" colname="c2"/>
                <tbody>
                    <row>
                        <entry><emphasis role="bold">pair()</emphasis>
                            <indexterm type="parameter">
                                <primary>pair()</primary>
                            </indexterm>
                        </entry>
                        <entry/>
                    </row>
                    <row>
                        <entry>Type:
                            <?dbhtml bgcolor="#D4D6EB" ?>
<?dbfo bgcolor="#D4D6EB" ?>
                        </entry>
                        <entry>name value pairs in <userinput>"&lt;NAME&gt;" "&lt;VALUE&gt;"</userinput> format</entry>
                    </row>
                    <row>
                        <entry>Default:
                            <?dbhtml bgcolor="#D4D6EB" ?>
<?dbfo bgcolor="#D4D6EB" ?>
                        </entry>
                        <entry>empty string</entry>
                    </row>
                    <row>
                        <entry namest="c1" nameend="c2">
                            <para><emphasis role="bold">Description:</emphasis> This option defines a new name-value pair to be included in the message. The value part can include macros, templates, and template functions as well. For example:</para>
                            <synopsis>value-pairs(
        scope(rfc3164)
        pair("TIME" "$HOUR:$MIN")
        pair("MSGHDR" "$PROGRAM[$PID]: "))</synopsis>
                        </entry>
                    </row>
                </tbody>
            </tgroup>
        </informaltable>
        <informaltable frame="topbot" colsep="0" rowsep="0" xml:id="value-pairs-rekey">
            <tgroup cols="2">
                <colspec colnum="1" colname="c1" colwidth="40pt"/>
                <colspec colnum="2" colname="c2"/>
                <tbody>
                    <row>
                        <entry><emphasis role="bold">rekey()</emphasis>
                            <indexterm type="parameter">
                                <primary>rekey()</primary>
                            </indexterm>
                        </entry>
                        <entry/>
                    </row>
                    <row>
                        <entry>Type:
                            <?dbhtml bgcolor="#D4D6EB" ?>
<?dbfo bgcolor="#D4D6EB" ?>
                        </entry>
                        <entry>&lt;pattern-to-select-names&gt;, &lt;list of transformations&gt;</entry>
                    </row>
                    <row>
                        <entry>Default:
                            <?dbhtml bgcolor="#D4D6EB" ?>
<?dbfo bgcolor="#D4D6EB" ?>
                        </entry>
                        <entry>empty string</entry>
                    </row>
                    <row>
                        <entry namest="c1" nameend="c2">
                            <para><emphasis role="bold">Description:</emphasis> This option allows you to manipulate and modify the name of the value-pairs. You can define transformations, which are are applied to the selected name-value pairs. The first parameter of the <parameter>rekey()</parameter> option is a glob pattern that selects the name-value pairs to modify. If you omit the pattern, the transformations are applied to every key of the scope. For details on globs, see <xref linkend="reference-regexp-glob"/>.</para>
                            <itemizedlist>
                                <listitem>
                                    <para>If <parameter>rekey()</parameter> is used within a <parameter>key()</parameter> option, the name-value pairs specified in the glob of the <parameter>key()</parameter> option are transformed.</para>
                                </listitem>
                                <listitem>
                                    <para>If <parameter>rekey()</parameter> is used outside the <parameter>key()</parameter> option, every name-value pair of the <parameter>scope()</parameter> is transformed.</para>
                                </listitem>
                            </itemizedlist>
                            <para>The following transformations are available:</para>
                            <variablelist>
                                <varlistentry>
                                    <term><command>add-prefix("&lt;my-prefix&gt;")</command>
                                        <indexterm type="parameter">
                                            <primary>add-prefix()</primary>
                                        </indexterm>
                                    </term>
                                    <listitem>
                                        <para>Adds the specified prefix to every name. For example, <userinput>rekey( add-prefix("my-prefix."))</userinput></para>
                                    </listitem>
                                </varlistentry>
                                <varlistentry>
                                    <term><command>replace-prefix("&lt;prefix-to-replace&gt;", "&lt;new-prefix&gt;")</command>
                                        <indexterm type="parameter">
                                            <primary>replace-prefix()</primary>
                                        </indexterm>
                                    </term>
                                    <listitem>
                                        <para>Replaces a substring at the beginning of the key with another string. Only prefixes can be replaced. For example, <userinput>replace-prefix(".class", ",patterndb")</userinput> changes the beginning tag <userinput>.class</userinput> to <userinput>.patterndb</userinput></para>
                                        <para condition="ose">This option was called <parameter>replace()</parameter> in &abbrev; version 3.4.</para>
                                    </listitem>
                                </varlistentry>
                                <varlistentry>
                                    <term><command>shift("&lt;number&gt;")</command>
                                        <indexterm type="parameter">
                                            <primary>shift()</primary>
                                        </indexterm>
                                    </term>
                                    <listitem>
                                        <para>Cuts the specified number of characters from the beginning of the name.</para>
                                    </listitem>
                                </varlistentry>
                            </variablelist>
                            <example xml:id="example-value-pairs-rekey">
                                <title>Using the rekey() option</title>
                                <para>The following sample selects every value-pair that begins with <userinput>.cee.</userinput>, deletes this prefix by cutting 4 characters from the names, and adds a new prefix (<userinput>events.</userinput>).</para>
                                <synopsis>value-pairs(
    key(".cee.*"
        rekey(
            shift(4)
            add-prefix("events.")
        )
    )
)</synopsis>
                                <para>The <parameter>rekey()</parameter> option can be used with the <parameter>format-json</parameter> template-function as well, using the following syntax:</para>
                                <synopsis>$(format-json --rekey .cee.* --add-prefix events.)</synopsis>
                            </example>
                        </entry>
                    </row>
                </tbody>
            </tgroup>
        </informaltable>
        <informaltable frame="topbot" colsep="0" rowsep="0" xml:id="value-pairs-scope">
            <tgroup cols="2">
                <colspec colnum="1" colname="c1" colwidth="40pt"/>
                <colspec colnum="2" colname="c2"/>
                <tbody>
                    <row>
                        <entry><emphasis role="bold">scope()</emphasis>
                            <indexterm type="parameter">
                                <primary>scope()</primary>
                            </indexterm>
                        </entry>
                        <entry/>
                    </row>
                    <row>
                        <entry>Type:
                            <?dbhtml bgcolor="#D4D6EB" ?>
<?dbfo bgcolor="#D4D6EB" ?>
                        </entry>
                        <entry>space-separated list of macro groups to include in selection</entry>
                    </row>
                    <row>
                        <entry>Default:
                            <?dbhtml bgcolor="#D4D6EB" ?>
<?dbfo bgcolor="#D4D6EB" ?>
                        </entry>
                        <entry>empty string</entry>
                    </row>
                    <row>
                        <entry namest="c1" nameend="c2">
                            <para><emphasis role="bold">Description:</emphasis> This option selects predefined groups of macros. The following groups are available:</para>
                            <itemizedlist>
                                <listitem>
                                    <para><emphasis>nv-pairs</emphasis>: Every soft macro (name-value pair) associated with the message, except the ones that start with a dot (.) character. Macros starting with a dot character are generated within &abbrev; and are not originally part of the message, therefore are not included in this group.</para>
                                </listitem>
                                <listitem>
                                    <para><emphasis>dot-nv-pairs</emphasis>: Every soft macro (name-value pair) associated with the message which starts with a dot (.) character. For example, <userinput>.classifier.rule_id</userinput> and <userinput>.sdata.*</userinput>. Macros starting with a dot character are generated within &abbrev; and are not originally part of the message.</para>
                                </listitem>
                                <listitem>
                                    <para><emphasis>all-nv-pairs</emphasis>: Include every soft macro (name-value pair). Equivalent to using both <parameter>nv-pairs</parameter> and <parameter>dot-nv-pairs</parameter>.</para>
                                </listitem>
                                <listitem>
                                    <para><emphasis>rfc3164</emphasis>: The macros that correspond to the RFC3164 (legacy or BSD-syslog) message format: <parameter>$FACILITY</parameter>, <parameter>$PRIORITY</parameter>, <parameter>$HOST</parameter>, <parameter>$PROGRAM</parameter>, <parameter>$PID</parameter>, <parameter>$MESSAGE</parameter>, and <parameter>$DATE</parameter>.</para>
                                </listitem>
                                <listitem>
                                    <para><emphasis>rfc5424</emphasis>: The macros that correspond to the RFC5424 (IETF-syslog) message format: <parameter>$FACILITY</parameter>, <parameter>$PRIORITY</parameter>, <parameter>$HOST</parameter>, <parameter>$PROGRAM</parameter>, <parameter>$PID</parameter>, <parameter>$MESSAGE</parameter>, <parameter>$MSGID</parameter>, <parameter>$R_DATE</parameter>, and the metadata from the structured-data (SDATA) part of RFC5424-formatted messages, that is, every macro that starts with <userinput>.SDATA.</userinput>.</para>
                                    <para>The <parameter>rfc5424</parameter> group also has the following alias: <parameter>syslog-proto</parameter>. Note that the value of <parameter>$R_DATE</parameter> will be listed under the <parameter>DATE</parameter> key.</para>
                                    <para>The <parameter>rfc5424</parameter> group does not contain any metadata about the message, only information that was present in the original message. To include the most commonly used metadata (for example, the <parameter>$SOURCEIP</parameter> macro), use the <parameter>selected-macros</parameter> group instead.</para>
                                </listitem>
                                <listitem>
                                    <para><emphasis>all-macros</emphasis>: Include every hard macro. This group is mainly useful for debugging, as it contains redundant information (for example, the date-related macros include the date-related information several times in various formats).</para>
                                </listitem>
                                <listitem>
                                    <para><emphasis>selected-macros</emphasis>: Include the macros of the <parameter>rfc3164</parameter> groups, and the most commonly used metadata about the log message: the <parameter>$TAGS</parameter>, <parameter>$SOURCEIP</parameter>, and <parameter>$SEQNUM</parameter> macros.</para>
                                </listitem>
                                <listitem>
                                    <para><emphasis>sdata</emphasis>: The metadata from the structured-data (SDATA) part of RFC5424-formatted messages, that is, every macro that starts with <userinput>.SDATA.</userinput></para>
                                </listitem>
                                <listitem>
                                    <para><emphasis>everything</emphasis>: Include every hard and soft macros. This group is mainly useful for debugging, as it contains redundant information (for example, the date-related macros include the date-related information several times in various formats).</para>
                                </listitem>
                            </itemizedlist>
                            <para>For example:</para>
                            <synopsis>value-pairs(
        scope(rfc3164 selected-macros))</synopsis>
                        </entry>
                    </row>
                </tbody>
            </tgroup>
        </informaltable>
    </simplesect>
</section>
