<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE section
 [  <!ENTITY % entities SYSTEM "../../common/syslog-ng-entities.ent">
 %entities;]>
<section xml:id="geoip2-parser" xmlns="http://docbook.org/ns/docbook" version="5.0">
    <title>Looking up GeoIP2 data from IP addresses</title>
    <indexterm>
        <primary>geoip2</primary>
    </indexterm>
    <indexterm>
        <primary>parsers</primary>
        <secondary>geoip2</secondary>
    </indexterm>
    <para>The &abbrev; application can lookup IP addresses from an offline GeoIP2 database, and make the retrieved data available in name-value pairs. Depending on the database used, you can access country code, longitude, and latitude information and so on.</para>
    <para>The &abbrev; application works with the Country and the City version of the GeoIP2 database, both free and the commercial editions. The &abbrev; application works with the <filename>mmdb</filename> (GeoIP2) format of these databases. Other formats, like <filename>csv</filename> are not supported.</para>
    <note>
        <para>To access longitude and latitude information, download the City version of the <link xmlns:ns1="http://www.w3.org/1999/xlink" ns1:href="https://www.maxmind.com/en/geoip2-databases">GeoIP2</link> database.</para>
        <para>There are two types of GeoIP2 databases available.</para>
        <itemizedlist>
            <listitem>
                <para><emphasis>GeoLite2 City:</emphasis></para>
                <itemizedlist>
                    <listitem>
                        <para>free of charge</para>
                    </listitem>
                    <listitem>
                        <para>less accurate</para>
                    </listitem>
                </itemizedlist>
            </listitem>
            <listitem>
                <para><emphasis>GeoIP2 City:</emphasis></para>
                <itemizedlist>
                    <listitem>
                        <para>has to be purchased</para>
                    </listitem>
                    <listitem>
                        <para>more accurate</para>
                    </listitem>
                </itemizedlist>
            </listitem>
        </itemizedlist>
        <para>Unzip the downloaded database (for example, to the <filename>/usr/share/GeoIP2/GeoIP2City.mmdb</filename> file). This path will be used later in the configuration.</para>
    </note>
    
    <section>
        <title>Referring to parts of the message as a macro</title>
        <para>You can refer to the separated parts of the message using the key of the value as a macro. For example, if the message contains <userinput>KEY1=value1,KEY2=value2</userinput>, you can refer to the values as <userinput>${KEY1}</userinput> and <userinput>${KEY2}</userinput>.</para>
        <para>For example if the default prefix (<userinput>.geoip2</userinput>) is used, you can determine the country code using <command>${.geoip2.country.iso_code}</command>.</para>
        <para>To look up all keys:</para>
        <orderedlist>
            <listitem>
                <para>Install the <command>mmdb-bin</command> package.</para>
                <para>After installing this package, you will be able to use the <command>mmdblookup</command> command.</para>
                <note>
                    <para>The name of the package depends on the Linux distribution. The package mentioned in this example is on Ubuntu.</para>
                </note>
            </listitem>
            <listitem>
                <para>Create a dump using the following command: <command>mmdblookup --file GeoLite2-City.mmdb --ip &lt;your-IP-address&gt;</command></para>
                <para>The resulting dump file will contain the keys that you can use.</para>
            </listitem>
        </orderedlist>
    </section>
    
    <section>
        <title>Using the GeoIP2 parser</title>
        <formalpara>
            <title>Declaration:</title>
            <para/>
        </formalpara>
        <synopsis>parser parser_name {
    geoip2(
        &lt;macro-containing-the-IP-address-to-lookup&gt;
        prefix()
        database("&lt;path-to-geoip2-database-file&gt;")
    );
};</synopsis>
        <para>In the following example, &abbrev; retrieves the GeoIP2 data of the IP address contained in the ${HOST} field of the incoming message, and includes the data (prefixed with the <userinput>geoip2</userinput> string) in the output JSON message.</para>
        <synopsis>@version: 3.11
@module geoip2

options {
    keep_hostname(yes);
};

source s_file {
    file("/tmp/input");
};

parser p_geoip2 { geoip2( "${HOST}", prefix( "geoip2." ) database( "/usr/share/GeoIP2/GeoLiteCity.dat" ) ); };

destination d_file {
    file( "/tmp/output" flags(syslog-protocol) template("$(format-json --scope core --key geoip2*)\n") );
};


log {
    source(s_file);
    parser(p_geoip2);
    destination(d_file);
};</synopsis>
        <para>For example, for the <userinput>&lt;38&gt;2017-05-24T13:09:46 91.120.23.97 prg00000[1234]: test message</userinput> message the output will look like:</para>
        <synopsis>&lt;38&gt;1 2017-05-24T13:09:46+02:00 192.168.1.1 prg00000 1234 - [meta sequenceId="3"] {"geoip2":{"subdivisions":{"0":{"names":{"en":"Budapest"},"iso_code":"BU","geoname_id":"3054638"}},"registered_country":{"names":{"en":"Hungary"},"iso_code":"HU","geoname_id":"719819"},"postal":{"code":"1063"},"location":{"time_zone":"Europe/Budapest","longitude":"19.070200","latitude":"47.510200","accuracy_radius":"5"},"country":{"names":{"en":"Hungary"},"iso_code":"HU","geoname_id":"719819"},"continent":{"names":{"en":"Europe"},"geoname_id":"6255148","code":"EU"},"city":{"names":{"en":"Budapest"},"geoname_id":"3054643"}},"PROGRAM":"prg00000","PRIORITY":"info","PID":"1234","MESSAGE":"test message","HOST":"192.168.1.1","FACILITY":"auth","DATE":"May 24 13:09:46"}</synopsis>
    </section>

    <section>
        <title>Transferring your logs to Elasticsearch using GeoIP2</title>
        <para>If you are transferring your log messages into Elasticsearch, use the following rewrite rule to combine the longitude and latitude information into a single value (called <userinput>geoip.location</userinput>), and set the mapping in Elasticsearch accordingly. Do not forget to include the rewrite in your log path. For details on transferring your log messages to Elasticsearch, see <xref linkend="configuring-destinations-elasticsearch"/>.</para>
        <indexterm>
            <primary>geoip2</primary>
            <secondary>elasticsearch</secondary>
        </indexterm>
        <indexterm>
            <primary>elasticsearch</primary>
            <secondary>transferring geoip2 data</secondary>
        </indexterm>
        <synopsis>rewrite r_geoip2 {
    set(
        "${geoip2.location.latitude},${geoip2.location.longitude}",
        value( "geoip2.location" ),
        condition(not "${geoip2.location.latitude}" == "")
    );
};</synopsis>
        <para>In your Elasticsearch configuration, set the appropriate mappings:</para>
        <synopsis>{
   "mappings" : {
      "_default_" : {
         "properties" : {
            "geoip2" : {
               "properties" : {
                  "country_code" : {
                     "index" : "not_analyzed",
                     "type" : "string",
                     "doc_values" : true
                  },
                  "latitude" : {
                     "index" : "not_analyzed",
                     "type" : "string",
                     "doc_values" : true
                  },
                  "longitude" : {
                     "type" : "string",
                     "doc_values" : true,
                     "index" : "not_analyzed"
                  },
                  "location" : {
                     "type" : "geo_point"
                  }
               }
            }
         }
      }
   }
}</synopsis>
    </section>

    <section xml:id="geoip2-parser-options">
        <title>Options of <userinput>geoip2</userinput> parsers</title>
        <indexterm>
            <primary>geoip2</primary>
        </indexterm>
        <indexterm>
            <primary>parsers</primary>
            <secondary>geoip2</secondary>
        </indexterm>
        <para>The <parameter>geoip2</parameter> parser has the following options.</para>
        <simplesect xml:id="geoip2-parser-prefix">
            <xi:include href="../../common/chunk/option-parser-prefix.xml" xmlns:xi="http://www.w3.org/2001/XInclude"/>
            <para>For example, to insert the <userinput>.geoip2</userinput> prefix, use the <userinput>prefix(.geoip2)</userinput> option. To refer to a particular data when using a prefix, use the prefix in the name of the macro, for example, <command>${geoip2.country_code}</command> .</para>
        </simplesect>
        <simplesect xml:id="geoip2-parser-database">
            <title>database()</title>
            <indexterm>
                <primary>database()</primary>
            </indexterm>
            <informaltable frame="topbot" colsep="0" rowsep="0">
                <tgroup cols="2">
                    <colspec colnum="1" colwidth="50pt"/>
                    <tbody>
                        <row>
                            <entry>Synopsis: <?dbhtml bgcolor="#D4D6EB" ?>
                                <?dbfo bgcolor="#D4D6EB" ?>
                            </entry>
                            <entry>database()</entry>
                        </row>
                        <row>
                            <entry>Default: <?dbhtml bgcolor="#D4D6EB" ?>
                                <?dbfo bgcolor="#D4D6EB" ?>
                            </entry>
                            <entry/>
                        </row>
                    </tbody>
                </tgroup>
            </informaltable>
            <para><emphasis role="bold">Description:</emphasis> Path to the GeoIP2 database to use. This works with absolute and relative paths as well. Note that &abbrev; must have the required privileges to read this file. Do not modify or delete this file while &abbrev; is running, it can crash &abbrev;.</para>
        </simplesect>
    </section>
</section>
