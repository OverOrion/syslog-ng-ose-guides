<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE procedure
 [  <!ENTITY % entities SYSTEM "../../common/syslog-ng-entities.ent">
 %entities;]>
<procedure xml:id="generating-configuration-blocks" xmlns="http://docbook.org/ns/docbook" version="5.0">
    <title>Generating configuration blocks from a script</title>
    <indexterm>
        <primary>dynamic configuration</primary>
    </indexterm>
    <indexterm>
        <primary>confgen</primary>
    </indexterm>
    <indexterm>
        <primary>configuration files</primary>
        <secondary>dynamic elements</secondary>
    </indexterm>
    <formalpara>
        <title>Purpose:</title>
        <para/>
    </formalpara>
    <para>The &abbrev; application can automatically execute scripts when it is started, and can include the output of such script in the configuration file. To create and use a script that generates a part of the &abbrev; configuration file (actually, a configuration block), complete the following steps. The steps include examples for collecting Apache access log files (<filename>access.log</filename>) from subdirectories, but you can create any script that creates a valid &abbrev; configuration snippet.</para>
    <formalpara>
        <title>Steps:</title>
        <para/>
    </formalpara>
    <step>
        <para>Navigate to the directory where you have installed &abbrev; (for example, <userinput>/opt/syslog-ng/share/include/scl/</userinput>), and create a new directory, for example, <userinput>apache-access-logs</userinput>. The name of the directory will be used in the &abbrev; configuration file as well, so use a descriptive name.</para>
    </step>
    <step>
        <para>Create a file called <filename>plugin.conf</filename> in this new directory.</para>
    </step>
    <step>
        <para>Edit the <filename>plugin.conf</filename> file and add the following line:</para>
        <synopsis>@module confgen context(source) name(&lt;directory-name&gt;) exec("`scl-root`/&lt;directory-name&gt;/&lt;my-script&gt;")</synopsis>
        <para>Replace <userinput>&lt;directory-name&gt;</userinput> with the name of the directory (for example, <userinput>apache-access-logs</userinput>), and <userinput>&lt;my-script&gt;</userinput> with the filename of your script (for example, <userinput>apache-access-logs.sh</userinput>). You can reference the script in your &abbrev; configuration file as a configuration block using the value <parameter>name</parameter> option.</para>
        <para>The <parameter>context</parameter> option determines the type of the configuration snippet that the script generates, and must be one of the following: <parameter>destination</parameter>, <parameter>filter</parameter>, <parameter>log</parameter>, <parameter>parser</parameter>, <parameter>rewrite</parameter>, <parameter>root</parameter>, <parameter>source</parameter>. The <parameter>root</parameter> blocks can be used in the "root" context of the configuration file, that is, outside any other statements. In the example, <userinput>context(source)</userinput> means that the output of the script will be used within a source statement.</para>
    </step>
    <step>
        <para>Write a script that generates the output you need, and formats it to a configuration snippet that &abbrev; can use. The filename of the script must match with the filename used in <filename>plugin.conf</filename>, for example, <userinput>apache-access-logs.sh</userinput>.</para>
        <para>The following example checks the <filename>/var/log/apache2/</filename> directory and its subdirectories, and creates a source driver for every directory that contains an <filename>access.log</filename> file.</para>
        <synopsis>#!/bin/bash
for i in `find /var/log/apache2/ -type d`; do
    echo "file(\"$i/access.log\" flags(no-parse) program_override(\"apache2\"));";
done;</synopsis>
        <para>The script generates an output similar to this one, where <userinput>service*</userinput> is the actual name of a subdirectory:</para>
        <synopsis>file("/var/log/apache2/service1/access.log" flags(no-parse) program_override("apache2"));
file("/var/log/apache2/service2/access.log" flags(no-parse) program_override("apache2"));
</synopsis>
    </step>
    <step>
        <para>Include the <filename>plugin.conf</filename> file in the <filename>syslog-ng.conf</filename> file &mdash; or a file already included into <filename>syslog-ng.conf</filename>. Version <phrase condition="ose">3.7</phrase> and newer automatically includes the <filename>*.conf</filename> files from the <filename>&lt;directory-where-syslog-ng-is-installed&gt;/scl/*/</filename> directories. For details on including configuration files, see <xref linkend="including-config-files"/>.</para>
    </step>
    <step>
        <para>Add the block you defined in the <filename>plugin.conf</filename> file to your &abbrev; configuration file. You can reference the block using the value of the <parameter>name</parameter> option from the <filename>plugin.conf</filename> file, followed by parentheses, for example, <userinput>apache-access-logs()</userinput>. Make sure to use the block in the appropriate context of the configuration file, for example, within a source statement if the value of the <parameter>context</parameter> option in the <filename>plugin.conf</filename> file is source.</para>
        <synopsis>@include "scl.conf"
...
source s_apache {
    file("/var/log/apache2/access.log" flags(no-parse) program_override("apache2"));
    file("/var/log/apache2/error.log" flags(no-parse) program_override("apache2"));
    file("/var/log/apache2/ssl.log" flags(no-parse) program_override("apache2"));
    apache-access-logs();
};

log { source(s_apache); destination(d_central); };
...</synopsis>
    </step>
    <step>
        <para>Check if your modified &abbrev; configuration file is syntactically correct using the <command>syslog-ng --syntax-only</command> command.</para>
    </step>
    <step>
        <para>If your modified configuration is syntactically correct, load the new configuration file using the <command>syslog-ng-ctl reload</command> command.</para>
    </step>
</procedure>
