<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE section
 [  <!ENTITY % entities SYSTEM "../../common/syslog-ng-entities.ent">
 %entities;]>
<section xml:id="key-value-parser" xmlns="http://docbook.org/ns/docbook" version="5.0">
    <title>Parsing <userinput>key=value</userinput> pairs</title>
    <indexterm>
        <primary>segmenting messages</primary>
    </indexterm>
    <indexterm>
        <primary>key=value pairs</primary>
    </indexterm>
    <indexterm>
        <primary>key-value pairs</primary>
    </indexterm>
    <indexterm>
        <primary>splitting messages</primary>
    </indexterm>
    <indexterm>
        <primary>parsers</primary>
        <secondary>kv-parser</secondary>
    </indexterm>
    <para>The &abbrev; application can separate a message consisting of whitespace or comma-separated <userinput>key=value</userinput> pairs (for example, Postfix log messages) into name-value pairs. You can also specify other separator character instead of the equal sign, for example, colon (<userinput>:</userinput>) to parse MySQL log messages. The &abbrev; application automatically trims any leading or trailing whitespace characters from the keys and values, and also parses values that contain unquoted whitespace. For details on using value-pairs in &abbrev; see <xref linkend="concepts-value-pairs"/>.</para>
    <para>You can refer to the separated parts of the message using the key of the value as a macro. For example, if the message contains <userinput>KEY1=value1,KEY2=value2</userinput>, you can refer to the values as <userinput>${KEY1}</userinput> and <userinput>${KEY2}</userinput>.</para>

    <xi:include href="../../common/wnt/n-kv-parser-repeated-keys.xml" xmlns:xi="http://www.w3.org/2001/XInclude"/>

    <warning>
        <para>If the names of keys in the message is the same as the names of &abbrev; soft macros, the value from the parsed message will overwrite the value of the macro. For example, the <userinput>PROGRAM=value1, MESSAGE=value2</userinput> content will overwrite the <userinput>${PROGRAM}</userinput> and <userinput>${MESSAGE}</userinput> macros. To avoid overwriting such macros, use the <parameter>prefix()</parameter> option.</para>
        <para>Hard macros cannot be modified, so they will not be overwritten. For details on the macro types, see <xref linkend="macros-hard-vs-soft"/>.</para>
        <para>The parser discards message sections that are not <userinput>key=value</userinput> pairs, even if they appear between <userinput>key=value</userinput> pairs that can be parsed.</para>
    </warning>
    <para>To parse <userinput>key=value</userinput> pairs, define a parser that has the <parameter>kv-parser()</parameter> option. Defining the prefix is optional. By default, the parser will process the <userinput>${MESSAGE}</userinput> part of the log message. You can also define the parser inline in the log path.</para>
    <formalpara>
        <title>Declaration:</title>
        <para/>
    </formalpara>
    <synopsis>parser parser_name {
    kv-parser(
        prefix()
    );
};</synopsis>
    <example>
        <title>Using a <userinput>key=value</userinput> parser</title>
        <para>In the following example, the source is a log message consisting of comma-separated <userinput>key=value</userinput> pairs, for example, a Postfix log message:</para>
        <synopsis>Jun 20 12:05:12 mail.example.com &lt;info&gt; postfix/qmgr[35789]: EC2AC1947DA: from=&lt;me@example.com&gt;, size=807, nrcpt=1 (queue active)</synopsis>
        <para>The kv-parser inserts the "<userinput>.kv.</userinput>" prefix before all extracted name-value pairs. The destination is a file, that uses the <parameter>format-json</parameter> template function. Every name-value pair that begins with a dot ("<userinput>.</userinput>") character will be written to the file (<userinput>dot-nv-pairs</userinput>). The log line connects the source, the destination and the parser.</para>
        <synopsis>source s_kv {
    network(port(21514));
};

destination d_json {
    file("/tmp/test.json"
        template("$(format-json --scope dot-nv-pairs)\n"));
};

parser p_kv {
    kv-parser (prefix(".kv."));
};

log {
    source(s_kv);
    parser(p_kv);
    destination(d_json);
};</synopsis>
        <para>You can also define the parser inline in the log path.</para>
        <synopsis>source s_kv {
    network(port(21514));
};

destination d_json {
    file("/tmp/test.json"
        template("$(format-json --scope dot-nv-pairs)\n"));
};

log {
    source(s_kv);
    parser {
        kv-parser (prefix(".kv."));
    };
    destination(d_json);
};</synopsis>
    <para>You can set the separator character between the key and the value to parse for example <userinput>key:value</userinput> pairs, like MySQL logs:</para>
    <synopsis>Mar  7 12:39:25 myhost MysqlClient[20824]: SYSTEM_USER:'oscar', MYSQL_USER:'my_oscar', CONNECTION_ID:23, DB_SERVER:'127.0.0.1', DB:'--', QUERY:'USE test;'</synopsis>
    <synopsis>parser p_mysql { kv-parser(value-separator(":") prefix(".mysql."));</synopsis>
    </example>
    <section xml:id="kv-parser-options">
        <title>Options of <userinput>key=value</userinput> parsers</title>
        <para>The <parameter>kv-parser</parameter> has the following options.</para>
        <simplesect xml:id="kv-parser-prefix">
            <xi:include href="../../common/chunk/option-parser-prefix.xml" xmlns:xi="http://www.w3.org/2001/XInclude"/>
            <para>For example, to insert the <userinput>postfix</userinput> prefix when parsing Postfix log messages, use the <userinput>prefix(.postfix.)</userinput> option.</para>
        </simplesect>
        <simplesect>
            <xi:include href="../../common/chunk/option-parser-template.xml" xmlns:xi="http://www.w3.org/2001/XInclude"/>
        </simplesect>
        <simplesect>
            <title>value-separator()</title>
            <indexterm>
              <primary>value-separator()</primary>
            </indexterm>
            <informaltable frame="topbot" colsep="0" rowsep="0">
              <tgroup cols="2">
                  <colspec colnum="1" colwidth="50pt"/>
                  <tbody>
                      <row>
                          <entry>Synopsis:
                            <?dbhtml bgcolor="#D4D6EB" ?>
                            <?dbfo bgcolor="#D4D6EB" ?>
                          </entry>
                          <entry>value-separator()</entry>
                      </row>
                  </tbody>
              </tgroup>
            </informaltable>
            <para><emphasis role="bold">Description:</emphasis> Specifies the character that separates the keys from the values. Default value: <userinput>=</userinput></para>
            <para>For example, to parse <userinput>key:value</userinput> pairs, use <userinput>kv-parser(value-separator(":"));</userinput></para>
        </simplesect>
    </section>
</section>
