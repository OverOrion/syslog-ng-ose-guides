<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE section
 [  <!ENTITY % entities SYSTEM "../../common/syslog-ng-entities.ent">
 %entities;]>
<section xml:id="configuring-destinations-sql" xmlns="http://docbook.org/ns/docbook" version="5.0">
   <title><parameter>sql</parameter>: Storing messages in an SQL database</title>
    <indexterm> <primary>destination drivers</primary> <secondary><parameter>sql()</parameter> driver</secondary> </indexterm>
    <indexterm> <primary>destination drivers</primary> <secondary>database driver</secondary> </indexterm>
    <indexterm> <primary>sql destinations</primary> </indexterm>
    <para>The <parameter>sql()</parameter> driver sends messages into an SQL database. Currently the Microsoft SQL (MSSQL), MySQL, Oracle, PostgreSQL, and SQLite databases are supported.</para>
    <xi:include href="../../common/wnt/note-server-mode-only.xml" xmlns:xi="http://www.w3.org/2001/XInclude"/>
    <formalpara>
        <title>Declaration:</title>
        <para/>
    </formalpara>
    <synopsis>sql(database_type host_parameters database_parameters [options]);</synopsis>
    <para>The <parameter>sql()</parameter> driver has the following required parameters: <link linkend="sql-option-type"><parameter>type()</parameter></link>, <link linkend="sql-option-database"><parameter>database()</parameter></link>, <link linkend="sql-option-table"><parameter>table()</parameter></link>, <link linkend="sql-option-columns"><parameter>columns()</parameter></link>, and <link linkend="sql-option-values"><parameter>values()</parameter></link>.</para>
    <warning>
        <para>The syslog-ng application requires read and write access to the SQL table, otherwise it cannot verify that the destination table exists.</para>
        <para>Currently the syslog-ng application has default schemas for the different databases and uses these defaults if the database schema (for example columns and column types) is not defined in the configuration file. However, these schemas will be deprecated and specifying the exact database schema will be required in later versions of syslog-ng.</para>
    </warning>
    <note condition="pe">
        <para>In addition to the standard syslog-ng packages, the <parameter>sql()</parameter> destination requires database-specific packages to be installed. These packages are automatically installed by the binary syslog-ng installer.</para>
        <para>The <parameter>sql()</parameter> driver is currently not available for every platform that is supported by syslog-ng. For a list of platforms that support the <parameter>sql()</parameter> driver, <link xmlns:ns1="http://www.w3.org/1999/xlink" ns1:href="https://syslog-ng.com/log-management-software/supported-platforms">visit this link</link>.</para>
    </note>
    <para>The <parameter>table</parameter> and <parameter>value</parameter> parameters can include macros to create tables and columns dynamically (for details, see <xref linkend="reference-macros"/>).</para>
    <warning>
        <para>When using macros in table names, note that some databases limit the maximum allowed length of table names. Consult the documentation of the database for details.</para>
    </warning>
    <para>Inserting the records into the database is performed by a separate thread. The syslog-ng application automatically performs the escaping required to insert the messages into the database.</para>
    <example xml:id="example-destination-sql">
        <title>Using the sql() driver</title>
        <indexterm> <primary>destinations</primary> <secondary>sql() configuration</secondary> </indexterm>
        <indexterm> <primary>PostgreSQL</primary> <secondary>sql() configuration</secondary> </indexterm>
        <para>The following example sends the log messages into a PostgreSQL database running on the <userinput>logserver</userinput> host. The messages are inserted into the <userinput>logs</userinput> database, the name of the table includes the exact date and the name of the host sending the messages. The syslog-ng application automatically creates the required tables and columns, if the user account used to connect to the database has the required privileges.</para>
        <synopsis>destination d_sql {
  sql(type(pgsql)
  host("logserver") username("syslog-ng") password("password")
  database("logs")
  table("messages_${HOST}_${R_YEAR}${R_MONTH}${R_DAY}")
  columns("datetime", "host", "program", "pid", "message")
  values("{$R_DATE}", "${HOST}", "${PROGRAM}", "${PID}", "${MSGONLY}")
  indexes("datetime", "host", "program", "pid", "message"));
};</synopsis>
        <para>The following example specifies the type of the database columns as well:</para>
        <synopsis>destination d_sql {
  sql(type(pgsql)
  host("logserver") username("syslog-ng") password("password")
  database("logs")
  table("messages_${HOST}_${R_YEAR}${R_MONTH}${R_DAY}")
  columns("datetime varchar(16)", "host varchar(32)", "program  varchar(20)", "pid varchar(8)", "message  varchar(200)")
  values("${R_DATE}", "${HOST}", "${PROGRAM}", "${PID}", "${MSGONLY}")
  indexes("datetime", "host", "program", "pid", "message"));
};</synopsis>
    </example>
    <section xml:id="configuring-sql-oracle">
        <title>Using the sql() driver with an Oracle database</title>
        <indexterm> <primary>Oracle</primary> <secondary>sql() configuration</secondary> </indexterm>
        <para>The Oracle sql destination has some special aspects that are important to note.</para>
        <itemizedlist>
            <listitem>
                <para>The hostname of the database server is set in the <filename>tnsnames.ora</filename> file, not in the <parameter>host</parameter> parameter of the <parameter>sql()</parameter> destination.</para>
                <para>If the <filename>tnsnames.ora</filename> file is not located in the /etc directory (or in the /var/opt/oracle directory on Solaris), set the following Oracle-related environment variables, so &abbrev; will find the file: <parameter>ORACLE_BASE</parameter>, <parameter>ORACLE_HOME</parameter>, and <parameter>ORACLE_SID</parameter>. For details, see the documentation of the Oracle Instant Client.</para>
            </listitem>
            <listitem>
                <para>You cannot use the same <parameter>database()</parameter> settings in more than one destination, because the <parameter>database()</parameter> option of the SQL driver is just a reference to the connection string of the <filename>tnsnames.ora</filename> file. To overcome this problem, you can duplicate the connections in the <filename>tnsnames.ora</filename> file under a different name, and use a different table in each Oracle destination in &abbrev;.</para>
            </listitem>
            <listitem>
                <para>As certain database versions limit the maximum length of table names, macros in the table names should be used with care.</para>
            </listitem>
            <listitem>
                <!-- FIXME delete when solved -->
                <para>In the current version of &abbrev;, the types of database columns must be explicitly set for the Oracle destination. The column used to store the text part of the syslog messages should be able to store messages as long as the longest message permitted by syslog-ng, therefore it is usually recommended to use the <userinput>varchar2</userinput> or <userinput>clob</userinput> column type. (The maximum length of the messages can be set using the <parameter>log-msg-size()</parameter> option.) For details, see the following example.</para>
            </listitem>
            <listitem>
                <para>The Oracle Instant Client used by &abbrev; supports only the following character sets:</para>
                <itemizedlist>
                    <listitem>
                        <para>Single-byte character sets: <userinput>US7ASCII, WE8DEC, WE8MSWIN1252, and WE8ISO8859P1</userinput></para>
                    </listitem>
                    <listitem>
                        <para>Unicode character sets: <userinput>UTF8, AL16UTF16, and AL32UTF8</userinput></para>
                    </listitem>
                </itemizedlist>
            </listitem>
        </itemizedlist>
        <example xml:id="example-destination-sql-oracle">
            <title>Using the sql() driver with an Oracle database</title>
            <indexterm> <primary>destinations</primary> <secondary>sql() configuration</secondary> </indexterm>
            <indexterm> <primary>Oracle</primary> <secondary>sql() configuration</secondary> </indexterm>
            <para>The following example sends the log messages into an Oracle database running on the <userinput>logserver</userinput> host, which must be set in the <filename>/etc/tnsnames.ora</filename> file. The messages are inserted into the <userinput>LOGS</userinput> database, the name of the table includes the exact date when the messages were sent. The syslog-ng application automatically creates the required tables and columns, if the user account used to connect to the database has the required privileges.</para>
            <synopsis>destination d_sql {
  sql(type(oracle)
  username("syslog-ng") password("password")
  database("LOGS")
  table("msgs_${R_YEAR}${R_MONTH}${R_DAY}")
  columns("datetime varchar(16)", "host varchar(32)", "program varchar(32)", "pid varchar(8)", "message varchar2")
  values("${R_DATE}", "${HOST}", "${PROGRAM}", "${PID}", "${MSGONLY}")
  indexes("datetime", "host", "program", "pid", "message"));
};</synopsis>
            <para>The Oracle Instant Client retrieves the address of the database server from the <filename>/etc/tnsnames.ora</filename> file. Edit or create this file as needed for your configuration. A sample is provided below.</para>
            <synopsis>LOGS =
(DESCRIPTION =
(ADDRESS_LIST =
(ADDRESS = (PROTOCOL = TCP)
(HOST = logserver)
(PORT = 1521))
)
(CONNECT_DATA =
(SERVICE_NAME = EXAMPLE.SERVICE)
)
)</synopsis>
        </example>
    </section>
    <section xml:id="configuring-sql-mssql">
        <title>Using the sql() driver with a Microsoft SQL database</title>
        <indexterm> <primary>Microsoft SQL</primary> <secondary>sql() configuration</secondary> </indexterm>
        <indexterm> <primary>MSSQL</primary> <secondary>sql() configuration</secondary> </indexterm>
        <para>The <parameter>mssql</parameter> database driver can access Microsoft SQL (MSSQL) destinations. This driver has some special aspects that are important to note.</para>
        <itemizedlist>
            <listitem>
                <para>The date format used by the MSSQL database must be explicitly set in the <filename>/etc/locales.conf</filename> file of the syslog-ng server. For details, see the following example.</para>
            </listitem>
            <listitem>
                <para>As certain database versions limit the maximum length of table names, macros in the table names should be used with care.</para>
            </listitem>
            <listitem>
                <para>In the current version of &abbrev;, the types of database columns must be explicitly set for the MSSQL destination.</para>
                <xi:include href="../../common/wnt/warning-destination-mssql-columntypes.xml" xmlns:xi="http://www.w3.org/2001/XInclude"/>
            </listitem>
            <listitem>
                <para>The column used to store the text part of the syslog messages should be able to store messages as long as the longest message permitted by syslog-ng. The <parameter>varchar</parameter> column type can store maximum 4096 bytes-long messages. The maximum length of the messages can be set using the <parameter>log-msg-size()</parameter> option. For details, see the following example.</para>
            </listitem>
            <listitem>
                <para>Remote access for SQL users must be explicitly enabled on the Microsoft Windows host running the Microsoft SQL Server. For details, see <xref linkend="configure-mssql-server"/>.</para>
            </listitem>
        </itemizedlist>
        <example xml:id="example-destination-sql-mssql">
            <title>Using the sql() driver with an MSSQL database</title>
            <indexterm> <primary>destinations</primary> <secondary>sql() configuration</secondary> </indexterm>
            <indexterm> <primary>MSSQL</primary> <secondary>sql() configuration</secondary> </indexterm>
            <para>The following example sends the log messages into an MSSQL database running on the <userinput>logserver</userinput> host. The messages are inserted into the <userinput>syslogng</userinput> database, the name of the table includes the exact date when the messages were sent. The syslog-ng application automatically creates the required tables and columns, if the user account used to connect to the database has the required privileges.</para>
            <synopsis>destination d_mssql {
sql(type(mssql) host("logserver") port("1433")
  username("syslogng") password("syslogng") database("syslogng")
  table("msgs_${R_YEAR}${R_MONTH}${R_DAY}")columns("datetime varchar(16)", "host varchar(32)",
  "program varchar(32)", "pid varchar(8)", "message varchar(4096)")
  values("${R_DATE}", "${HOST}", "${PROGRAM}", "${PID}", "${MSGONLY}")
  indexes("datetime", "host", "program", "pid"));
};</synopsis>
            <para>The date format used by the MSSQL database must be explicitly set in the <filename>/etc/locales.conf</filename> file of the syslog-ng server. Edit or create this file as needed for your configuration. A sample is provided below.</para>
            <synopsis>[default]
date = "%Y-%m-%d %H:%M:%S"</synopsis>
        </example>
    </section>
    <section xml:id="sql-interactions-syslog-ng">
        <title>The way syslog-ng interacts with the database</title>
        <formalpara>
            <title>Used SQL operations by syslog-ng</title>
            <para/>
        </formalpara>
        <para><emphasis>Create table:</emphasis></para>
        <itemizedlist>
            <listitem>
                <para>If the given table does not exist, syslog-ng tries to create it with the given column types.</para>
            </listitem>
            <listitem>
                <para>The &abbrev; application automatically creates the required tables and columns, if the user account used to connect to the database has the required privileges.</para>
            </listitem>
            <listitem>
                <para>If syslog-ng cannot create or alter a table, it tries to do it again when it reaches the next <parameter>time-reopen()</parameter>.</para>
            </listitem>
        </itemizedlist>
        <para><emphasis>Alter table:</emphasis></para>
        <itemizedlist>
            <listitem>
                <para>If the table structure is different from given structure in an existing table, syslog-ng tries to add columns in this table but never will delete or modify an existing column.</para>
            </listitem>
            <listitem>
                <para>If &abbrev; cannot create or alter a table, it tries to do it again when reach the next <parameter>time-reopen()</parameter>.</para>
            </listitem>
            <listitem>
                <para>The &abbrev; application requires read and write access to the SQL table, otherwise it cannot verify that the destination table exists.</para>
            </listitem>
        </itemizedlist>
        <para><emphasis>Insert table:</emphasis></para>
        <itemizedlist>
            <listitem>
                <para>Insert new records in a table.</para>
            </listitem>
            <listitem>
                <para>Inserting the records into the database is performed by a separate thread.</para>
            </listitem>
            <listitem>
                <para>The &abbrev; application automatically performs the escaping required to insert the messages into the database.</para>
            </listitem>
            <listitem>
                <para>If insert returns with error, syslog-ng tries to insert the message +two times by default, then drops it. Retrying time is the value of <parameter>time-reopen()</parameter>.</para>
            </listitem>
        </itemizedlist>
        <formalpara>
            <title>Encoding</title>
            <para/>
        </formalpara>
        <para>The &abbrev; application uses UTF-8 by default when writes logs into database.</para>
        <formalpara>
            <title>Start/stop and reload</title>
            <para/>
        </formalpara>
        <para><emphasis>Start:</emphasis></para>
        <itemizedlist>
            <listitem>
                <para>The &abbrev; application will connect to database automatically after starting regardless existing incoming messages.</para>
            </listitem>
        </itemizedlist>
        <para><emphasis>Stop:</emphasis></para>
        <itemizedlist>
            <listitem>
                <para>The &abbrev; application will close the connection to database before shutting down.</para>
            </listitem>
        </itemizedlist>
        <para><emphasis>Possibility of losing logs:</emphasis></para>
        <itemizedlist>
            <listitem>
                <para>The &abbrev; application cannot lose logs during shutting down if disk buffer was given and it is not full yet.</para>
            </listitem>
            <listitem>
                <para>The &abbrev; application cannot lose logs during shutting down if disk buffer was not given.</para>
            </listitem>
        </itemizedlist>
        <para><emphasis>Reload:</emphasis></para>
        <itemizedlist>
            <listitem>
                <para>The &abbrev; application will close the connection to database if it received SIGHUP signal (reload).</para>
            </listitem>
            <listitem>
                <para>It will reconnect to the database when it tries to send a new message to this database again.</para>
            </listitem>
        </itemizedlist>
        <formalpara>
            <title>Macros:</title>
            <para/>
        </formalpara>
        <para>The value of ${SEQNUM} macro will be overrided by sql driver regardless of local or relayed incoming message.</para>
        <para>It will be grown continously.</para>
        <section>
            <title>MySQL-specific interaction methods</title>
            <para>To specify the socket to use, set and export the <parameter>MYSQL_UNIX_PORT</parameter> environment variable, for example <userinput>MYSQL_UNIX_PORT=/var/lib/mysql/mysql.sock; export MYSQL_UNIX_PORT</userinput>.</para>
        </section>
        <section>
            <title>MsSQL-specific interaction methods</title>
            <para>In SQL Server 2005 this restriction is lifted - kind of. The total length of all key columns in an index cannot exceed 900 bytes.</para>
            <para>If you are using <parameter>null()</parameter> in your configuration, be sure that the columns allow <parameter>NULL</parameter> to insert. Give the column as the following example: <userinput>"datetime varchar(16) NULL"</userinput>.</para>
            <para>The date format used by the MSSQL database must be explicitly set in the <filename>/etc/locales.conf</filename> file of the syslog-ng server. <userinput>[default] date = "%Y-%m-%d %H:%M:%S"</userinput>.</para>
        </section>
    </section>
    <section xml:id="reference-destination-sql">
        <title>sql() destination options</title>
        <indexterm> <primary>destination drivers</primary> <secondary><parameter>sql()</parameter> driver</secondary> </indexterm>
        <indexterm> <primary>destination drivers</primary> <secondary>database driver</secondary> </indexterm>
        <xi:include href="../../common/wnt/note-server-mode-only.xml" xmlns:xi="http://www.w3.org/2001/XInclude"/>
        <para>This driver sends messages into an SQL database. The <parameter>sql()</parameter> destination has the following options:</para>
        <simplesect xml:id="sql-option-columns">
            <title>columns()</title>
            <indexterm type="parameter"> <primary>columns()</primary> </indexterm>
            <informaltable frame="topbot" colsep="0" rowsep="0">
                <tgroup cols="2">
                    <colspec colnum="1" colwidth="40pt"/>
                    <tbody>
                        <row>
                            <entry>Type: <?dbhtml bgcolor="#D4D6EB" ?>
                                <?dbfo bgcolor="#D4D6EB" ?> </entry>
                            <entry>string list</entry>
                        </row>
                        <row>
                            <entry>Default: <?dbhtml bgcolor="#D4D6EB" ?>
                                <?dbfo bgcolor="#D4D6EB" ?> </entry>
                            <entry>"date", "facility", "level", "host", "program", "pid", "message"</entry>
                        </row>
                    </tbody>
                </tgroup>
            </informaltable>
            <para><emphasis role="bold">Description:</emphasis> Name of the columns storing the data in <userinput>fieldname [dbtype]</userinput> format. The <userinput>[dbtype]</userinput> parameter is optional, and specifies the type of the field. By default, &abbrev; creates <userinput>text</userinput> columns. Note that not every database engine can index text fields.</para>
            <xi:include href="../../common/wnt/warning-destination-mssql-columntypes.xml" xmlns:xi="http://www.w3.org/2001/XInclude"/>
        </simplesect>
        <simplesect xml:id="sql-option-database">
            <xi:include href="../../common/chunk/option-sql-database.xml" xmlns:xi="http://www.w3.org/2001/XInclude"/>
        </simplesect>
        <simplesect xml:id="sql-option-dbd-option">
            <title>dbd-option()</title>
            <indexterm type="parameter"> <primary>dbd-option()</primary> </indexterm>
            <informaltable frame="topbot" colsep="0" rowsep="0">
                <tgroup cols="2">
                    <colspec colnum="1" colwidth="40pt"/>
                    <tbody>
                        <row>
                            <entry>Type: <?dbhtml bgcolor="#D4D6EB" ?>
                                <?dbfo bgcolor="#D4D6EB" ?> </entry>
                            <entry>string</entry>
                        </row>
                        <row>
                            <entry>Default: <?dbhtml bgcolor="#D4D6EB" ?>
                                <?dbfo bgcolor="#D4D6EB" ?> </entry>
                            <entry>empty string</entry>
                        </row>
                    </tbody>
                </tgroup>
            </informaltable>
            <para><emphasis role="bold">Description:</emphasis> Specify database options that are set whenever &abbrev; connects to the database server. Consult the documentation of your database server for details on the available options. Syntax:</para>
            <synopsis>dbd-option(OPTION_NAME VALUE)</synopsis>
            <para>OPTION_NAME is always a string, VALUE is a string or a number. For example:</para>
            <synopsis>dbd-option("null.sleep.connect" 1)
dbd-option("null.sleep.query" 5)</synopsis>
        </simplesect>
        <simplesect>
            <xi:include href="../../common/chunk/option-destination-diskbuffer.xml" xmlns:xi="http://www.w3.org/2001/XInclude"/>
        </simplesect>
        <simplesect xml:id="sql-option-flags">
            <title>flags()</title>
            <indexterm type="parameter"> <primary>flags()</primary> <secondary>for SQL destinations</secondary> </indexterm>
            <informaltable frame="topbot" colsep="0" rowsep="0">
                <tgroup cols="2">
                    <colspec colnum="1" colwidth="40pt"/>
                    <tbody>
                        <row>
                            <entry>Type: <?dbhtml bgcolor="#D4D6EB" ?>
                                <?dbfo bgcolor="#D4D6EB" ?> </entry>
                            <entry>list of flags</entry>
                        </row>
                        <row>
                            <entry>Default: <?dbhtml bgcolor="#D4D6EB" ?>
                                <?dbfo bgcolor="#D4D6EB" ?> </entry>
                            <entry>empty string</entry>
                        </row>
                    </tbody>
                </tgroup>
            </informaltable>
            <para><emphasis role="bold">Description:</emphasis> Flags related to the <parameter>sql()</parameter> destination.</para>
            <itemizedlist>
                <listitem>
                    <para><emphasis>dont-create-tables</emphasis>: Enable this flag to prevent &abbrev; from creating non-existing database tables automatically. The &abbrev; application typically has to create tables if you use macros in the table names. Available in &abbrev; version <phrase condition="ose">3.2</phrase><phrase condition="pe">4.0</phrase> and later.</para>
                    <indexterm type="parameter"> <primary>dont-create-tables</primary> </indexterm>
                </listitem>
                <listitem>
                    <para><emphasis>explicit-commits</emphasis>: By default, &abbrev; commits every log message to the target database individually. When the <parameter>explicit-commits</parameter> option is enabled, messages are committed in batches. This improves the performance, but results in some latency, as the messages are not immediately sent to the database. The size and frequency of batched commits can be set using the <parameter>flush-lines()</parameter> and <parameter>flush-timeout()</parameter> parameters. The <parameter>explicit-commits</parameter> option is available in &abbrev; version <phrase condition="ose">3.2</phrase><phrase condition="pe">4.0</phrase> and later.</para>
                    <indexterm type="parameter"> <primary>explicit-commits</primary> </indexterm>
                </listitem>
            </itemizedlist>
            <example>
                <title>Setting flags for SQL destinations</title>
                <para>The following example sets the <parameter>dont-create-tables</parameter> and <parameter>explicit-commits</parameter> flags for an <parameter>sql()</parameter> destination.</para>
                <synopsis>flags(dont-create-tables,explicit-commits)</synopsis>
            </example>
        </simplesect>
        <simplesect>
            <xi:include href="../../common/chunk/option-destination-flush-lines.xml" xmlns:xi="http://www.w3.org/2001/XInclude"/>
        </simplesect>
        <simplesect>
            <xi:include href="../../common/chunk/option-destination-flush-timeout.xml" xmlns:xi="http://www.w3.org/2001/XInclude"/>
        </simplesect>
        <simplesect>
            <xi:include href="../../common/chunk/option-destination-frac-digits.xml" xmlns:xi="http://www.w3.org/2001/XInclude"/>
        </simplesect>
        <simplesect xml:id="sql-option-host">
            <xi:include href="../../common/chunk/option-sql-host.xml" xmlns:xi="http://www.w3.org/2001/XInclude"/>
        </simplesect>
        <simplesect xml:id="sql-option-indexes">
            <title>indexes()</title>
            <indexterm type="parameter"> <primary>indexes()</primary> </indexterm>
            <informaltable frame="topbot" colsep="0" rowsep="0">
                <tgroup cols="2">
                    <colspec colnum="1" colwidth="40pt"/>
                    <tbody>
                        <row>
                            <entry>Type: <?dbhtml bgcolor="#D4D6EB" ?>
                                <?dbfo bgcolor="#D4D6EB" ?> </entry>
                            <entry>string list</entry>
                        </row>
                        <row>
                            <entry>Default: <?dbhtml bgcolor="#D4D6EB" ?>
                                <?dbfo bgcolor="#D4D6EB" ?> </entry>
                            <entry>"date", "facility", "host", "program"</entry>
                        </row>
                    </tbody>
                </tgroup>
            </informaltable>
            <para><emphasis role="bold">Description:</emphasis> The list of columns that are indexed by the database to speed up searching. To disable indexing for the destination, include the empty <parameter>indexes()</parameter> parameter in the destination, simply omitting the <parameter>indexes</parameter> parameter will cause syslog-ng to request indexing on the default columns.</para>
            <para>The &abbrev; application will create the name of indexes automaticaly with the following method:</para>
            <itemizedlist>
                <listitem>
                    <para>In case of MsSQL, PostgreSQL, MySQL or SQLite or (Oracle but tablename &lt; 30 characters): <userinput>{table}_{column}_idx</userinput>.</para>
                </listitem>
                <listitem>
                    <para>In case of Oracle and tablename &gt; 30 characters: <userinput>md5sum of {table}_{column}-1</userinput> and the first character will be replaced by "i" character and the md5sum will be truncated to 30 characters.</para>
                </listitem>
            </itemizedlist>
        </simplesect>
        <simplesect>
            <xi:include href="../../common/chunk/option-destination-local-timezone.xml" xmlns:xi="http://www.w3.org/2001/XInclude"/>
        </simplesect>
        <simplesect>
            <xi:include href="../../common/chunk/option-destination-log-fifo-size.xml" xmlns:xi="http://www.w3.org/2001/XInclude"/>
        </simplesect>
        <simplesect xml:id="sql-option-null">
            <title>null()</title>
            <indexterm type="parameter"> <primary>null()</primary> </indexterm>
            <informaltable frame="topbot" colsep="0" rowsep="0">
                <tgroup cols="2">
                    <colspec colnum="1" colwidth="40pt"/>
                    <tbody>
                        <row>
                            <entry>Type: <?dbhtml bgcolor="#D4D6EB" ?>
                                <?dbfo bgcolor="#D4D6EB" ?> </entry>
                            <entry>string</entry>
                        </row>
                        <row>
                            <entry>Default: <?dbhtml bgcolor="#D4D6EB" ?>
                                <?dbfo bgcolor="#D4D6EB" ?> </entry>
                            <entry/>
                        </row>
                    </tbody>
                </tgroup>
            </informaltable>
            <para><emphasis role="bold">Description:</emphasis> If the content of a column matches the string specified in the <parameter>null()</parameter> parameter, the contents of the column will be replaced with an SQL NULL value. If unset (by default), the option does not match on any string. For details, see the <xref linkend="example-destination-sql-null"/>.</para>
            <example xml:id="example-destination-sql-null">
                <title>Using SQL NULL values</title>
                <indexterm> <primary>destinations</primary> <secondary>sql() configuration</secondary> </indexterm>
                <indexterm> <primary>SQL NULL values</primary> </indexterm>
                <para>The <parameter>null()</parameter> parameter of the SQL driver can be used to replace the contents of a column with a special SQL NULL value. To replace every column that contains an empty string with NULL, use the <userinput>null("")</userinput> option, for example</para>
                <synopsis>destination d_sql {
    sql(type(pgsql)
    host("logserver") username("syslog-ng") password("password")
    database("logs")
    table("messages_${HOST}_${R_YEAR}${R_MONTH}${R_DAY}")
    columns("datetime", "host", "program", "pid", "message")
    values("${R_DATE}", "${HOST}", "${PROGRAM}", "${PID}", "${MSGONLY}")
    indexes("datetime", "host", "program", "pid", "message")
    null(""));
};</synopsis>
                <para>To replace only a specific column (for example <parameter>pid</parameter>) if it is empty, assign a default value to the column, and use this default value in the <parameter>null()</parameter> parameter:</para>
                <synopsis>destination d_sql {
    sql(type(pgsql)
    host("logserver") username("syslog-ng") password("password")
    database("logs")
    table("messages_${HOST}_${R_YEAR}${R_MONTH}${R_DAY}")
    columns("datetime", "host", "program", "pid", "message")
    values("${R_DATE}", "${HOST}", "${PROGRAM}", "${PID:-@@NULL@@}", "${MSGONLY}")
    indexes("datetime", "host", "program", "pid", "message")
    null("@@NULL@@"));
};</synopsis>
                <para>Ensure that the default value you use does not appear in the actual log messages, because other occurrences of this string will be replaced with NULL as well.</para>
            </example>
        </simplesect>
        <simplesect xml:id="sql-option-password">
            <xi:include href="../../common/chunk/option-sql-password.xml" xmlns:xi="http://www.w3.org/2001/XInclude"/>
        </simplesect>
        <simplesect xml:id="sql-option-port">
            <xi:include href="../../common/chunk/option-sql-port.xml" xmlns:xi="http://www.w3.org/2001/XInclude"/>
        </simplesect>
        <simplesect xml:id="sql-option-retry-sql-inserts">
            <title>retries()</title>
            <indexterm type="parameter"> <primary>retry_sql_inserts</primary>
                <!-- This is an alias used in older documentation releases --> </indexterm>
            <indexterm type="parameter"> <primary>retries()</primary> </indexterm>
            <informaltable frame="topbot" colsep="0" rowsep="0">
                <tgroup cols="2">
                    <colspec colnum="1" colwidth="40pt"/>
                    <tbody>
                        <row>
                            <entry>Type: <?dbhtml bgcolor="#D4D6EB" ?>
                                <?dbfo bgcolor="#D4D6EB" ?> </entry>
                            <entry>number (insertion attempts)</entry>
                        </row>
                        <row>
                            <entry>Default: <?dbhtml bgcolor="#D4D6EB" ?>
                                <?dbfo bgcolor="#D4D6EB" ?> </entry>
                            <entry>3</entry>
                        </row>
                    </tbody>
                </tgroup>
            </informaltable>
            <para><emphasis role="bold">Description:</emphasis> The number of insertion attempts. If &abbrev; could not insert a message into the database, it will repeat the attempt until the number of attempts reaches <parameter>retries</parameter>, then drops the connection to the database. For example, &abbrev; will try to insert a message maximum three times by default (once for first insertion and twice if the first insertion was failed).</para>
        </simplesect>
        <simplesect xml:id="sql-option-session-statements">
            <title>session-statements()</title>
            <indexterm type="parameter"> <primary>session-statements()</primary> </indexterm>
            <indexterm> <primary>session_statements()</primary> </indexterm>
            <informaltable frame="topbot" colsep="0" rowsep="0">
                <tgroup cols="2">
                    <colspec colnum="1" colwidth="40pt"/>
                    <tbody>
                        <row>
                            <entry>Type: <?dbhtml bgcolor="#D4D6EB" ?>
                                <?dbfo bgcolor="#D4D6EB" ?> </entry>
                            <entry>comma-separated list of SQL statements</entry>
                        </row>
                        <row>
                            <entry>Default: <?dbhtml bgcolor="#D4D6EB" ?>
                                <?dbfo bgcolor="#D4D6EB" ?> </entry>
                            <entry>empty string</entry>
                        </row>
                    </tbody>
                </tgroup>
            </informaltable>
            <para><emphasis role="bold">Description:</emphasis> Specifies one or more SQL-like statement which is executed after &abbrev; has successfully connected to the database. For example:</para>
            <synopsis>session-statements("SET COLLATION_CONNECTION='utf8_general_ci'")</synopsis>
            <warning>
                <para>The &abbrev; application does not validate or limit the contents of customized queries. Consequently, queries performed with a user with write-access can potentially modify or even harm the database. Use customized queries with care, and only for your own responsibility.</para>
            </warning>
        </simplesect>
        <simplesect xml:id="sql-option-table">
            <title>table()</title>
            <indexterm type="parameter"> <primary>table()</primary> </indexterm>
            <informaltable frame="topbot" colsep="0" rowsep="0">
                <tgroup cols="2">
                    <colspec colnum="1" colwidth="40pt"/>
                    <tbody>
                        <row>
                            <entry>Type: <?dbhtml bgcolor="#D4D6EB" ?>
                                <?dbfo bgcolor="#D4D6EB" ?> </entry>
                            <entry>string</entry>
                        </row>
                        <row>
                            <entry>Default: <?dbhtml bgcolor="#D4D6EB" ?>
                                <?dbfo bgcolor="#D4D6EB" ?> </entry>
                            <entry>messages</entry>
                        </row>
                    </tbody>
                </tgroup>
            </informaltable>
            <para><emphasis role="bold">Description:</emphasis> Name of the database table to use (can include macros). When using macros, note that some databases limit the length of table names.</para>
        </simplesect>
        <simplesect>
            <xi:include href="../../common/chunk/option-destination-timezone.xml" xmlns:xi="http://www.w3.org/2001/XInclude"/>
        </simplesect>
        <simplesect xml:id="sql-option-type">
            <title>type()</title>
            <indexterm type="parameter"> <primary>type()</primary> </indexterm>
            <informaltable frame="topbot" colsep="0" rowsep="0">
                <tgroup cols="2">
                    <colspec colnum="1" colwidth="40pt"/>
                    <tbody>
                        <row>
                            <entry>Type: <?dbhtml bgcolor="#D4D6EB" ?>
                                <?dbfo bgcolor="#D4D6EB" ?> </entry>
                            <entry>mssql, mysql, oracle, pgsql, or sqlite3</entry>
                        </row>
                        <row>
                            <entry>Default: <?dbhtml bgcolor="#D4D6EB" ?>
                                <?dbfo bgcolor="#D4D6EB" ?> </entry>
                            <entry>mysql</entry>
                        </row>
                    </tbody>
                </tgroup>
            </informaltable>
            <xi:include href="../../common/chunk/option-description-sql-type.xml" xmlns:xi="http://www.w3.org/2001/XInclude"/>
        </simplesect>
        <simplesect>
            <xi:include href="../../common/chunk/option-sql-username.xml" xmlns:xi="http://www.w3.org/2001/XInclude"/>
        </simplesect>
        <simplesect xml:id="sql-option-values">
            <title>values()</title>
            <indexterm type="parameter"> <primary>values()</primary> </indexterm>
            <informaltable frame="topbot" colsep="0" rowsep="0">
                <tgroup cols="2">
                    <colspec colnum="1" colwidth="40pt"/>
                    <tbody>
                        <row>
                            <entry>Type: <?dbhtml bgcolor="#D4D6EB" ?>
                                <?dbfo bgcolor="#D4D6EB" ?> </entry>
                            <entry>string list</entry>
                        </row>
                        <row>
                            <entry>Default: <?dbhtml bgcolor="#D4D6EB" ?>
                                <?dbfo bgcolor="#D4D6EB" ?> </entry>
                            <entry>"${R_YEAR}-${R_MONTH}-${R_DAY}, ${R_HOUR}:${R_MIN}:${R_SEC}", "${FACILITY}", "${LEVEL}", "${HOST}", "${PROGRAM}", "${PID}", "${MSGONLY}"</entry>
                        </row>
                    </tbody>
                </tgroup>
            </informaltable>
            <para><emphasis role="bold">Description:</emphasis> The parts of the message to store in the fields specified in the <parameter>columns()</parameter> parameter.</para>
            <para>It is possible to give a special value calling: default (without quotation marks).It means that the value will be used that is the default of the column type of this value.</para>
            <example>
                <title>Value: default</title>
                <synopsis>columns("date datetime", "host varchar(32)", "row_id serial")
    values("${R_DATE}", "${HOST}", default)</synopsis>
            </example>
        </simplesect>
    </section>
</section>
