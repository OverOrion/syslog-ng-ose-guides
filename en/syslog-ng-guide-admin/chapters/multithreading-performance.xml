<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE section
 [  <!ENTITY % entities SYSTEM "../../xml-stylesheet/common/universal-entities.ent">
 %entities;]>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xml:id="section-multithreading-performance">
    <title>Optimizing multithreaded performance</title>
    <indexterm> <primary>performance</primary> <secondary>optimizing multithreading</secondary> </indexterm>
    <formalpara>
        <title>Sources:</title>
        <para/>
    </formalpara>
    <para>File sources scale based on the number of files that the &abbrev; is reading. If there are 10 files all coming to the same source, then that source can use 10 threads, one thread for each file.</para>
    <note>
        <para>When collecting log messages from multiple files, the file source is a <parameter>wildcard-file()</parameter> source.</para>
    </note>
    <para>TCP-based network sources scale based on the number of active connections. This means that if there are 10 incoming connections all coming to the same source, then that source can use 10 threads, one thread for each connection.</para>
    <note>
        <para>UDP-based network sources do not scale by themselves because they always use a single thread. If you want to handle a large number of UDP connections, it is best to configure a subset of your clients to send the messages to a different port of your syslog-ng server, and use separate source definitions for each port.</para>
    </note>
    <figure xml:id="fig-multithreading">
        <title>How multithreading works &mdash; sources</title>
        <mediaobject>
            <imageobject role="html">
                <imagedata format="PNG" fileref="multithreading-sources.png" contentwidth="&webscreenshotscale;"/>
            </imageobject>
            <imageobject role="fo">
                <imagedata format="PNG" fileref="&imgroot;/multithreading-sources.png" contentwidth="&screenshotsize;"/>
            </imageobject>
        </mediaobject>
    </figure>
    <formalpara>
        <title>Message processors:</title>
        <para/>
    </formalpara>
    <para>Message processors &mdash; such as filters, rewrite rules, and parsers &mdash; are executed by the reader thread in a sequential manner.</para>
    <para>For example, if you have a log path that defines two sources and a filter, the filter will be performed by the source1 reader thread when log messages come from source1, and by the source2 reader thread when log messages come from source2. This means that if log messages come from both source1 and source2, they will both have a reader thread and that way filtering will be performed simultaneously. </para>
    <note>
        <para>This is not true for PatternDB because it uses message correlation. When using PatternDB, it runs in only one thread at a time, and this significantly decreases performance.</para>
    </note>
    <formalpara>
        <title>Destinations:</title>
        <para/>
    </formalpara>
    <para>In syslog-ng, every destination has a writer thread. To improve scaling on the destination side, use multiple destinations instead of one.</para>
    <para>For example, when sending messages to a syslog-ng server, you can use multiple connections to the server if you configure the syslog-ng server to receive messages on multiple ports, and configure the clients to use both ports.</para>
    <para>When writing the log messages to files, use macros in the filename to split the messages to separate files (for example, using the ${HOST} macro). Files with macros in their filenames are processed in separate writer threads.</para>
    <figure>
        <title>How multithreading works &mdash; destinations</title>
        <mediaobject>
            <imageobject role="html">
                <imagedata format="PNG" fileref="multithreading-destinations.png" contentwidth="&webscreenshotscale;"/>
            </imageobject>
            <imageobject role="fo">
                <imagedata format="PNG" fileref="&imgroot;/multithreading-destinations.png" contentwidth="&screenshotsize;"/>
            </imageobject>
        </mediaobject>
    </figure>
</section>
