<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE section
 [  <!ENTITY % entities SYSTEM "../../common/syslog-ng-entities.ent">
 %entities;]>
<section xml:id="syslog-ng-source-snmptrap" xmlns="http://docbook.org/ns/docbook" version="5.0">
    <title><parameter>snmptrap</parameter>: Read Net-SNMP traps</title>
    <indexterm>
        <primary>source drivers</primary>
        <secondary><parameter>snmptrap()</parameter> driver</secondary>
    </indexterm>
    <indexterm>
        <primary>NET-SNMP</primary>
    </indexterm>
    <indexterm>
        <primary>snmptrapd</primary>
    </indexterm>
    <para>Using the <parameter>snmptrap()</parameter> source, you can read and parse the SNMP traps of the <link xmlns:ns1="http://www.w3.org/1999/xlink" ns1:href="http://www.net-snmp.org">Net-SNMP</link>'s <filename>snmptrapd</filename> application. &abbrev; can read these traps from a log file, and extract their content into name-value pairs, making it easy to forward them as a structured log message (for example, in JSON format). The &abbrev; application automatically adds the <parameter>.snmp.</parameter> prefix to the name of the fields the extracted from the message.</para>
    <para>The <parameter>snmptrap()</parameter> source is available in &abbrev; version <phrase condition="ose">3.10</phrase><phrase condition="pe">7.0.3</phrase> and later.</para>
    <formalpara>
        <title>Limitations:</title>
        <para/>
    </formalpara>
    <itemizedlist>
        <listitem>
            <para>The <parameter>snmptrap()</parameter> source has only the options listed in <xref linkend="reference-source-snmptrap"/>. Other options commonly available in other source drivers are not supported.</para>
        </listitem>
        <listitem>

             <xi:include href="../../common/chunk/para-snmptrap-discards-messages.xml" xmlns:xi="http://www.w3.org/2001/XInclude"/>

        </listitem>
        <listitem>
            <para></para>
<!--
There is another bug in which snmptrapd doesn't quote STRING values in the VarBindList. This only happens if the given OID is resolved to a symbolic name.
-->
        </listitem>
        <listitem>
            <para>The colon (<userinput>:</userinput>) character is commonly used in SNMP traps. However, this character cannot be used in the name of &abbrev; macros (name-value pairs). Therefore, the &abbrev; application automatically replaces all consecutive <userinput>:</userinput> characters with a single underscore (<userinput>_</userinput>) character. For example, you can reference the value of the <userinput>NET-SNMP-EXAMPLES-MIB::netSnmpExampleString</userinput> key using the <userinput>${NET-SNMP-EXAMPLES-MIB_netSnmpExampleString}</userinput> macro.</para>
            <para>Note that this affects only name-value pairs (macros). The generated message always contains the original name of the key.</para>
        </listitem>
    </itemizedlist>
    <formalpara>
        <title>Prerequisites:</title>
        <para/>
    </formalpara>
    <itemizedlist>
        <listitem>
            <para>Configure <command>snmptrapd</command> to log into a file.</para>
            <!--
         Due to a bug in snmptrapd, if you specify the filename in the configuration file with 'logOption', the trap format won't be applied unless you also specify another output as a command line argument (-Lf, -Ls).
-->
        </listitem>
        <listitem>
            <para>If you use SMIv1 traps, include the following format string in the configuration file of <command>snmptrapd</command>:</para>
            <synopsis>format1 %.4y-%.2m-%.2l %.2h:%.2j:%.2k %B [%b]: %N\n\t%W Trap (%q) Uptime: %#T\n%v\n</synopsis>
        </listitem>
        <listitem>
            <para>If you use SMIv2 traps, use the default format. The <parameter>snmptrap()</parameter> source of &abbrev; expects this default format:</para>
            <synopsis>format2 %.4y-%.2m-%.2l %.2h:%.2j:%.2k %B [%b]:\n%v\n</synopsis>
        </listitem>
        <listitem>
            <para>If you specify the filename in the configuration file with <userinput>logOption</userinput>, you must also specify another output as a command line argument (-Lf, -Ls). Otherwise, <command>snmptrapd</command> will not apply the the trap format.</para>
        </listitem>
    </itemizedlist>


    <para>To use the <parameter>snmptrap()</parameter> driver, the <filename>scl.conf</filename> file must be included in your &abbrev; configuration:</para>
    <synopsis>@include "scl.conf"</synopsis>
    <example xml:id="example-source-snmptrap">
        <title>Using the snmptrap() driver</title>
        <para>A sample <filename>snmptrapd</filename> configuration:</para>
        <synopsis>authCommunity log,execute,net public
format1 %.4y-%.2m-%.2l %.2h:%.2j:%.2k %B [%b]: %N\n\t%W Trap (%q) Uptime: %#T\n%v\n
outputOption s</synopsis>
        <para>Starting <filename>snmptrapd</filename>: <command>snmptrapd -A -Lf /var/log/snmptrapd.log</command></para>
        <para>Sending a sample V2 trap message: <command>snmptrap -v2c -c public 127.0.0.1 666 NET-SNMP-EXAMPLES-MIB::netSnmpExampleHeartbeatNotification netSnmpExampleHeartbeatRate i 60 netSnmpExampleString s "string"</command>. From this trap, &abbrev; receives the following input:</para>
        <synopsis>2017-05-23 15:29:40 localhost [UDP: [127.0.0.1]:59993->[127.0.0.1]:162]:
SNMPv2-SMI::mib-2.1.3.0 = Timeticks: (666) 0:00:06.66   SNMPv2-SMI::snmpModules.1.1.4.1.0 = OID: NET-SNMP-EXAMPLES-MIB::netSnmpExampleHeartbeatNotification     NET-SNMP-EXAMPLES-MIB::netSnmpExampleHeartbeatRate = INTEGER: 60        NET-SNMP-EXAMPLES-MIB::netSnmpExampleString = STRING: string</synopsis>
        <para>The following &abbrev; configuration sample uses the default settings of the driver, reading SNMP traps from the <filename>/var/log/snmptrapd.log</filename> file, and writes the log messages generated from the traps into a file.</para>
        <synopsis>@include "scl.conf"
log {
  source {
    snmptrap(filename("/var/log/snmptrapd.log"));
  };
  destination {
    file("/var/log/example.log");
  };
};</synopsis>
        <para>From the trap, &abbrev; writes the following into the log file:</para>
        <synopsis>May 23 15:29:40 AnnoL snmptrapd: hostname='localhost', transport_info='UDP: [127.0.0.1]:59993->[127.0.0.1]:162', SNMPv2-SMI::mib-2.1.3.0='(666) 0:00:06.66', SNMPv2-SMI::snmpModules.1.1.4.1.0='NET-SNMP-EXAMPLES-MIB::netSnmpExampleHeartbeatNotification', NET-SNMP-EXAMPLES-MIB::netSnmpExampleHeartbeatRate='60', NET-SNMP-EXAMPLES-MIB::netSnmpExampleString='string'</synopsis>
        <para>Using the same input trap, the following configuration example formats the SNMP traps as JSON messages.</para>
        <synopsis>@include "scl.conf"
log {
  source {
    snmptrap(
      filename("/var/log/snmptrapd.log")
      set-message-macro(no)
      prefix(".custom.snmp.")
    );
  };

  destination {
    file("/var/log/example.log" template("$(format-json --scope dot-nv-pairs)\n"));
  };
};</synopsis>
    <para>The previous trap formatted as JSON:</para>
    <synopsis>{
   "_snmp":{
      "transport_info":"UDP: [127.0.0.1]:59993->[127.0.0.1]:162",
      "hostname":"localhost",
      "SNMPv2-SMI_snmpModules":{
         "1":{
            "1":{
               "4":{
                  "1":{
                     "0":"NET-SNMP-EXAMPLES-MIB::netSnmpExampleHeartbeatNotification"
                  }
               }
            }
         }
      },
      "SNMPv2-SMI_mib-2":{
         "1":{
            "3":{
               "0":"(666) 0:00:06.66"
            }
         }
      },
      "NET-SNMP-EXAMPLES-MIB_netSnmpExampleString":"string",
      "NET-SNMP-EXAMPLES-MIB_netSnmpExampleHeartbeatRate":"60"
   }
}</synopsis>
    </example>
    <section xml:id="reference-source-snmptrap">
        <title>snmptrap() source options</title>
        <indexterm>
            <primary>source drivers</primary>
            <secondary><parameter>snmptrap()</parameter> driver</secondary>
        </indexterm>
        <indexterm>
            <primary>Net-SNMP</primary>
        </indexterm>
        <para>The <parameter>snmptrap()</parameter> driver has the following options. Only the <parameter>filename()</parameter> option is required, the others are optional.</para>
        <simplesect xml:id="snmptrap-filename">
            <title>filename()</title>
            <indexterm type="parameter">
                <primary>filename()</primary>
            </indexterm>
            <informaltable frame="topbot" colsep="0" rowsep="0">
                <tgroup cols="2">
                    <colspec colnum="1" colwidth="40pt"/>
                    <tbody>
                        <row>
                            <entry>Type: <?dbhtml bgcolor="#D4D6EB" ?>
<?dbfo bgcolor="#D4D6EB" ?>
                            </entry>
                            <entry>path</entry>
                        </row>
                        <row>
                            <entry>Default: <?dbhtml bgcolor="#D4D6EB" ?>
<?dbfo bgcolor="#D4D6EB" ?>
                            </entry>
                            <entry></entry>
                        </row>
                    </tbody>
                </tgroup>
            </informaltable>
            <para><emphasis role="bold">Description:</emphasis> The log file of <command>snmptrapd</command>. The &abbrev; application reads the traps from this file.</para>

            <xi:include href="../../common/chunk/para-snmptrap-discards-messages.xml" xmlns:xi="http://www.w3.org/2001/XInclude"/>

        </simplesect>
        <simplesect xml:id="snmptrap-persist-name">
            <title>persist-name()</title>
            <indexterm type="parameter">
                <primary>persist-name()</primary>
            </indexterm>
            <informaltable frame="topbot" colsep="0" rowsep="0">
                <tgroup cols="2">
                    <colspec colnum="1" colwidth="40pt"/>
                    <tbody>
                        <row>
                            <entry>Type: <?dbhtml bgcolor="#D4D6EB" ?>
<?dbfo bgcolor="#D4D6EB" ?>
                            </entry>
                            <entry>string</entry>
                        </row>
                        <row>
                            <entry>Default: <?dbhtml bgcolor="#D4D6EB" ?>
<?dbfo bgcolor="#D4D6EB" ?>
                            </entry>
                            <entry></entry>
                        </row>
                    </tbody>
                </tgroup>
            </informaltable>
            <para><emphasis role="bold">Description:</emphasis> If you want to use the <parameter>snmptrap()</parameter> source in multiple log paths, set the <parameter>persist-name()</parameter> option to a custom string, for example, <userinput>persist-name("example-persist-name")</userinput>. Otherwise, &abbrev; cannot ensure that it reads every trap in every log path from the source.</para>
        </simplesect>
        <simplesect xml:id="snmptrap-prefix">
            <xi:include href="../../common/chunk/option-parser-prefix.xml" xmlns:xi="http://www.w3.org/2001/XInclude"/>
            <para>Default value: <userinput>.snmp.</userinput> option.</para>
        </simplesect>
        <simplesect xml:id="snmptrap-set-message-macro">
            <title>set-message-macro()</title>
            <indexterm type="parameter">
                <primary>set-message-macro()</primary>
            </indexterm>
            <informaltable frame="topbot" colsep="0" rowsep="0">
                <tgroup cols="2">
                    <colspec colnum="1" colwidth="40pt"/>
                    <tbody>
                        <row>
                            <entry>Type: <?dbhtml bgcolor="#D4D6EB" ?>
<?dbfo bgcolor="#D4D6EB" ?>
                            </entry>
                            <entry>yes|no</entry>
                        </row>
                        <row>
                            <entry>Default: <?dbhtml bgcolor="#D4D6EB" ?>
<?dbfo bgcolor="#D4D6EB" ?>
                            </entry>
                            <entry>yes</entry>
                        </row>
                    </tbody>
                </tgroup>
            </informaltable>
            <para><emphasis role="bold">Description:</emphasis> The <parameter>snmptrap()</parameter> source automatically parses the traps into name-value pairs, so you can handle the content of the trap as a structured message. Consequently, you might not even need the <userinput>${MESSAGE}</userinput> part of the log message. If <parameter>set-message-macro()</parameter> is set to <userinput>no</userinput>, &abbrev; leaves the <userinput>${MESSAGE}</userinput> part empty. If <parameter>set-message-macro()</parameter> is set to <userinput>yes</userinput>, &abbrev; generates a regular log message from the trap.</para>
        </simplesect>
    </section>
</section>
