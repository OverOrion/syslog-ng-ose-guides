<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE section
 [  <!ENTITY % entities SYSTEM "../../common/syslog-ng-entities.ent">
 %entities;]>
<section xml:id="syslog-ng-source-osquery" xmlns="http://docbook.org/ns/docbook" version="5.0">
    <title><parameter>osquery</parameter>: Collect and parse osquery result logs</title>
    <indexterm>
        <primary>source drivers</primary>
        <secondary><parameter>osquery()</parameter> driver</secondary>
    </indexterm>
    <indexterm>
        <primary>osquery</primary>
    </indexterm>
    <indexterm>
        <primary>monitoring</primary>
    </indexterm>
    <para>The <link xmlns:ns1="http://www.w3.org/1999/xlink" ns1:href="https://osquery.io">osquery</link> application allows you to ask questions about your machine using an SQL-like language. For example, you can query running processes, logged in users, installed packages and syslog messages as well. You can make queries on demand, and also schedule them to run regularly.</para>
    <para>The <parameter>osquery()</parameter> source of &abbrev; allows you read the results of periodical osquery queries (from the <filename>/var/log/osquery/osqueryd.results.log</filename> file) and automatically parse the messages (if you want to use &abbrev; to <link xmlns:ns1="http://www.w3.org/1999/xlink" ns1:href="https://www.balabit.com/blog/endpoint-visibility-and-monitoring-using-osquery-and-syslog-ng/">send log messages to osquery, read this blogpost</link>). For example, you can:</para>
    <itemizedlist>
        <listitem>
            <para>Create filters from the fields of the messages.</para>
        </listitem>
        <listitem>
            <para>Limit which fields to store, or create additional fields (combine multiple fields into one filed, and so on).</para>
        </listitem>
        <listitem>
            <para>Send the messages to a central location, for example, to Elasticsearch, directly from &abbrev;.</para>
        </listitem>
    </itemizedlist>
    <para>The &abbrev; application automatically adds the <parameter>.osquery.</parameter> prefix to the name of the fields the extracted from the message.</para>
    <para>The <parameter>osquery()</parameter> source is available in &abbrev; version <phrase condition="ose">3.10</phrase><phrase condition="pe">7.0.4</phrase> and later.</para>
    <formalpara>
        <title>Prerequisites:</title>
        <para/>
    </formalpara>
    <itemizedlist>
        <listitem>
            <para>To use the <parameter>osquery()</parameter> driver, the <filename>scl.conf</filename> file must be included in your &abbrev; configuration:</para>
            <synopsis>@include "scl.conf"</synopsis>
        </listitem>
        <listitem condition="ose">
            <para>&abbrev; must be compiled with JSON-support enabled. </para>
        </listitem>
    </itemizedlist>
    <para>The <parameter>osquery()</parameter> driver is actually a reusable configuration snippet configured to read the osquery log file using the <parameter>file()</parameter> driver, and process its JSON contents. For details on using or writing such configuration snippets, see <xref linkend="config-blocks"/>. You can find the source of this configuration snippet on <link xmlns:ns1="http://www.w3.org/1999/xlink" ns1:href="https://github.com/balabit/syslog-ng/blob/master/scl/osquery/plugin.conf">GitHub</link>.</para>
    <example xml:id="example-source-osquery">
        <title>Using the osquery() driver</title>
        <para>The following &abbrev; configuration sample uses the default settings of the driver, reading osquery result logs from the <filename>/var/log/osquery/osqueryd.results.log</filename> file, and writes the log messages generated from the traps into a file.</para>
        <synopsis>@include "scl.conf"
source s_osquery {
    osquery();
};
log {
    source(s_osquery);
    destination {
        file("/var/log/example.log");
    };
};</synopsis>
        <para>Filter for messages related to loading Linux kernel modules:</para>
        <synopsis>@include "scl.conf"
source s_osquery {
    osquery();
};
log {
    source(s_osquery);
    filter f_modules {
        "${.osquery.name}" eq "pack_incident-response_kernel_modules"
    };
    destination {
        file("/var/log/example.log");
    };
};</synopsis>
    <para>To configure a destination to send the log messages to Elasticsearch, see <xref linkend="configuring-destinations-elasticsearch2"/>. For other destinations, see <xref linkend="chapter-destinations"/>.</para>
    </example>
    <section xml:id="reference-source-osquery">
        <title>osquery() source options</title>
        <indexterm>
            <primary>source drivers</primary>
            <secondary><parameter>osquery()</parameter> driver</secondary>
        </indexterm>
        <indexterm>
            <primary>osquery</primary>
        </indexterm>
        <para>The <parameter>osquery()</parameter> driver has the following options.</para>
        <simplesect xml:id="osquery-file">
            <title>file()</title>
            <indexterm type="parameter">
                <primary>file()</primary>
            </indexterm>
            <informaltable frame="topbot" colsep="0" rowsep="0">
                <tgroup cols="2">
                    <colspec colnum="1" colwidth="40pt"/>
                    <tbody>
                        <row>
                            <entry>Type: <?dbhtml bgcolor="#D4D6EB" ?>
<?dbfo bgcolor="#D4D6EB" ?>
                            </entry>
                            <entry>path</entry>
                        </row>
                        <row>
                            <entry>Default: <?dbhtml bgcolor="#D4D6EB" ?>
<?dbfo bgcolor="#D4D6EB" ?>
                            </entry>
                            <entry>/var/log/osquery/osqueryd.results.log</entry>
                        </row>
                    </tbody>
                </tgroup>
            </informaltable>
            <para><emphasis role="bold">Description:</emphasis> The log file of <command>osquery</command> that stores the results of periodic queries. The &abbrev; application reads the messages from this file.</para>
        </simplesect>
        <simplesect xml:id="osquery-prefix">
            <xi:include href="../../common/chunk/option-parser-prefix.xml" xmlns:xi="http://www.w3.org/2001/XInclude"/>
            <para>Default value: <userinput>.osquery.</userinput> option.</para>
        </simplesect>
    </section>
</section>
