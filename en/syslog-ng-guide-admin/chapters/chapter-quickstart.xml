<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter
 [
 <!ENTITY % entities SYSTEM "../../common/syslog-ng-entities.ent">
 %entities;]>
<chapter xml:id="chapter-quickstart" xmlns="http://docbook.org/ns/docbook" version="5.0">
    <title>The &abbrev; quick-start guide</title>
    <para>This chapter provides a very brief introduction into configuring the &abbrev; application. For details on the format of the configuration file and how to configure sources, destinations, and other features, refer to the subsequent chapters.</para>
    <itemizedlist>
        <listitem>
            <para>To configure &abbrev; as a client that sends log messages to a central logserver, see <xref linkend="configure-clients"/>.</para>
        </listitem>
        <listitem>
            <para>To configure &abbrev; as a server that receives log messages from client hosts, see <xref linkend="configure-servers"/>.</para>
        </listitem>
        <listitem>
            <para>To configure &abbrev; as a relay that receives log messages from client hosts and forwards them to a central logserver, see <xref linkend="configure-servers"/>.</para>
        </listitem>
    </itemizedlist>
    <procedure xml:id="configure-clients">
        <title>Configuring syslog-ng on client hosts</title>
        <indexterm>
            <primary>syslog-ng clients</primary>
            <secondary>configuring</secondary>
        </indexterm>
        <formalpara>
            <title>Purpose:</title>
            <para/>
        </formalpara>
        <para>To configure syslog-ng on a client host, complete the following steps.</para>
        <formalpara>
            <title>Steps:</title>
            <para/>
        </formalpara>
        <step>
            <para>Install the syslog-ng application on the host. For details installing syslog-ng on specific operating systems, see <xref linkend="chapter-install"/>.</para>
        </step>
        <step>
            <indexterm>
                <primary>configuration file</primary>
                <secondary>default configuration</secondary>
            </indexterm>
            <para>Configure the local sources to collect the log messages of the host. Starting with version 3.2, &abbrev; automatically collects the log messages that use the native system logging method of the platform, for example, messages from <filename>/dev/log</filename> on Linux, or <filename>/dev/klog</filename> on FreeBSD. For a complete list of messages that are collected automatically, see <xref linkend="configuring-source-system"/>.</para>
            <xi:include href="../../common/chunk/para-config-file-location.xml" xmlns:xi="http://www.w3.org/2001/XInclude"/>
            <para>Add sources to collect the messages from your log files. File sources look like this:</para>
            <synopsis>source s_myfilesource {
        file("/var/log/myapplication.log" follow-freq(1)); };</synopsis>
            <para>Name every source uniquely. For details on configuring file sources, see <xref linkend="configuring-sources-file"/>.</para>
            <tip>
                <para>Many applications send log messages to logfiles by default (for example, the Roundcube webmail client, or the ProFTPD FTP server), but can be configured to send them to syslog instead. If possible, it is recommended to reconfigure the application that way.</para>
            </tip>
            <note>
                <para>The default configuration file of &abbrev; collects platform-specific log messages and the internal log messages of &abbrev;.</para>
                <synopsis>source s_local {
        system();
        internal();
};</synopsis>
            </note>
        </step>
        <step>
            <para>Create a network destination that points directly to the syslog-ng server, or to a local relay. The network destination greatly depends on the protocol that your log server or relay accepts messages. Many systems still use the legacy BSD-syslog protocol (RFC3162) over the unreliable UDP transport:</para>
            <synopsis>destination d_network { network("10.1.2.3" transport("udp")); };</synopsis>
            <para>However, if possible, use the much more reliable IETF-syslog protocol over TCP transport:</para>
            <synopsis>destination d_network { syslog("10.1.2.3" transport("tcp")); };</synopsis>
        </step>
        <step>
            <para>Create a log statement connecting the local sources to the syslog-ng server or relay. For example:</para>
            <synopsis>log {
        source(s_local); destination(d_network); };</synopsis>
        </step>
        <step>
            <para>If the logs will also be stored locally on the host, create local file destinations.</para>
            <note>
                <para>The default configuration of &abbrev; places the collected messages into the <filename>/var/log/messages</filename> file:</para>
                <synopsis>destination d_local {
    file("/var/log/messages"); };</synopsis>
            </note>
        </step>
        <step>
            <para>Create a log statement connecting the local sources to the file destination.</para>
            <note>
                <para>The default configuration of &abbrev; has only one log statement:</para>
                <synopsis>log {
    source(s_local); destination(d_local); };</synopsis>
            </note>
        </step>
        <step>
            <para>Set filters, macros and other features and options (for example TLS encryption) as necessary.</para>
            <example xml:id="example-defaultconfig">
                <title>The default configuration file of &abbrev;</title>
                <indexterm>
                    <primary>configuration file</primary>
                    <secondary>default configuration</secondary>
                </indexterm>
                <para>The following is the default configuration file of &abbrev; &techversion;. It collects local log messages and the log messages of &abbrev; and saves them in the <filename>/var/log/messages</filename> file.</para>
                <synopsis>@version: &techversion;
@include "scl.conf"
source s_local { system(); internal(); };
destination d_local {
            file("/var/log/messages"); };
log { source(s_local); destination(d_local); };</synopsis>
            </example>
            <example xml:id="example-clientconfig">
                <title>A simple configuration for clients</title>
                <para>The following is a simple configuration file that collects local log messages and forwards them to a logserver using the IETF-syslog protocol.</para>
                <synopsis>@version: &techversion;
@include "scl.conf"
source s_local { system(); internal(); };
destination d_syslog_tcp {
             syslog("192.168.1.1" transport("tcp") port(2010)); };
log { source(s_local);destination(d_syslog_tcp); };</synopsis>
            </example>
        </step>
    </procedure>
    <procedure xml:id="configure-servers">
        <title>Configuring syslog-ng on server hosts</title>
        <indexterm>
            <primary>syslog-ng servers</primary>
            <secondary>configuring</secondary>
        </indexterm>
        <formalpara>
            <title>Purpose:</title>
            <para/>
        </formalpara>
        <para>To configure syslog-ng on a server host, complete the following steps.</para>
        <formalpara>
            <title>Steps:</title>
            <para/>
        </formalpara>
        <step>
            <para>Install the syslog-ng application on the host. For details installing syslog-ng on specific operating systems, see <xref linkend="chapter-install"/>.</para>
        </step>
        <step>
            <para>Starting with version 3.2, &abbrev; automatically collects the log messages that use the native system logging method of the platform, for example, messages from <filename>/dev/log</filename> on Linux, or <filename>/dev/klog</filename> on FreeBSD. For a complete list of messages that are collected automatically, see <xref linkend="configuring-source-system"/>.</para>
        </step>
        <step>
            <xi:include href="../../common/chunk/para-config-file-location.xml" xmlns:xi="http://www.w3.org/2001/XInclude"/>
            <para>Configure the network sources that collect the log messages sent by the clients and relays. How the network sources should be configured depends also on the capabilities of your client hosts: many older networking devices support only the legacy BSD-syslog protocol (RFC3164) using UDP transport:</para>
            <synopsis>source s_network { syslog(ip(10.1.2.3) transport("udp")); };</synopsis>
            <para>However, if possible, use the much more reliable TCP transport:</para>
            <synopsis>source s_network { syslog(ip(10.1.2.3) transport("tcp")); };</synopsis>
            <para>For other options, see <xref linkend="configuring-sources-syslog"/> and <xref linkend="configuring-sources-tcpudp"/>.</para>
            <note>
                <para>Starting with &abbrev; version 3.2, the <parameter>syslog()</parameter> source driver can handle both BSD-syslog (RFC 3164) and IETF-syslog (RFC 5424-26) messages.</para>
            </note>
        </step>
        <step>
            <para>Create local destinations that will store the log messages, for example file- or program destinations. The default configuration of &abbrev; places the collected messages into the <filename>/var/log/messages</filename> file:</para>
            <synopsis>destination d_local {
    file("/var/log/messages"); };</synopsis>
            <para>If you want to create separate logfiles for every client host, use the <parameter>${HOST}</parameter> macro when specifying the filename, for example:</para>
            <synopsis>destination d_local {
    file("/var/log/messages_${HOST}"); };</synopsis>
            <para>For details on further macros and how to use them, see <xref linkend="chapter-manipulating-messages"/>.</para>
        </step>
        <step>
            <para>Create a log statement connecting the sources to the local destinations.</para>
            <synopsis>log {
        source(s_local); source(s_network); destination(d_local); };</synopsis>
        </step>
        <step>
            <para>Set filters, options (for example TLS encryption) and other advanced features as necessary.</para>
            <xi:include href="../../common/wnt/note-relaying-hostname.xml" xmlns:xi="http://www.w3.org/2001/XInclude"/>
            <example xml:id="example-serverconfig">
                <title>A simple configuration for servers</title>
                <para>The following is a simple configuration file for &product; that collects incoming log messages and stores them in a text file.</para>
                <synopsis>@version: &techversion;
@include "scl.conf"
    options {
        time-reap(30);
        mark-freq(10);
        keep-hostname(yes);
        };
    source s_local { system(); internal(); };
    source s_network {
        syslog(transport(tcp));
        };
    destination d_logs {
        file(
            "/var/log/syslog-ng/logs.txt"
            owner("root")
            group("root")
            perm(0777)
            ); };
    log { source(s_local); source(s_network); destination(d_logs); };</synopsis>
            </example>
        </step>
    </procedure>
    <xi:include href="chapter-relaying-messages.xml" xmlns:xi="http://www.w3.org/2001/XInclude"/>
</chapter>
