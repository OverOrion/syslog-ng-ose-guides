<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter
 [  <!ENTITY % entities SYSTEM "../../shared/syslog-ng-entities.ent">
 %entities;]>
<chapter xml:id="chapter-rltp" xmlns="http://docbook.org/ns/docbook" version="5.0" condition="pe6">
    <title><trademark>Reliable Log Transfer Protocol</trademark>
    </title>
<!-- FIXME jumplist -->
    <section xml:id="concepts-rltp">
        <title>Logging using <trademark>RLTP</trademark>
        </title>
        <indexterm>
            <primary><trademark>RLTP</trademark></primary>
        </indexterm>
        <indexterm>
            <primary>log transfer protocol</primary>
            <secondary>reliable</secondary>
        </indexterm>
        <indexterm>
            <primary>transport</primary>
            <secondary>TCP</secondary>
        </indexterm>
        <para xml:id="para-rltp-intro">The &abbrev; application can send and receive log messages in a reliable way over the TCP transport layer using the <trademark>Reliable Log Transfer Protocol</trademark> (<trademark>RLTP</trademark>). <trademark>RLTP</trademark> is a proprietary transport protocol that prevents message loss during connection breaks. The transport is used between &abbrev; hosts (for example, a client and a server, or a client-relay-server), and interoperates with the flow-control and reliable disk-buffer mechanisms of &abbrev;, thus providing the best way to prevent message loss. The sender detects which messages has the receiver successfully received. If messages are lost during the transfer, the sender resends the missing messages, starting from the last successfully received message. Therefore, messages are not duplicated at the receiving end in case of a connection break (however, in failover mode this is not completely ensured). <trademark>RLTP</trademark> also allows to receive encrypted and non-encrypted connections on the same port, using a single source driver.</para>
        <note>
            <para>Because of the communication overhead, the <trademark>RLTP</trademark> protocol is slower than other transport protocols, which might be a problem if you need to collect a high amount (over 200000 messages per second) of log messages on your log server. For performance details of &abbrev; see the <emphasis>syslog-ng Premium Edition Performance Guideline</emphasis> at the &doc-site;.</para>
        </note>
        <note>
            <para>Make sure that you have set the value of the <parameter>log_msg_size()</parameter> parameter large enough in your configuration. If its size is less than the size of the sent messages, it might result in disk fill-up and no incoming logs.</para>
        </note>
        <warning>
            <xi:include href="../../shared/chunk/rltp-losing-messages.xml" xmlns:xi="http://www.w3.org/2001/XInclude"/>
        </warning>
        <para>The <trademark>RLTP</trademark> protocol works on top of TCP, and can use STARTTLS for encryption. <trademark>RLTP</trademark> supports IPv4 and IPv6 addresses. Inside the <trademark>RLTP</trademark> message, the message can use any format, for example, RFC3164 (BSD-syslog) or RFC5424 (IETF-syslog). The default port of <trademark>RLTP</trademark> is <userinput>35514</userinput>.</para>
        <para><trademark>RLTP</trademark> can be added to the configuration like a transport protocol within the <parameter>syslog()</parameter> driver and the <parameter>network()</parameter> driver.</para>
                <xi:include xmlns:xi="http://www.w3.org/2001/XInclude" href="procedure-rltp-concepts.xml"/>
        <section xml:id="rltp-client-relay-server">
            <title>Using <trademark>RLTP</trademark> in a client-relay-server scenario</title>
            <para>You can use <trademark>RLTP</trademark> between multiple &abbrev; hosts, for example, in a client-relay-server scenario. In such case, the communication described in <xref linkend="procedure-rltp-concepts"/> applies both between the client and the relay, and the relay and the server. However, note the following points:</para>
            <itemizedlist>
                <listitem>
                    <para>Unless you use disk-buffer on the relay, the relay waits for acknowledgement from the server before acknowledging the messages to the client. If you send the messages in large batches, and the server can process the messages slowly (or the network connection is slow), you might have to adjust the <parameter>message-acknowledgement-timeout()</parameter> on the client.</para>
                </listitem>
                <listitem>
                    <para>If you use reliable disk-buffer on the relay, the relay will acknowledge the messages when the messages are written to the disk-buffer. That way, the client does not have to wait while the server acknowledges the messages.</para>
                </listitem>
            </itemizedlist>
        </section>
    </section>
    <section xml:id="rltp-options">
        <title><trademark>RLTP</trademark> options</title>
        <para>The following options are specific to the <trademark>RLTP</trademark> protocol. Note that when using <trademark>RLTP</trademark> in a source or a destination, the options of the <parameter>syslog()</parameter> or the <parameter>network()</parameter> driver can be used as well.</para>
        <simplesect>
            <title>allow-compress()</title>
            <indexterm>
                <primary>allow-compress()</primary>
            </indexterm>
            <indexterm>
                <primary>allow_compress()</primary>
            </indexterm>
            <indexterm>
                <primary>compression</primary>
                <secondary>on-the-wire</secondary>
            </indexterm>
            <indexterm>
                <primary>on-the-wire compression</primary>
            </indexterm>
            <informaltable frame="topbot" colsep="0" rowsep="0">
                <tgroup cols="2">
                    <colspec colnum="1" colwidth="80pt"/>
                    <tbody>
                        <row>
                            <entry>Accepted values: <?dbhtml bgcolor="#D4D6EB" ?>
                            </entry>
                            <entry>yes | no</entry>
                        </row>
                        <row>
                            <entry>Default: <?dbhtml bgcolor="#D4D6EB" ?>
                            </entry>
                            <entry>no</entry>
                        </row>
                    </tbody>
                </tgroup>
            </informaltable>
            <para><emphasis role="bold">Description:</emphasis> Enable on-the-wire compression in the RLTP communication. Note that this option must be enabled both on the server and the client side to have any effect. Enabling compression can significantly reduce the bandwidth required to transport the messages, but can slightly decrease the performance of &abbrev;, reducing the number of transferred messages. The <parameter>allow-compress()</parameter> option can be used in source and destination drivers as well. Available in &abbrev; <phrase condition="pe">5.0</phrase> and later.</para>
        </simplesect>
        <simplesect>
            <title>message-acknowledgement-timeout()</title>
            <indexterm>
                <primary>message-acknowledgement-timeout()</primary>
            </indexterm>
            <indexterm>
                <primary>message_acknowledgement_timeout()</primary>
            </indexterm>
            <informaltable frame="topbot" colsep="0" rowsep="0">
                <tgroup cols="2">
                    <tbody>
                        <row>
                            <entry>Type: <?dbhtml bgcolor="#D4D6EB" ?>
                            </entry>
                            <entry>number (seconds)</entry>
                        </row>
                        <row>
                            <entry>Default: <?dbhtml bgcolor="#D4D6EB" ?>
                            </entry>
                            <entry>900</entry>
                        </row>
                    </tbody>
                </tgroup>
            </informaltable>
            <para><emphasis role="bold">Description:</emphasis> When the receiver (&abbrev; server) receives and successfully processes a message, it sends an acknowledgement to the sender (the &abbrev; client). If the receiver does not acknowledge receiving the messages within this period, the sender terminates the connection with the receiver. Use this option only in destination drivers.</para>
        </simplesect>
        <simplesect>
            <title>response-timeout()</title>
            <indexterm>
                <primary>response-timeout()</primary>
            </indexterm>
            <indexterm>
                <primary>response_timeout()</primary>
            </indexterm>
            <informaltable frame="topbot" colsep="0" rowsep="0">
                <tgroup cols="2">
                    <tbody>
                        <row>
                            <entry>Type: <?dbhtml bgcolor="#D4D6EB" ?>
                            </entry>
                            <entry>number (seconds)</entry>
                        </row>
                        <row>
                            <entry>Default: <?dbhtml bgcolor="#D4D6EB" ?>
                            </entry>
                            <entry>60</entry>
                        </row>
                    </tbody>
                </tgroup>
            </informaltable>
            <para><emphasis role="bold">Description:</emphasis> If &abbrev; does not receive any message (acknowledgement, or other message related to the <trademark>RLTP</trademark> protocol) in the given timeframe, &abbrev; terminates the connection with the peer, and the "Connection broken" message appears in the logs of the sender (the &abbrev; client). This is normal, and happens when the sender does not send any new message to the receiver.</para>
            <para>Under normal circumstances, you should not change the value of this option. The <parameter>response-timeout()</parameter> option can be used in source and destination drivers as well.</para>
        </simplesect>
        <simplesect>
            <title>tls-required()</title>
            <indexterm>
                <primary>tls-required()</primary>
            </indexterm>
            <indexterm>
                <primary>tls_required()</primary>
            </indexterm>
            <informaltable frame="topbot" colsep="0" rowsep="0">
                <tgroup cols="2">
                    <tbody>
                        <row>
                            <entry>Type: <?dbhtml bgcolor="#D4D6EB" ?>
                            </entry>
                            <entry>yes, optional, no</entry>
                        </row>
                        <row>
                            <entry>Default: <?dbhtml bgcolor="#D4D6EB" ?>
                            </entry>
                            <entry>optional</entry>
                        </row>
                    </tbody>
                </tgroup>
            </informaltable>
            <para><emphasis role="bold">Description:</emphasis> Determines whether STARTTLS is to be used during communication. If the option is set to <userinput>yes</userinput>, you must also configure the <parameter>tls()</parameter> option to specify other parameters of the TLS connection (for example, the authentication of the server and the client).</para>
            <para>The <parameter>tls-required()</parameter> option can be used in source and destination drivers as well.</para>
            <para>For example, if you configure <userinput>tls-required(yes)</userinput> on server side and <userinput>tls-required(no)</userinput> on client side, the connection is dropped. If one of them is set to <userinput>optional</userinput>, the configuration of the other side will decide if TLS is used or not. If both sides are set to <userinput>optional</userinput>, and the <parameter>tls()</parameter> option is properly configured, TLS encryption will be used. The following table summarizes the possible options and their results.</para>
            <para>Note that the various parameters of the <parameter>tls()</parameter> option are considered in the connection only if the <parameter>tls-required()</parameter> settings of the peers result in <userinput>TLS-encryption</userinput> in the following table. In other words: the <parameter>tls-required()</parameter> option of <trademark>RLTP</trademark> determines if TLS should be used at all, while the <parameter>peer-verify()</parameter> option of the <parameter>tls()</parameter>setting determines if the TLS connection can be actually established.</para>
            <informaltable>
                <tgroup cols="5">
                    <colspec colnum="1" colname="col1"/>
                    <colspec colnum="2" colname="col2" colwidth="0.5*"/>
                    <colspec colnum="3" colname="col3"/>
                    <colspec colnum="4" colname="col4"/>
                    <colspec colnum="5" colname="col5"/>
                    <thead>
                        <row>
                            <entry namest="col1" nameend="col2" morerows="1"/>
                            <entry namest="col3" nameend="col5" align="center">tls-required() setting on the server</entry>
                        </row>
                        <row>
                            <entry align="center"> yes </entry>
                            <entry align="center"> no </entry>
                            <entry align="center"> optional </entry>
                        </row>
                    </thead>
                    <tbody>
                        <row>
                            <entry morerows="2" rotate="1" valign="middle">
<?dbhtml bgcolor="#D4D6EB" ?>
<?dbfo bgcolor="#D4D6EB" ?><emphasis role="bold">tls-required() setting on the client</emphasis>
                            </entry>
                            <entry align="center">
<?dbhtml bgcolor="#D4D6EB" ?>
<?dbfo bgcolor="#D4D6EB" ?><emphasis role="bold">yes</emphasis>
                            </entry>
                            <entry> TLS-encryption </entry>
                            <entry> rejected connection </entry>
                            <entry> TLS-encryption </entry>
                        </row>
                        <row>
                            <entry align="center">
<?dbhtml bgcolor="#D4D6EB" ?>
<?dbfo bgcolor="#D4D6EB" ?><emphasis role="bold">no</emphasis>
                            </entry>
                            <entry> rejected connection </entry>
                            <entry> unencrypted connection </entry>
                            <entry> unencrypted connection </entry>
                        </row>
                        <row>
                            <entry align="center">
<?dbhtml bgcolor="#D4D6EB" ?>
<?dbfo bgcolor="#D4D6EB" ?><emphasis role="bold">optional</emphasis>
                            </entry>
                            <entry> TLS-encryption </entry>
                            <entry> unencrypted connection </entry>
                            <entry> TLS-encryption if the <parameter>tls()</parameter> option is set, unencrypted connection otherwise </entry>
                        </row>
                    </tbody>
                </tgroup>
            </informaltable>
            <para>Setting <userinput>tls-required(optional)</userinput> on your server allows you to receive both encrypted and unencrypted connections on the same port.</para>
        </simplesect>
    </section>
    <section xml:id="rltp-examples">
        <title>Examples for using <trademark>RLTP</trademark>
        </title>
        <example>
            <title>Simple <trademark>RLTP</trademark> connection</title>
            <para>The sender and the receiver use <trademark>RLTP</trademark> over the <parameter>network()</parameter> protocol. Since the <userinput>tls()</userinput> option is not configured neither on the sender nor on the receiver, the communication will be unencrypted.</para>
            <para><emphasis>Receiver configuration (&abbrev; server)</emphasis>:</para>
            <synopsis>source s_network_rltp {
        network(
            ip("127.0.0.1")
            port("5555")
            transport(rltp)
            ip-protocol(4)
        );
};</synopsis>
            <para><emphasis>Sender configuration (&abbrev; client)</emphasis>:</para>
            <synopsis>destination d_network_rltp {
        network(
            "127.0.0.1"
            port("5555")
            transport(rltp)
            ip-protocol(4)
        );
};</synopsis>
        </example>
        <example>
            <title><trademark>RLTP</trademark> with TLS encryption</title>
            <para>The following example configure a sender and a receiver to communicate using <trademark>RLTP</trademark>. Since the <parameter>tls-required()</parameter> option is set to <userinput>optional</userinput> on the receiver and <userinput>yes</userinput> on the sender, and the <parameter>tls()</parameter> option is configured, the communication will be TLS-encrypted. For the sender (&abbrev; client), reliable disk-buffering is enabled to prevent data loss.</para>
            <para><emphasis>Receiver configuration (&abbrev; server)</emphasis>:</para>
            <synopsis>source s_syslog_rltp {
        syslog(
            ip("127.0.0.1")
            port("4444")
            transport(rltp(tls-required(optional)))
            ip-protocol(4)
            tls(
                peer-verify(required-trusted)
                ca-dir("/var/tmp/client/")
                key-file("/var/tmp/server/server_priv.key")
                cert-file("/var/tmp/server/server.crt")
            )
        );
};</synopsis>
            <para><emphasis>Sender configuration (&abbrev; client)</emphasis>:</para>
            <synopsis>destination d_syslog_rltp {
        syslog(
            "127.0.0.1"
            port("4444")
            transport(rltp(tls-required(yes)))
            ip-protocol(4)
            disk-buffer( mem-buf-size(200000) disk-buf-size(2000000) reliable(yes) )
            tls(
                peer-verify(required-trusted)
                ca-dir("/var/tmp/server/")
                key-file("/var/tmp/client/client_priv.key")
                cert-file("/var/tmp/client/client.crt")
            )
        );
};</synopsis>
        </example>
    </section>
</chapter>
