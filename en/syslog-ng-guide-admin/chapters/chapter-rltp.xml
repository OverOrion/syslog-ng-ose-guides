<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter
 [  <!ENTITY % entities SYSTEM "../../common/syslog-ng-entities.ent">
 %entities;]>
<chapter xml:id="chapter-rltp" xmlns="http://docbook.org/ns/docbook" version="5.0">
    <title><trademark>Reliable Log Transfer Protocol</trademark></title>
    <!-- FIXME jumplist -->
    <section xml:id="concepts-rltp">
        <title>Logging using <trademark>RLTP</trademark></title>
        <indexterm>
            <primary><trademark>RLTP</trademark></primary>
        </indexterm>
        <indexterm>
            <primary>log transfer protocol</primary>
            <secondary>reliable</secondary>
        </indexterm>
        <indexterm>
            <primary>transport</primary>
            <secondary>TCP</secondary>
        </indexterm>
        <para xml:id="para-rltp-intro">The syslog-ng application can send and receive log messages in a reliable way over the TCP transport layer using the <trademark>Reliable Log Transfer Protocol</trademark> (<trademark>RLTP</trademark>). <trademark>RLTP</trademark> is a new transport protocol that prevents message loss during connection breaks. The transport is used between syslog-ng and syslog-ng and it interoperates with the flow control and reliable disk-buffer mechanisms, thus providing the best loss-less environment. It detects the last received message on the receiving end and then starts resending messages from that point. Therefore, messages are not duplicated at the receiving end in case of a connection break (however, in failover mode this is not completely ensured). <!-- This protocol allows a message rate of at least 200k message/second. --> It also allows the negotiation of using TLS with a single source driver (for example negotiation at the beginning of the connection).</para>
        <warning>
            <para>If you use <trademark>RLTP</trademark> together with non-reliable disk-buffer, it is possible to lose logs. When sending logs through a relay that is using a non-reliable disk-buffer, it is possible to lose logs in case of relay crash.</para>
            <para>When sending logs through a relay that is using a non-reliable disk-buffer, it is possible that logs are duplicated in case of relay crash or stopping the relay.</para>
        </warning>
        <para>It is used on top of TCP, and can use STARTTLS for encryption. <trademark>RLTP</trademark> supports IPv4 and IPv6 addresses. Inside the <trademark>RLTP</trademark> message, the format can be RFC3164 (BSD syslog) or RFC5424 (IETF syslog). The default port of <trademark>RLTP</trademark> is <parameter>35514</parameter>.</para>
        <para><trademark>RLTP</trademark> can be added to the configuration like a transport protocol within the <parameter>syslog()</parameter> driver and the <parameter>network()</parameter> driver.</para>
    </section>
    <section xml:id="rltp-options">
        <title><trademark>RLTP</trademark> options</title>
        <simplesect>
            <title>allow-compress()</title>
            <indexterm type="parameter">
                <primary>allow-compress()</primary>
            </indexterm>
            <indexterm>
                <primary>compression</primary>
                <secondary>on-the-wire</secondary>
            </indexterm>
            <indexterm>
                <primary>on-the-wire compression</primary>
            </indexterm>
            <informaltable frame="topbot" colsep="0" rowsep="0">
                <tgroup cols="2">
                    <colspec colnum="1" colwidth="80pt"/>
                    <tbody>
                        <row>
                            <entry>Accepted values: <?dbhtml bgcolor="#D4D6EB" ?><?dbfo bgcolor="#D4D6EB" ?></entry>
                            <entry>yes | no</entry>
                        </row>
                        <row>
                            <entry>Default: <?dbhtml bgcolor="#D4D6EB" ?><?dbfo bgcolor="#D4D6EB" ?></entry>
                            <entry>no</entry>
                        </row>
                    </tbody>
                </tgroup>
            </informaltable>
            <para><guimenu>Description:</guimenu> Enable on-the-wire compression in the RLTP communication. Note that this option must be enabled both on the server and the client side to have any effect. Enabling compression can significantly reduce the bandwidth required to transport the messages, but can slightly decrease the performance of &abbrev;, reducing the number of transferred messages. Available in &abbrev; <phrase condition="pe">5.0</phrase> and later.</para>
        </simplesect>
        <simplesect>
            <title>message_acknowledgement_timeout()</title>
            <indexterm type="parameter">
                <primary>message_acknowledgement_timeout()</primary>
            </indexterm>
            <informaltable frame="topbot" colsep="0" rowsep="0">
                <tgroup cols="2">
                    <tbody>
                        <row>
                            <entry>Type: <?dbhtml bgcolor="#D4D6EB" ?><?dbfo bgcolor="#D4D6EB" ?></entry>
                            <entry>number (seconds)</entry>
                        </row>
                        <row>
                            <entry>Default: <?dbhtml bgcolor="#D4D6EB" ?><?dbfo bgcolor="#D4D6EB" ?></entry>
                            <entry>900</entry>
                        </row>
                    </tbody>
                </tgroup>
            </informaltable>
            <para><guimenu>Description:</guimenu> After not receiving any reply to the messages in the given timeframe, syslog-ng terminates the connection with the other side</para>
        </simplesect>
        <simplesect>
            <title>response_timeout()</title>
            <indexterm type="parameter">
                <primary>response_timeout()</primary>
            </indexterm>
            <informaltable frame="topbot" colsep="0" rowsep="0">
                <tgroup cols="2">
                    <tbody>
                        <row>
                            <entry>Type: <?dbhtml bgcolor="#D4D6EB" ?><?dbfo bgcolor="#D4D6EB" ?></entry>
                            <entry>number (seconds)</entry>
                        </row>
                        <row>
                            <entry>Default: <?dbhtml bgcolor="#D4D6EB" ?><?dbfo bgcolor="#D4D6EB" ?></entry>
                            <entry>60</entry>
                        </row>
                    </tbody>
                </tgroup>
            </informaltable>
            <para><guimenu>Description:</guimenu> After not receiving any message in the given timeframe, syslog-ng terminates the connection with the other side</para>
        </simplesect>
        <simplesect>
            <title>tls_required()</title>
            <indexterm type="parameter">
                <primary>tls_required()</primary>
            </indexterm>
            <informaltable frame="topbot" colsep="0" rowsep="0">
                <tgroup cols="2">
                    <tbody>
                        <row>
                            <entry>Type: <?dbhtml bgcolor="#D4D6EB" ?><?dbfo bgcolor="#D4D6EB" ?></entry>
                            <entry>yes, optional, no</entry>
                        </row>
                        <row>
                            <entry>Default: <?dbhtml bgcolor="#D4D6EB" ?><?dbfo bgcolor="#D4D6EB" ?></entry>
                            <entry>optional</entry>
                        </row>
                    </tbody>
                </tgroup>
            </informaltable>
            <para><guimenu>Description:</guimenu> Determines whether STARTTLS is to be used during communication. If the option is set to <parameter>yes</parameter>, setting up <parameter>tls()</parameter> context is required. This option can be used both on client and server side. For example, if on server side <parameter>tls_required(yes)</parameter> and on client side <parameter>tls_required(no)</parameter>, the connection is dropped. If one of them is set to <parameter>optional</parameter>, the other side is the decisive one. If both sides are set to <parameter>optional</parameter>, and there is <parameter>tls()</parameter> context, they will communicate through TLS.</para>
        </simplesect>
    </section>
    <section xml:id="rltp-examples">
        <title>Examples for using <trademark>RLTP</trademark></title>
        <example>
            <title>RLTP with optional TLS encryption</title>
            <para>For both source and destination sides, <parameter>tls_required</parameter> is set to optional, therefore they will communicate through TLS. For the server (source side) the <parameter>response_timeout</parameter> and <parameter>message_acknowledgement_timeout</parameter> settings ensure that the connection is terminated if no messages are received in the set timeframes. For the client (destination side), the reliable disk-buffer is set to yes, to prevent data loss.</para>
            <para><emphasis>source</emphasis></para>
            <synopsis>source s_syslog_rltp {
        syslog(
            ip("127.0.0.1")
            port("4444")
            transport(rltp(tls_required(optional) response_timeout(20) message_acknowledgement_timeout(10) ))
            ip-protocol(4)
            tls(
                peer-verify(required-trusted)
                ca_dir("/var/tmp/client/")
                key_file("/var/tmp/server/server_priv.key")
                cert_file("/var/tmp/server/server.crt")
            )
        );
};</synopsis>
            <para><emphasis>destination</emphasis></para>
            <synopsis>destination d_syslog_rltp {
        syslog(
            "127.0.0.1"
            port("4444")
            transport(rltp(tls_required(optional)))
            ip-protocol(4)
            disk-buffer( mem-buf-size(200000) disk-buf-size(2000000) reliable(yes) )
            tls(
                peer-verify(required-trusted)
                ca_dir("/var/tmp/server/")
                key_file("/var/tmp/client/client_priv.key")
                cert_file("/var/tmp/client/client.crt")
            )
        );
};</synopsis>
        </example>
        <example>
            <title>RLTP with tls_required()</title>
            <para>The source and the destination would communicate through the network protocol, but since <parameter>tls_required</parameter> is set to <parameter>yes</parameter> on the server side and <parameter>no</parameter> on the client side, the connection is terminated by the server.</para>
            <para><emphasis>source</emphasis></para>
            <synopsis>source s_network_rltp {
        network(
            ip("127.0.0.1")
            port("5555")
            transport(rltp(tls_required(yes) ))
            ip-protocol(4)
            tls(
                peer-verify(required-trusted)
                ca_dir("/var/tmp/client/")
                key_file("/var/tmp/server/server_priv.key")
                cert_file("/var/tmp/server/server.crt")
            )
        );
};</synopsis>
            <para><emphasis>destination</emphasis></para>
            <synopsis>destination d_network_rltp {
        network(
            "127.0.0.1"
            port("5555")
            transport(rltp(tls_required(no) response_timeout(20)))
            ip-protocol(4)
        );
};</synopsis>
        </example>
    </section>
</chapter>
