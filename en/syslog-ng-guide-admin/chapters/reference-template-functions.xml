<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE section
 [  <!ENTITY % entities SYSTEM "../../shared/syslog-ng-entities.ent">
 %entities;]>
<section xml:id="reference-template-functions" xmlns="http://docbook.org/ns/docbook" version="5.0">
    <title>Template functions of &abbrev;</title>
    <para>The following template functions are available in &abbrev;.</para>
    <simplesect xml:id="template-function-basename">
        <title>basename</title>
        <indexterm type="parameter">
            <primary>basename</primary>
        </indexterm>
        <para><emphasis role="bold">Syntax:</emphasis><synopsis>$(basename argument)</synopsis></para>
        <para><emphasis role="bold">Description:</emphasis> Returns the filename from an argument (for example, a macro: <userinput>$(basename ${FILE_NAME})</userinput>) that contains a filename with a path. For example, <userinput>$(basename "/var/log/messages.log")</userinput> returns <userinput>messages.log</userinput>. To <link linkend="template-function-dirname">extract the path, use the <parameter>dirname</parameter> template function</link>.</para>
        <para>Available in &abbrev; version <phrase condition="ose">3.10</phrase><phrase condition="pe">7.0.3</phrase> and later.</para>
    </simplesect>
    <simplesect xml:id="template-function-context-lookup" condition="ose">
        <title>context-lookup</title>
        <indexterm type="parameter">
            <primary>context-lookup</primary>
        </indexterm>
        <para><emphasis role="bold">Syntax:</emphasis><synopsis>$(context-lookup [option] condition value-to-select)</synopsis></para>
        <para><emphasis role="bold">Description:</emphasis> The <parameter>context-lookup</parameter> template function can search a message context when correlating messages (for example, when you use a <link linkend="patterndb-correlation">pattern database</link> or the <link linkend="grouping-by-parser">grouping-by parser</link>). The <parameter>context-lookup</parameter> template function requires a condition (a filter or a string), and returns a specific macro or template of the matching messages (for example, the ${MESSAGE}) as a list. It works similarly to the <link linkend="template-function-grep"><parameter>$(grep)</parameter></link> template function, but it escapes its output properly, so that the returned value is a list that can be processed with other template functions that work on lists, for example, <parameter>$(list-slice)</parameter>.</para>
        <example>
            <title>Using the <parameter>context-lookup</parameter> template function</title>
            <para>The following example selects the message of the context that has a <userinput>username</userinput> name-value pair with the <userinput>root</userinput> value, and returns the value of the <userinput>tags</userinput> name-value pair.</para>
            <synopsis>$(context-lookup ("${username}" == "root") ${tags})</synopsis>
        </example>
        <para>To limit the number of matches that the template function returns, use the <userinput>--max-count</userinput> option, for example, <userinput>$(context-lookup --max-count 5 ("${username}" == "root") ${tags})</userinput>. If you do not want to limit the number of matches, use <userinput>--max-count 0</userinput>.</para>
        <para>You can to specify multiple name-value pairs as parameters, separated with commas. If multiple messages match the condition of <parameter>context-lookup</parameter>, these will be returned also separated by commas. This can be used for example to collect the e-mail recipients from postfix messages.</para>
        <para>Available in &abbrev; version <phrase condition="ose">3.10</phrase> and later.</para>
    </simplesect>
    <simplesect xml:id="template-function-context-values" condition="ose">
        <title>context-values</title>
        <indexterm type="parameter">
            <primary>context-values</primary>
        </indexterm>
        <para><emphasis role="bold">Syntax:</emphasis><synopsis>$(context-values $name-value1 $name-value2 ...)</synopsis></para>
        <para><emphasis role="bold">Description:</emphasis> The <parameter>context-values</parameter> template function returns a list of every occurrence of the specified name-value pairs from the entire context. For example, if the context contains multiple messages, the <userinput>$(context-values ${HOST})</userinput> template function will return a comma-separated list of the <userinput>${HOST}</userinput> values that appear in the context.</para>
        <para>Available in &abbrev; version <phrase condition="ose">3.10</phrase> and later.</para>
    </simplesect>
    <simplesect xml:id="template-function-dirname">
        <title>dirname</title>
        <indexterm type="parameter">
            <primary>dirname</primary>
        </indexterm>
        <para><emphasis role="bold">Syntax:</emphasis><synopsis>$(dirname argument)</synopsis></para>
        <para><emphasis role="bold">Description:</emphasis> Returns the path (without the filename) from an argument (for example, a macro: <userinput>$(basename ${FILE_NAME}</userinput>) that contains a filename with a path. For example, <userinput>$(dirname "/var/log/messages.log")</userinput> returns <userinput>/var/log</userinput> path. To <link linkend="template-function-basename">extract the filename, use the <parameter>basename</parameter> template function</link>.</para>
        <para>Available in &abbrev; version <phrase condition="ose">3.10</phrase><phrase condition="pe">7.0.3</phrase> and later.</para>
    </simplesect>
    <simplesect xml:id="template-function-echo">
        <title>echo</title>
        <indexterm type="parameter">
            <primary>echo</primary>
        </indexterm>
        <para><emphasis role="bold">Syntax:</emphasis><synopsis>$(echo argument)</synopsis></para>
        <para><emphasis role="bold">Description:</emphasis> Returns the value of its argument. Using <userinput>$(echo ${HOST})</userinput> is equivalent to <parameter>${HOST}</parameter>.</para>
    </simplesect>
    <simplesect xml:id="template-function-env">
        <title>env</title>
        <indexterm type="parameter">
            <primary>env</primary>
        </indexterm>
        <para><emphasis role="bold">Syntax:</emphasis><synopsis>$(env &lt;environment-variable&gt;)</synopsis></para>
        <para><emphasis role="bold">Description:</emphasis> Returns the value of the specified environment variable. Available in &abbrev; <phrase condition="ose">3.5</phrase><phrase condition="pe">7</phrase> and later.</para>
    </simplesect>
    <simplesect xml:id="template-function-format-cef-extension">
        <title>format-cef-extension</title>
        <indexterm>
            <primary>format-cef-extension()</primary>
        </indexterm>
        <indexterm>
            <primary>CEF</primary>
        </indexterm>
        <indexterm>
            <primary>ArcSight Common Event Format</primary>
        </indexterm>
        <para>&abbrev; version <phrase condition="pe">5 F6</phrase><phrase condition="ose">3.8</phrase> includes a new template function (<parameter>format-cef-extension</parameter>) to format name-value pairs as ArcSight Common Event Format extensions. Note that the template function only formats the selected name-value pairs, it does not provide any mapping. There is no special support for creating the prefix part of a Common Event Format (CEF) message. Note that the order of the elements is random. For details on the CEF extension escaping rules format, see the <link xmlns:ns1="http://www.w3.org/1999/xlink" ns1:href="https://kc.mcafee.com/resources/sites/MCAFEE/content/live/CORP_KNOWLEDGEBASE/78000/KB78712/en_US/CEF_White_Paper_20100722.pdf">ArcSight Common Event Format</link>.</para>
        <para>You can use the <link xmlns:ns1="http://www.w3.org/1999/xlink" linkend="concepts-value-pairs">value-pairs</link> that &abbrev; stores about the log message as CEF fields. Using value-pairs, you can:</para>
        <itemizedlist>
            <listitem>
                <para>select which value-pairs to use as CEF fields,</para>
            </listitem>
            <listitem>
                <para>add custom value-pairs as CEF fields,</para>
            </listitem>
            <listitem>
                <para>rename value-pairs, and so on.</para>
            </listitem>
        </itemizedlist>
        <para>For details, see <xref linkend="concepts-value-pairs"/>. Note that the syntax of <userinput>format-*</userinput> template functions is different from the syntax of <parameter>value-pairs()</parameter>: these template functions use a syntax similar to command lines.</para>
        <para>Using the <parameter>format-cef-extension</parameter> template function, has the following prerequisites:</para>
        <itemizedlist>
            <listitem>
                <para>Load the the <userinput>cef</userinput> module in your configuration:</para>
                <synopsis>@module cef</synopsis>
            </listitem>
            <listitem>
                <para>Set the <parameter>on-error</parameter> global option to <parameter>drop-property</parameter>, otherwise if the name of a name-value pair includes an invalid character, &abbrev; drops the entire message. (Key name in CEF extensions can contain only the A-Z, a-z and 0-9 characters.)</para>
                <synopsis>options {
   on-error("drop-property");
};</synopsis>
            </listitem>
            <listitem>
                <para>The log messages must be encoded in UTF-8. Use the <parameter>encoding()</parameter> option or the <parameter>validate-utf8</parameter> flag in the message source.</para>
            </listitem>
        </itemizedlist>
        <example>
            <title>Using the <parameter>format-cef-extension</parameter> template function</title>
            <para>The following example selects every available information about the log message, except for the date-related macros (<userinput>R_*</userinput> and <userinput>S_*</userinput>), selects the <userinput>.SDATA.meta.sequenceId</userinput> macro, and defines a new value-pair called <userinput>MSGHDR</userinput> that contains the program name and PID of the application that sent the log message (since you will use the template-function in a template, you must escape the double-quotes).</para>
            <synopsis>$(format-cef-extension --scope syslog,all_macros,selected_macros \
  --exclude R_* --exclude S_* --key .SDATA.meta.sequenceId \
  --pair MSGHDR=\"$PROGRAM[$PID]: \")</synopsis>
            <para>The following example selects every value-pair that has a name beginning with <userinput>.cef.</userinput>, but removes the <userinput>.cef.</userinput> prefix from the key names.</para>
            <synopsis>template("$(format-cef-extension --subkeys .cef.)\n")</synopsis>
            <para>The following example shows how to use this template function to store log messages in CEF format:</para>
            <synopsis>destination d_cef_extension {
  file("/var/log/messages.cef" template("${ISODATE} ${HOST} $(format-cef-extension --scope selected_macros --scope nv_pairs)\n"));
};</synopsis>
        </example>
    </simplesect>
    <simplesect xml:id="template-function-format-cim">
        <title>format-cim</title>
        <indexterm type="parameter">
            <primary>format-cim</primary>
        </indexterm>
        <para><emphasis role="bold">Syntax:</emphasis><synopsis>$(format-cim)</synopsis></para>
        <para><emphasis role="bold">Description:</emphasis> Formats the message into <link xmlns:ns1="http://www.w3.org/1999/xlink" ns1:href="http://docs.splunk.com/Documentation/CIM/latest/User/Overview">Splunk Common Information Model (CIM) format</link>. Applications that can receive messages in CIM format include Kibana, logstash, and Splunk. Applications that can be configured to log into CIM format include nflog and the Suricata IDS engine.</para>
        <synopsis>destination d_cim {
    network("192.168.1.1" template("$(format-cim)\n"));
};</synopsis>
        <para>You can find the exact source of this template function in the <link xmlns:ns1="http://www.w3.org/1999/xlink" ns1:href="https://github.com/balabit/syslog-ng/blob/master/scl/cim/template.conf">&abbrev; GitHub repository</link>.</para>
        <note condition="ose">
            <para>To use the <parameter>format-cim()</parameter> template function, &abbrev; must be compiled with JSON support. For details, see <xref linkend="syslog-ng-compile-options"/>. To see if your &abbrev; binary was compiled with JSON support, execute the <command>syslog-ng --version</command> command.</para>
        </note>
    </simplesect>
    <simplesect xml:id="template-function-format-gelf">
        <title>format-gelf</title>
        <indexterm type="parameter">
            <primary>format-gelf</primary>
        </indexterm>
        <para><emphasis role="bold">Syntax:</emphasis><synopsis>$(format-gelf)</synopsis></para>
        <para><emphasis role="bold">Description:</emphasis> Available in &abbrev; <phrase condition="ose">3.13</phrase> and later.</para>
        <para>You can use the Graylog Extended Log Format (GELF) template together with the <parameter>graylog2()</parameter> destination to send syslog messages to <link xmlns:ns1="http://www.w3.org/1999/xlink" ns1:href="http://docs.graylog.org">Graylog</link>. GELF is the native data format of Graylog.</para>
        <example>
            <title>Using the format-gelf template function</title>
            <para>The following configuration example shows how you can use the <parameter>format-gelf</parameter> template:</para>
            <synopsis>destination graylog2 { 
  network(
    "127.0.0.1"
    port(12201)
    transport(tcp)
    template("$(format-gelf)")
  );
};</synopsis>
        </example>
    </simplesect>
    <simplesect xml:id="template-function-format-json">
        <title>format-json</title>
        <indexterm type="parameter">
            <primary>format-json</primary>
        </indexterm>
        <indexterm>
            <primary>JSON</primary>
        </indexterm>
        <indexterm>
            <primary>JavaScript Object Notation</primary>
        </indexterm>
        <para><emphasis role="bold">Syntax:</emphasis><synopsis>$(format-json parameters)</synopsis></para>
        <para><emphasis role="bold">Description:</emphasis> The <parameter>format-json</parameter> template function receives value-pairs as parameters and converts them into JavaScript Object Notation (JSON) format. Including the template function in a message template allows you to store selected information about a log message (that is, its content, macros, or other metadata) in JSON format. Note that the input log message does not have to be in JSON format to use <userinput>format-json</userinput>, you can reformat any incoming message as JSON.</para>
        <para>You can use the <link xmlns:ns1="http://www.w3.org/1999/xlink" linkend="concepts-value-pairs">value-pairs</link> that &abbrev; stores about the log message as JSON fields. Using value-pairs, you can:</para>
        <itemizedlist>
            <listitem>
                <para>select which value-pairs to use as JSON fields,</para>
            </listitem>
            <listitem>
                <para>add custom value-pairs as JSON fields,</para>
            </listitem>
            <listitem>
                <para>rename value-pairs, and so on.</para>
            </listitem>
        </itemizedlist>
        <para>For details, see <xref linkend="concepts-value-pairs"/>. Note that the syntax of <parameter>format-json</parameter> is different from the syntax of <parameter>value-pairs()</parameter>: <parameter>format-json</parameter> uses a syntax similar to command lines.</para>
        <xi:include href="../../shared/wnt/note-typehinting.xml" xmlns:xi="http://www.w3.org/2001/XInclude"/>
        <example>
            <title>Using the format-json template function</title>
            <para>The following example selects every available information about the log message, except for the date-related macros (<userinput>R_*</userinput> and <userinput>S_*</userinput>), selects the <userinput>.SDATA.meta.sequenceId</userinput> macro, and defines a new value-pair called <userinput>MSGHDR</userinput> that contains the program name and PID of the application that sent the log message (since you will use the template-function in a template, you must escape the double-quotes).</para>
            <synopsis>$(format-json --scope syslog,all_macros,selected_macros \
  --exclude R_* --exclude S_* --key .SDATA.meta.sequenceId \
  --pair MSGHDR=\"$PROGRAM[$PID]: \")</synopsis>
            <para>The following example shows how to use this template function to store log messages in JSON format:</para>
            <synopsis>destination d_json {
    file("/var/log/messages.json" template("$(format-json --scope selected_macros --scope nv_pairs)\n"));
};</synopsis>
        </example>
        <note>
            <para>In the case of syslog-ng macros starting with a dot (for example, "<userinput>.SDATA.meta.sequenceID</userinput>"), <parameter>format-json</parameter> replaces the dot with an underscore character (for example, <userinput>{"_SDATA":{"meta":{"sequenceId":"55555"}}}</userinput>).</para>
        </note>
    </simplesect>
    <simplesect xml:id="template-function-format-welf">
        <title>format-welf</title>
        <indexterm>
            <primary>format-welf()</primary>
        </indexterm>
        <indexterm>
            <primary>WELF</primary>
        </indexterm>
        <indexterm>
            <primary>WebTrends Enhanced Log file Format</primary>
        </indexterm>
        <para>This template function converts value-pairs into the WebTrends Enhanced Log file Format (WELF). The WELF format is a comma-separated list of <userinput>name=value</userinput> elements. Note that the order of the elements is random. If the value contains whitespace, it is enclosed in double-quotes, for example, <userinput>name="value"</userinput>. For details on the WELF format, see <link xmlns:ns1="http://www.w3.org/1999/xlink" ns1:href="https://www3.trustwave.com/support/kb/article.aspx?id=10899">https://www3.trustwave.com/support/kb/article.aspx?id=10899</link>.</para>
        <para>To select which value-pairs to convert, use the command-line syntax of the <parameter>value-pairs()</parameter> option. For details on selecting value-pairs, see <xref linkend="options-value-pairs"/>.</para>
        <example>
            <title>Using the <parameter>format-welf()</parameter> template function</title>
            <para>The following example selects every available information about the log message, except for the date-related macros (<userinput>R_*</userinput> and <userinput>S_*</userinput>), selects the <userinput>.SDATA.meta.sequenceId</userinput> macro, and defines a new value-pair called <userinput>MSGHDR</userinput> that contains the program name and PID of the application that sent the log message (since you will use the template-function in a template, you must escape the double-quotes).</para>
            <synopsis>$(format-welf --scope syslog,all_macros,selected_macros \
  --exclude R_* --exclude S_* --key .SDATA.meta.sequenceId \
  --pair MSGHDR=\"$PROGRAM[$PID]: \")</synopsis>
            <para>The following example shows how to use this template function to store log messages in WELF format:</para>
            <synopsis>destination d_welf {
    file("/var/log/messages.welf" template("$(format-welf --scope selected_macros --scope nv_pairs)\n"));
};</synopsis>
        </example>
    </simplesect>
    <simplesect xml:id="template-function-geoip" condition="ose">
        <title>geoip (DEPRECATED)</title>
        <indexterm type="parameter">
            <primary>geoip</primary>
        </indexterm>
        <para>This template function is deprecated. Use <xref linkend="template-function-geoip2"/> instead.</para>
        <para><emphasis role="bold">Syntax:</emphasis><synopsis>$(geoip &lt;IPv4-address&gt;)</synopsis></para>
        <para><emphasis role="bold">Description:</emphasis> This template function returns the 2-letter country code of any IPv4 address or host. IPv6 addresses are not supported. Currently only the 2-letter codes are supported, and only from the default database. For example, <userinput>$(geoip $HOST)</userinput></para>
        <note condition="ose">
            <para>This template function is available only if &abbrev; has been compiled with the <parameter>--enable-geoip</parameter> compiling option.</para>
        </note>
        <para>To retrieve additional GeoIP information, see <xref linkend="geoip-parser"/>.</para>
    </simplesect>
    <simplesect xml:id="template-function-geoip2" condition="ose">
        <title>geoip2</title>
        <indexterm type="parameter">
            <primary>geoip2</primary>
        </indexterm>
        <para><emphasis role="bold">Syntax:</emphasis><synopsis>$(geoip2 --database &lt;path-to-geoip2-database-file&gt;
    [ --field "registered_country.names.ru" ] ${HOST})</synopsis></para>
        <para><emphasis role="bold">Description:</emphasis> This template function exctracts specific fields from the mmdb database using the <parameter>--field</parameter> parameter. If you omit this parameter, the it returns the 2-letter country code of any IPv4/IPv6 address or host.</para>
        <note condition="ose">
            <para>This template function is available only if &abbrev; has been compiled with geoip2 support. To enable it, use the <parameter>--enable-geoip</parameter> compiling option.</para>
        </note>
        <para>To retrieve additional GeoIP information, see <xref linkend="geoip2-parser"/>.</para>
    </simplesect>
    <simplesect xml:id="template-function-getent">
        <title>getent</title>
        <indexterm type="parameter">
            <primary>getent</primary>
        </indexterm>
        <para><emphasis role="bold">Syntax:</emphasis><synopsis>$(getent)</synopsis></para>
        <para><emphasis role="bold">Description:</emphasis> Available in &abbrev; <phrase condition="ose">3.13</phrase> and later.</para>
        <para>You can use the <parameter>getent</parameter> template function to look up entries from the Name Service Switch libraries, such as, passwd, services, or protocols.</para>
        <para>The following databases are supported:</para>
        <itemizedlist>
            <listitem>
                <para><emphasis>passwd</emphasis></para>
                <para>Use this database to query data related to a user. Specify the user by either username or user ID. You can query the following data: username, user ID, group ID, GECOS field, home directory, or user shell.</para>
                <synopsis>$(getent passwd testuser name)
$(getent passwd testuser uid)
$(getent passwd testuser gid)
$(getent passwd testuser gecos)
$(getent passwd testuser dir)
$(getent passwd testuser shell)</synopsis>
                <para>or</para>
                <synopsis>$(getent passwd 1000 name)
$(getent passwd 1000 uid)
$(getent passwd 1000 gid)
$(getent passwd 1000 gecos)
$(getent passwd 1000 dir)
$(getent passwd 1000 shell)</synopsis>
                <para>The queried data is optional. When you do not query any data, the default behavior applies, which is as follows: user ID is returned for username, or username is returned for user ID.</para>
                <itemizedlist>
                    <listitem>
                        <para>Username <parameter>$(getent passwd testuser)</parameter> returns user ID <parameter>1000</parameter>.</para>
                    </listitem>
                    <listitem>
                        <para>User ID <parameter>$(getent passwd 1000)</parameter> returns username <parameter>testuser</parameter>.</para>
                    </listitem>
                </itemizedlist>
            </listitem>
            <listitem>
                <para><emphasis>group</emphasis></para>
                <para>Use this database to query group-related data. The group can be specified using either group ID or group name. You can query the following data: group name, group ID, and members.</para>
                <synopsis>$(getent group adm name)
$(getent group adm gid)
$(getent group adm members)</synopsis>
                <para>The queried data is optional. The default behavior is as follows: group ID is returned for group name, or group name is returned for user ID.</para>
                <itemizedlist>
                    <listitem>
                        <para>Group name <parameter>$(getent group adm)</parameter> returns group ID <parameter>4</parameter>.</para>
                    </listitem>
                    <listitem>
                        <para>Group ID <parameter>$(getent group 4)</parameter> returns group name <parameter>adm</parameter>.</para>
                    </listitem>
                </itemizedlist>
            </listitem>
            <listitem>
                <para><emphasis>protocols</emphasis></para>
                <para>Use this database to translate protocol name to protocol ID, or protocol ID to protocol string.</para>
                <synopsis>$(getent protocols tcp)
$(getent protocols 6)</synopsis>
            </listitem>
            <listitem>
                <para><emphasis>services</emphasis></para>
                <para>Use this database to translate service name to service ID, or service ID to service name.</para>
                <synopsis>$(getent services http)
$(getent services 80)</synopsis>
            </listitem>
        </itemizedlist>
    </simplesect>
    <simplesect xml:id="template-function-graphite">
        <title>graphite-output</title>
        <indexterm type="parameter">
            <primary>graphite-output</primary>
        </indexterm>
        <para><emphasis role="bold">Syntax:</emphasis><synopsis>$(graphite-output parameters)</synopsis></para>
        <para><emphasis role="bold">Description:</emphasis> Available in &abbrev; <phrase condition="ose">3.6</phrase><phrase condition="pe">7.0</phrase> and later<phrase condition="ose"> (Originally appeared in the &abbrev; incubator for syslog-ng 3.5)</phrase>. This template function converts value-pairs from the incoming message to the Graphite plain text protocol format. It is ideal to use with the messages generated by the <link xmlns:ns1="http://www.w3.org/1999/xlink" ns1:href="https://github.com/balabit/syslog-ng-incubator/tree/master/modules/monitor-source/">monitor-source plugin</link> (currently available in the syslog-ng incubator project).</para>
        <para>For details on selecting value-pairs in &abbrev; and for possibilities to specify which information to convert to Graphite plain text protocol format, see <xref linkend="concepts-value-pairs"/>. Note that the syntax of <parameter>graphite-output</parameter> is different from the syntax of <parameter>value-pairs()</parameter>: <parameter>graphite-output</parameter> uses a the command-line syntax used in the <link linkend="template-function-format-json">format-json template function</link>.</para>
        <example>
            <title>Using the graphite-output template function</title>
            <para>The following configuration example shows, how to send value-pairs with names starting with "<userinput>vmstat.</userinput>" to Graphite running on <userinput>localhost</userinput>, port <userinput>2003</userinput>:</para>
            <synopsis>destination d_graphite {
    network( host("localhost") port(2003) template("$(graphite-output --key vmstat.*)"));
};</synopsis>
        </example>
    </simplesect>
    <simplesect xml:id="template-function-grep">
        <title>grep</title>
        <indexterm type="parameter">
            <primary>grep</primary>
        </indexterm>
        <para><emphasis role="bold">Syntax:</emphasis><synopsis>$(grep condition value-to-select)</synopsis><!-- FIXME make this more specific --></para>
        <para><emphasis role="bold">Description:</emphasis> The <parameter>grep</parameter> template function can search a message context when correlating messages (for example, when you use a <link linkend="patterndb-correlation">pattern database</link> or the <link linkend="grouping-by-parser">grouping-by parser</link>). The <parameter>context-lookup</parameter> template function requires a condition (a filter or a string), and returns a specific macro or template of the matching message (for example, the ${MESSAGE} field of the message).</para>
        <xi:include href="../../shared/chunk/example-grep-template-function.xml" xmlns:xi="http://www.w3.org/2001/XInclude"/>
        <para>You can to specify multiple name-value pairs as parameters, separated with commas. If multiple messages match the condition of <parameter>grep</parameter>, these will be returned also separated by commas. This can be used for example to collect the e-mail recipients from postfix messages.</para>
    </simplesect>
    <simplesect xml:id="template-function-hash">
        <title>hash</title>
        <indexterm type="parameter">
            <primary>tfhash</primary>
        </indexterm>
        <indexterm type="parameter">
            <primary>$(hash)</primary>
        </indexterm>
        <indexterm type="parameter">
            <primary>$(md5), $(md4)</primary>
        </indexterm>
        <indexterm type="parameter">
            <primary>$(sha1), $(sha256), $(sha512)</primary>
        </indexterm>
        <indexterm type="parameter">
            <primary>tfhash</primary>
        </indexterm>
        <para><emphasis role="bold">Syntax:</emphasis><synopsis>$(&lt;method&gt; [opts] $arg1 $arg2 $arg3...)</synopsis></para>
        <para><emphasis role="bold">Options:</emphasis><synopsis>--length N, -l N</synopsis>Truncate the hash to the first N characters.</para>
        <para><emphasis role="bold">Description:</emphasis> Calculates a hash of the string or macro received as argument using the specified hashing method. If you specify multiple arguments, effectively you receive the hash of the first argument salted with the subsequent arguments.</para>
        <para><userinput>&lt;method&gt;</userinput> can be one of md5, md4, sha1, sha256, sha512 and "hash", which is equivalent to md5. Macros are expected as arguments, and they are concatenated without the use of additional characters.</para>
        <para>This template function can be used for anonymizing sensitive parts of the log message (for example username) that were parsed out using PatternDB before storing or forwarding the message. This way, the ability of correlating messages along this value is retained.</para>
        <para>Also, using this template, quasi-unique IDs can be generated for data, using the <parameter>--length</parameter> option. This way, IDs will be shorter than a regular hash, but there is a very small possibility of them not being as unique as a non-truncated hash.</para>
        <note condition="ose">
            <para>These template functions are available only if <phrase condition="ose">&abbrev; has been compiled with the <parameter>--enable-ssl</parameter> compile option and </phrase>the <filename>tfhash</filename> module has been loaded.</para>
            <xi:include href="../../shared/chunk/para-load-module.xml" xmlns:xi="http://www.w3.org/2001/XInclude"/>
        </note>
        <example xml:id="template-function-hash-example">
            <title>Using the $(hash) template function</title>
            <para>The following example calculates the SHA1 hash of the hostname of the message:</para>
            <synopsis>$(sha1 $HOST)</synopsis>
            <para>The following example calculates the SHA256 hash of the hostname, using the <userinput>salted</userinput> string to salt the result:</para>
            <synopsis>$(sha1 $HOST salted)</synopsis>
            <para>To use shorter hashes, set the <parameter>--length</parameter>:</para>
            <synopsis>$(sha1 --length 6 $HOST)</synopsis>
            <para>To replace the hostname with its hash, use a rewrite rule:</para>
            <synopsis>rewrite r_rewrite_hostname{set("$(sha1 $HOST)", value("HOST"));};</synopsis>
        </example>
        <xi:include href="../../shared/chunk/example-rewrite-hash.xml" xmlns:xi="http://www.w3.org/2001/XInclude"/>
    </simplesect>
    <simplesect xml:id="template-function-if">
        <title>if</title>
        <indexterm type="parameter">
            <primary>if</primary>
        </indexterm>
        <para><emphasis role="bold">Syntax:</emphasis><synopsis>$(if (&lt;condition&gt;) &lt;true template&gt; &lt;false template&gt;)</synopsis></para>
        <para><emphasis role="bold">Description:</emphasis> Returns the value of the <userinput>&lt;true template&gt;</userinput> parameter if the <userinput>&lt;condition&gt;</userinput> is true. If the <userinput>&lt;condition&gt;</userinput> is false, the value of <userinput>&lt;false template&gt;</userinput> is returned.</para>
        <example>
            <title>Using pattern databases and the if template function</title>
            <para>The following example returns <userinput>violation</userinput> if the <userinput>username</userinput> name-value pair of a message is <userinput>root</userinput>, and <userinput>system</userinput> otherwise.</para>
            <synopsis>$(if ("${username}" == "root") "violation" "system")</synopsis>
            <para>This can be used to set the class of a message in pattern database rules based on the condition.</para>
            <synopsis>&lt;value name="username"&gt;$(if ("${username}" == "root") "violation" "system")&lt;/value&gt;</synopsis>
            <indexterm>
                <primary>template functions</primary>
                <secondary>embedding</secondary>
            </indexterm>
            <para>Since template functions can be embedded into each other, it is possible to use another template function as the template of the first one. For example, the following expression returns <userinput>root</userinput> if the username is <userinput>root</userinput>, <userinput>admin</userinput> if the username is <userinput>joe</userinput>, and <userinput>normal user</userinput> otherwise.</para>
            <synopsis>&lt;value name="username"&gt;
    $(if ("${username}" == "root")
        "root"
        $(if ("${username}" == "joe") "admin" "normal user"))&lt;/value&gt;</synopsis>
        </example>
    </simplesect>
    <simplesect xml:id="template-function-indent-multi-line">
        <title>indent-multi-line</title>
        <indexterm type="parameter">
            <primary>indent-multi-line</primary>
        </indexterm>
        <para><emphasis role="bold">Syntax:</emphasis><synopsis>$(indent-multi-line parameter)</synopsis></para>
        <para><emphasis role="bold">Description:</emphasis> This template function makes it possible to write multi-line log messages into a file. The first line is written like a regular message, subsequent lines are indented with a tab, in compliance with RFC822.</para>
        <example>
            <title>Using the indent-multi-line template function</title>
            <para>The following example writes multi-line messages into a text file.</para>
            <synopsis>destination d_file {
        file ("/var/log/messages"
                template("${ISODATE} ${HOST} $(indent-multi-line ${MESSAGE})\n") );
};</synopsis>
        </example>
    </simplesect>
    <simplesect xml:id="template-function-ipv4-to-int">
        <title>ipv4-to-int</title>
        <indexterm type="parameter">
            <primary>ipv4-to-int</primary>
        </indexterm>
        <para><emphasis role="bold">Syntax:</emphasis><synopsis>$(ipv4-to-int parameter)</synopsis></para>
        <para><emphasis role="bold">Description:</emphasis> Converts the specified IPv4 address to its numeric representation. The numerical value of an IPv4 address is calculated by treating the IP address as a 4-byte hexadecimal value. For example, the 192.168.1.1 address equals to: 192=C0, 168=A8, 1=01, 1=01, or C0A80101, which is 3232235777 in decimal representation.</para>
        <note>
            <para>This template function is available only if the <filename>convertfuncs</filename> module has been loaded.</para>
            <xi:include href="../../shared/chunk/para-load-module.xml" xmlns:xi="http://www.w3.org/2001/XInclude"/>
        </note>
    </simplesect>
    <simplesect xml:id="template-function-list" condition="ose">
        <title>List manipulation</title>
        <para>The <userinput>list-*</userinput> template functions allow you to manipulate comma-separated lists. Such lists represent a simple array type in &abbrev;. Note the following about formatting lists:</para>
        <itemizedlist>
            <listitem>
                <para>Values are separated by commas, for example, <userinput>"item1","item2","item3"</userinput>. The single-element list is an element without a comma.</para>
            </listitem>
            <listitem>
                <para>You can use shell-like quotation to embed commas, for example, <userinput>"item1","ite\,m2","item3"</userinput>.</para>
            </listitem>
            <listitem>
                <para>Empty values are skipped (except if they are quoted)</para>
            </listitem>
        </itemizedlist>
        <para>These template functions return a well-formed list, properly encoding and quoting all elements. If a template function returns a single element, all quotation is decoded and the value contains the literal value.</para>
        <para>Starting with &abbrev; version <phrase condition="ose">3.10</phrase>, the following list-related template functions are available. Certain functions allow you to reference an element using its number: note that the list index starts with zero, so the index of the first element is 0, the second element is 1, and so on.</para>
        <formalpara xml:id="template-function-list-append">
            <title><parameter>list-append</parameter>
            </title>
            <para/>
        </formalpara>
        <indexterm type="parameter">
            <primary>list-append</primary>
        </indexterm>
        <para><emphasis role="bold">Syntax:</emphasis><synopsis>$(list-append ${list} ${name-value-pair1} ${name-value-pair2} ... )</synopsis></para>
        <para><emphasis role="bold">Description:</emphasis> Returns a list and appends the values of the specified name-value pairs to the end of the list. You can also append elements to an empty list, for example, <userinput>$(list-append '' 'element-to-add')</userinput></para>
        <formalpara xml:id="template-function-list-concat">
            <title><parameter>list-concat</parameter>
            </title>
            <para/>
        </formalpara>
        <indexterm type="parameter">
            <primary>list-concat</primary>
        </indexterm>
        <para><emphasis role="bold">Syntax:</emphasis><synopsis>$(list-concat ${name-value-pair1} ${name-value-pair2} ... )</synopsis>The commas between the parameters are optional.</para>
        <para><emphasis role="bold">Description:</emphasis> This template function creates (concatenates) a list of the values it receives as parameter. The values can be single values (for example, <userinput>${HOST}</userinput>) or lists.</para>
        <para>For example, the value of the <userinput>$(list-concat ${HOST}, ${PROGRAM}, ${PID})</userinput> is a comma-separated list.</para>
        <para>You can concatenate existing lists into a single list using:</para>
        <synopsis>$(list-concat ${list1} ${list2})</synopsis>
        <formalpara xml:id="template-function-list-count">
            <title><parameter>list-count</parameter>
            </title>
            <para/>
        </formalpara>
        <indexterm type="parameter">
            <primary>list-count</primary>
        </indexterm>
        <para><emphasis role="bold">Syntax:</emphasis><synopsis>$(list-count ${list} )</synopsis></para>
        <para><emphasis role="bold">Description:</emphasis> Returns the number of elements in the list.</para>
        <formalpara xml:id="template-function-list-head">
            <title><parameter>list-head</parameter>
            </title>
            <para/>
        </formalpara>
        <indexterm type="parameter">
            <primary>list-head</primary>
        </indexterm>
        <para><emphasis role="bold">Syntax:</emphasis><synopsis>$(list-head ${list} )</synopsis></para>
        <para><emphasis role="bold">Description:</emphasis> Returns the first element of the list, unquoted.</para>
        <formalpara xml:id="template-function-list-nth">
            <title><parameter>list-nth</parameter>
            </title>
            <para/>
        </formalpara>
        <indexterm type="parameter">
            <primary>list-nth</primary>
        </indexterm>
        <para><emphasis role="bold">Syntax:</emphasis><synopsis>$(list-nth &lt;index-number&gt; ${list} )</synopsis></para>
        <para><emphasis role="bold">Description:</emphasis> Returns the nth element of the list, unquoted. Note that the list index starts with zero, so <userinput>(list-nth 1 ${list} )</userinput> returns the second element, and so on.</para>
        <formalpara xml:id="template-function-list-tail">
            <title><parameter>list-tail</parameter>
            </title>
            <para/>
        </formalpara>
        <indexterm type="parameter">
            <primary>list-tail</primary>
        </indexterm>
        <para><emphasis role="bold">Syntax:</emphasis><synopsis>$(list-tail ${list} )</synopsis></para>
        <para><emphasis role="bold">Description:</emphasis> Returns the list without the first element. For example, if the <userinput>${mylist}</userinput> list contains the <userinput>one, two, three</userinput> elements, then <userinput>$(list-tail ${mylist} )</userinput> returns <userinput>two, three</userinput>.</para>
        <formalpara xml:id="template-function-list-slice">
            <title><parameter>list-slice</parameter>
            </title>
            <para/>
        </formalpara>
        <indexterm type="parameter">
            <primary>list-slice</primary>
        </indexterm>
        <para><emphasis role="bold">Syntax:</emphasis><synopsis>$(list-slice &lt;from&gt;:&lt;to&gt; ${list} )</synopsis></para>
        <para><emphasis role="bold">Description:</emphasis> Returns the specified subset of the list. Note that the list index starts with zero, for example, <userinput>$(list-slice 1:2 ${list} )</userinput> returns the second and third element of the list, and so on.</para>
        <para>You can omit the from or to index if you want to start the subset from the beginning or end of the list, for example: <userinput>3:</userinput> returns the list starting with the 4th element, while <userinput>:3</userinput> returns the first four elements.</para>
        <para>Negative numbers select an element from the end of the list, for example, <userinput>-3:</userinput> returns the last three element of the list.</para>
    </simplesect>
    <simplesect xml:id="template-function-length">
        <title>length</title>
        <indexterm type="parameter">
            <primary>length</primary>
        </indexterm>
        <para><emphasis role="bold">Syntax:</emphasis><synopsis>$(length "&lt;macro&gt;")</synopsis></para>
        <para><emphasis role="bold">Description:</emphasis> Returns the length of the macro in characters, for example, the length of the message. For example, the following filter selects messages that are shorter than 16 characters:</para>
        <synopsis>f_short {
    match ('-', value ("$(if ($(length "${MESSAGE}") &lt;= 16) "-" "+")"));
};</synopsis>
    </simplesect>
    <simplesect xml:id="template-function-lowercase">
        <title>lowercase</title>
        <indexterm type="parameter">
            <primary>lowercase</primary>
        </indexterm>
        <para><emphasis role="bold">Syntax:</emphasis><synopsis>$(lowercase "&lt;macro&gt;")</synopsis></para>
        <para><emphasis role="bold">Description:</emphasis> Returns the lowercase version of the specified string or macro. For example, the following example uses the lowercase version of the hostname in a directory name:</para>
        <synopsis>destination d_file {
    file ("/var/log/${MONTH}/${DAY}/$(lowercase "${HOST}")/messages");
};</synopsis>
        <para>Available in &abbrev; <phrase condition="ose">3.5</phrase><phrase condition="pe">7.0</phrase> and later.</para>
    </simplesect>
    <simplesect xml:id="template-function-numerical">
        <title>Numerical operations</title>
        <indexterm type="parameter">
            <primary>numerical operations</primary>
        </indexterm>
        <indexterm type="parameter">
            <primary>addition</primary>
        </indexterm>
        <indexterm type="parameter">
            <primary>substraction</primary>
        </indexterm>
        <indexterm type="parameter">
            <primary>multiplication</primary>
        </indexterm>
        <indexterm type="parameter">
            <primary>division</primary>
        </indexterm>
        <indexterm type="parameter">
            <primary>modulus</primary>
        </indexterm>
        <indexterm type="parameter">
            <primary>average</primary>
        </indexterm>
        <indexterm type="parameter">
            <primary>mean</primary>
        </indexterm>
        <indexterm type="parameter">
            <primary>sum</primary>
        </indexterm>
        <para><emphasis role="bold">Syntax:</emphasis><synopsis>$(&lt;operation&gt; "&lt;value1&gt;" "&lt;value2&gt;")</synopsis></para>
        <para><emphasis role="bold">Description:</emphasis> These template functions allow you to manipulate numbers, that is, to perform addition (+), substraction (-), multiplication (*), division (/), and modulus (%). All of them require two numeric arguments. The result is <userinput>NaN</userinput> (Not-a-Number) if the parameters are not numbers, cannot be parsed, or if a division by zero would occur. For example, to add the value of two macros, use the following template function:</para>
        <synopsis>$(+ "${&lt;MACRO1&gt;}" "${&lt;MACRO2&gt;}");</synopsis>
        <indexterm>
            <primary>correlating log messages</primary>
        </indexterm>
        <indexterm>
            <primary>message correlation</primary>
        </indexterm>
        <para>When you are correlating messages and a name-value pair contains numerical values in the messages, you can calculate the lowest (min), highest (max), total (sum), and mean (average) values. These calculations process every message of the correlation context. For details on message correlation, see <xref linkend="chapter-correlating-log-messages"/>. For example, if the messages of the context have a <userinput>.myfields.load</userinput> name-value pair, you can find the highest load value using the following template function.</para>
        <synopsis>$(max ${.myfields.load})</synopsis>
    </simplesect>
    <simplesect xml:id="template-function-or">
        <title>or</title>
        <para><emphasis role="bold">Syntax:</emphasis><synopsis>$(or &lt;macro1&gt; &lt;macro2&gt;)</synopsis></para>
        <para><emphasis role="bold">Description:</emphasis> This template function returns the first non-empty argument.</para>
    </simplesect>
    <simplesect xml:id="template-function-padding">
        <title>padding</title>
        <para><emphasis role="bold">Syntax:</emphasis><synopsis> $(padding &lt;macro&gt; &lt;width&gt; &lt;prepended-character-or-string&gt;)</synopsis></para>
        <para><emphasis role="bold">Description:</emphasis> This template function returns the value of its first parameter (a string or macro), prepended with a string. This string is <userinput>&lt;width&gt;</userinput> long, and repeats the character or string set in the third parameter. If you use a single character, it is added <userinput>&lt;width&gt;</userinput> times. If you use a string, it is repeated until its length reaches <userinput>&lt;width&gt;</userinput>. The default padding character is ' ' (space). For example:</para>
        <example>
            <title>Using the padding template function</title>
            <para>If the value of the <userinput>${MESSAGE}</userinput> macro is <userinput>mymessage</userinput>, then the output of the <parameter>padding()</parameter> template function is the following:</para>
            <synopsis>$(padding ${MESSAGE} 10 X)</synopsis>
            <para>Output: <userinput>XXXXXXXXXXmymessage</userinput></para>
            <synopsis>$(padding ${MESSAGE} 10 foo)</synopsis>
            <para>Output: <userinput>foofoofoofmymessage</userinput></para>
        </example>
    </simplesect>
    <simplesect xml:id="template-function-python">
        <title>python</title>
        <para><emphasis role="bold">Syntax:</emphasis><synopsis> $(python &lt;name-of-the-python-method-to-use&gt; &lt;arguments-of-the-method&gt;)</synopsis></para>
        <para><emphasis role="bold">Description:</emphasis> This template function enables you to write a custom template function in Python. You can define a Python block in your &abbrev; configuration file, define one or more Python functions in it, and use the methods as template functions. If you use a Python block, &abbrev; embeds a Python interpreter to process the messages. Note the following points:</para>
        <itemizedlist>
            <listitem>
                <para>Currently only Python 2.7 is supported.</para>
            </listitem>
            <listitem>
                <para>The Python block must be a top-level block in the &abbrev; configuration file.</para>
            </listitem>
            <listitem>
                <para>The Python block can contain multiple Python functions.</para>
            </listitem>
            <listitem>
                <para>The first argument in the definition of the Python function is the actual log message. This is implicitly passed to the function, you do not have to use it in the template function.</para>
            </listitem>
            <listitem>
                <para>The value of the template function is return value of the Python function.</para>
            </listitem>
            <listitem>
                <para>To reference a name-value pair or a macro in the Python function, use the dot-notation. For example, if the first argument in the definition of the function is called <userinput>log-message</userinput>, the value of the HOST macro is <userinput>log-message.HOST</userinput>, and so on.</para>
            </listitem>
            <listitem>
                <para>You can define new name-value pairs in the Python function. For example, if the first argument in the definition of the function is called <userinput>log-message</userinput>, you can create a new name-value pair like this: <userinput>log_message["new-macro-name"]="value"</userinput>. This is useful when you parse a part of the message from Python, or lookup a value based on data extracted from the log message.</para>
            </listitem>
        </itemizedlist>
        <formalpara>
            <title>Declaration:</title>
            <para/>
        </formalpara>
        <synopsis>python {
def &lt;name_of_the_python_function&gt;(&lt;log_message&gt;, &lt;optional_other_arguments&gt;):
    # &lt;your-python-code&gt;
    return &lt;value_of_the_template_function&gt;
};

template &lt;template-name&gt; {
    template($(python &lt;name_of_the_python_function&gt;));
};</synopsis>
        <example xml:id="example-python-template-functions">
            <title>Writing template functions in Python</title>
            <para>The following example creates a Python template function called <userinput>return_message</userinput> that returns the MESSAGE part of the log message.</para>
            <synopsis>@version: &techversion;

python {
def return_message(log_message):
    return log_message.MESSAGE
};

destination d_local {
    file("/tmp/logs.txt" template("[$(python return_message)]\n"));
};</synopsis>
            <para>The following example creates a Python template function called <userinput>resolve_host</userinput> that receives an IP address as an argument, and attempts to resolve it into a hostname.</para>
            <synopsis>@version: &techversion;

python {
import socket

def resolve_host(log_message, hostname):
    try:
        return socket.gethostbyaddr(hostname)[0]
    except (socket.herror, socket.error):
        return 'unknown'
};

destination d_local {
    file("/tmp/logs.txt" template("${ISODATE} $(python resolve_host(${SOURCE_IP})) ${MESSAGE}\n"));
};</synopsis>
        </example>
    </simplesect>
    <simplesect xml:id="template-function-replace-delimiter">
        <title>replace-delimiter</title>
        <indexterm type="parameter">
            <primary>replace-delimiter</primary>
        </indexterm>
        <para><emphasis role="bold">Syntax:</emphasis><synopsis>$(replace-delimiter "&lt;old-delimiters&gt;" "&lt;new-delimiter&gt;" "&lt;macro&gt;")</synopsis></para>
        <para><emphasis role="bold">Description:</emphasis> Replaces the delimiter character with a new one. For example, the following example replaces the tabulators (<userinput>\t</userinput>) in the message with semicolons (<userinput>;</userinput>):</para>
        <synopsis>$(replace-delimiter "\t" ";" "${MESSAGE}")</synopsis>
        <para>Available in &abbrev; <phrase condition="ose">3.5</phrase><phrase condition="pe">7.0</phrase> and later.</para>
    </simplesect>
    <simplesect xml:id="template-function-sanitize">
        <title>sanitize</title>
        <indexterm type="parameter">
            <primary>sanitize</primary>
        </indexterm>
        <para><emphasis role="bold">Syntax:</emphasis><synopsis>$(sanitize &lt;options&gt; "&lt;macro1&gt;" "&lt;macro2&gt; ...")</synopsis></para>
        <para><emphasis role="bold">Description:</emphasis> This file replaces the special characters in macro values, for example, it can replace the slash (/) characters in a filename with the underscore (_) character. If you specify multiple arguments, they will be concatenated using the <userinput>/</userinput> character, so they can be used as separate directory levels when used in filenames.</para>
        <para>The function has the following options:</para>
        <variablelist>
            <varlistentry>
                <term><parameter>--ctrl-chars or -c</parameter>
                </term>
                <listitem>
                    <para>Filter control characters (characters that have an ASCII code of 32 or lower). This option is used by default.</para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term><parameter>--invalid-chars &lt;characterlist&gt; or -i &lt;characterlist&gt;</parameter>
                </term>
                <listitem>
                    <para>The list of characters to be replaced with underscores (_). The default list contains the <parameter>/</parameter> character. The following example replaces the \ and @ characters, so for example, fo\o@bar becomes foobar:</para>
                    <synopsis>$(sanitize -i \@ $PROGRAM)</synopsis>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term><parameter>--no-ctrl-chars or -C</parameter>
                </term>
                <listitem>
                    <para>Do not filter the control characters (characters that have an ASCII code of 32 or lower).</para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term><parameter>--replacement &lt;replacement-character&gt; or -r &lt;replacement-character&gt;</parameter>
                </term>
                <listitem>
                    <para>The character used to replace invalid characters. By default, this is the underscore (_). The following example replaces invalid characters with colons instead of underscores, so for example, <userinput>foo/bar</userinput> becomes <userinput>foo;bar</userinput>:</para>
                    <synopsis>$(sanitize -r ; $PROGRAM)</synopsis>
                </listitem>
            </varlistentry>
        </variablelist>
        <example>
            <title>Using the sanitize template function</title>
            <para>The following example uses the sanitize function on two macros, and the results are used as directory names in a file destination.</para>
            <synopsis>file("/var/log/$(sanitize $HOST $PROGRAM)/messages");</synopsis>
            <para>This is equivalent to <filename>file("/var/log/$HOST/$PROGRAM/messages");</filename>, but any slashes in the values of the $HOST and $PROGRAM macros are replaced with underscores.</para>
        </example>
    </simplesect>
    <simplesect xml:id="template-function-stardate" condition="ose">
        <title>stardate</title>
        <indexterm type="parameter">
            <primary>stardate</primary>
        </indexterm>
        <para><emphasis role="bold">Syntax:</emphasis><synopsis>$(stardate [option] "&lt;date-in-unixtime&gt;")</synopsis></para>
        <para><emphasis role="bold">Description:</emphasis> Converts a date in UNIXTIME (for example, ${UNIXTIME}) into <link xmlns:ns1="http://www.w3.org/1999/xlink" ns1:href="https://en.wikipedia.org/wiki/Stardate">stardate</link>, displaying the year and the progress of the year in a number of digits (<userinput>YYYY.NNN</userinput>). You can set the number of digits using the <userinput>--digits</userinput> option, for example:</para>
        <synopsis>$(stardate --digits 2 "${R_UNIXTIME}")</synopsis>
    </simplesect>
    <simplesect xml:id="template-function-strip">
        <title>strip</title>
        <indexterm type="parameter">
            <primary>strip</primary>
        </indexterm>
        <para><emphasis role="bold">Syntax:</emphasis><synopsis>$(strip "&lt;macro&gt;")</synopsis></para>
        <para><emphasis role="bold">Description:</emphasis> Deletes whitespaces from the beginning and the end of a macro. You can specify multiple macros separated with whitespace in a single template function, for example:</para>
        <synopsis>$(strip "${MESSAGE}" "${PROGRAM}")</synopsis>
    </simplesect>
    <simplesect xml:id="template-function-substr">
        <title>substr</title>
        <indexterm type="parameter">
            <primary>substr</primary>
        </indexterm>
        <para><emphasis role="bold">Syntax:</emphasis><synopsis>$(substr "&lt;argument&gt;" "&lt;offset&gt;" "&lt;length&gt;")</synopsis></para>
        <para><emphasis role="bold">Description:</emphasis> This function extracts a substring of a string.</para>
        <variablelist>
            <varlistentry>
                <term><command>argument</command>
                </term>
                <listitem>
                    <para>The string to extract the substring from, for example, <parameter>"${MESSAGE}"</parameter></para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term><command>offset</command>
                </term>
                <listitem>
                    <para>Specifies where the substring begins (in characters). <userinput>0</userinput> means to start from the beginning of the string, <userinput>5</userinput> means to skip the first 5 characters of the string, and so on. Use negative numbers to specify where to start from the end of the string, for example, <userinput>-1</userinput> means the last character, <userinput>-5</userinput> means to start five characters before the end of the string.</para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term><command>length</command>
                </term>
                <listitem>
                    <para><emphasis>Optional parameter</emphasis>: The number of characters to extract. If not specified, the substring will be extracted from the offset to the end of the string. Use negative numbers to stop the substring before the end of the string, for example, <userinput>-5</userinput> means the substring ends five characters before the end of the string.</para>
                </listitem>
            </varlistentry>
        </variablelist>
        <example>
            <title>Using the substr template function</title>
            <para>Skip the first 15 characters of the message, and select the rest:</para>
            <synopsis>$(substr "${MESSAGE}" "15");</synopsis>
            <para>Select characters 16-30 of the message (15 characters with offset 15):</para>
            <synopsis>$(substr "${MESSAGE}" "15" "15");</synopsis>
            <para>Select the last 15 characters of the message:</para>
            <synopsis>$(substr "${MESSAGE}" "-15");</synopsis>
            <para>A template that converts the message to RFC3164 (BSD-syslog) format and truncates the messages to 1023 characters:</para>
            <synopsis>template t_truncate_messages {
    template("$(substr \"&lt;$PRI&gt;$DATE $HOST $MSGHDR$MESSAGE\" \"0\" \"1023\")\n");
    template-escape(no);
};</synopsis>
        </example>
    </simplesect>
    <simplesect xml:id="template-function-uppercase">
        <title>uppercase</title>
        <indexterm type="parameter">
            <primary>uppercase</primary>
        </indexterm>
        <para><emphasis role="bold">Syntax:</emphasis><synopsis>$(uppercase "&lt;macro&gt;")</synopsis></para>
        <para><emphasis role="bold">Description:</emphasis> Returns the uppercase version of the specified string or macro. For example, the following example uses the uppercase version of the hostname in a directory name:</para>
        <synopsis>destination d_file {
file ("/var/log/${MONTH}/${DAY}/$(uppercase "${HOST}")/messages");
};</synopsis>
        <para>Available in &abbrev; <phrase condition="ose">3.5</phrase><phrase condition="pe">7.0</phrase> and later.</para>
    </simplesect>
    <simplesect xml:id="template-function-uuid">
        <title>uuid</title>
        <indexterm type="parameter">
            <primary>uuid</primary>
        </indexterm>
        <para><emphasis role="bold">Syntax:</emphasis><synopsis>$(uuid)</synopsis></para>
        <para><emphasis role="bold">Description:</emphasis> Generates a Universally Unique IDentifier (UUID) that complies with <link xmlns:ns1="http://www.w3.org/1999/xlink" ns1:href="https://www.ietf.org/rfc/rfc4122.txt">RFC4122</link>. That way, an UUID can be added to the message soon after it is received, so messages stored in multiple destinations can be identified. For example, when storing messages in a database and also in files, the UUID can be used to find a particular message both in the database and the files.</para>
        <para>To generate a UUID, you can use a rewrite rule to create a new value-pair for the message.</para>
        <example>
            <title>Using Universally Unique Identifiers</title>
            <para>The following example adds a value-pair called <userinput>MESSAGE_UUID</userinput> to the message using a rewrite rule and a template.</para>
        </example>
        <synopsis>rewrite r_add_uuid { set("$(uuid)" value("MESSAGE_UUID")); };

destination d_file {
    file ("/var/log/messages"
          template("$MESSAGE_UUID $ISODATE $HOST $MSG\n")
          template-escape(no)
         );
};

log { source(s_network);
      rewrite(r_add_uuid);
      destination(d_file);
};</synopsis>
        <note>
            <para>This template function is available only if the <filename>tfuuid</filename> module has been loaded.</para>
            <xi:include href="../../shared/chunk/para-load-module.xml" xmlns:xi="http://www.w3.org/2001/XInclude"/>
        </note>
    </simplesect>
</section>
