<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE section
 [  <!ENTITY % entities SYSTEM "../../common/syslog-ng-entities.ent">
 %entities;]>
<section xml:id="linux-audit-parser" xmlns="http://docbook.org/ns/docbook" version="5.0">
    <title>The Linux Audit Parser</title>
    <indexterm>
        <primary>segmenting messages</primary>
    </indexterm>
    <indexterm>
        <primary>Linux Audit Parser</primary>
    </indexterm>
    <indexterm>
        <primary>auditd</primary>
    </indexterm>
    <indexterm>
        <primary>parsers</primary>
        <secondary>linux-audit-parser</secondary>
    </indexterm>
    <para>The Linux Audit Parser can parse the log messages of the Linux Audit subsystem (<userinput>auditd</userinput>). The &abbrev; application can separate these log messages to name-value pairs. For details on using value-pairs in &abbrev; see <xref linkend="concepts-value-pairs"/>. The following is a sample log message of <userinput>auditd</userinput>:</para>
    <synopsis>type=SYSCALL msg=audit(1441988805.991:239): arch=c000003e syscall=59 success=yes exit=0 a0=7fe49a6d0e98 a1=7fe49a6d0e40 a2=7fe49a6d0e80 a3=2 items=2 ppid=3652 pid=3660 auid=1000 uid=0 gid=0 euid=0 suid=0 fsuid=0 egid=0 sgid=0 fsgid=0 tty=(none) ses=5 comm="dumpe2fs" exe="/sbin/dumpe2fs" key=(null)
type=EXECVE msg=audit(1441988805.991:239): argc=3 a0="dumpe2fs" a1="-h" a2="/dev/sda1"
type=CWD msg=audit(1441988805.991:239):  cwd="/"
type=PATH msg=audit(1441988805.991:239): item=0 name="/sbin/dumpe2fs" inode=137078 dev=08:01 mode=0100755 ouid=0 ogid=0 rdev=00:00 nametype=NORMAL
type=PATH msg=audit(1441988805.991:239): item=1 name="/lib64/ld-linux-x86-64.so.2" inode=5243184 dev=08:01 mode=0100755 ouid=0 ogid=0 rdev=00:00 nametype=NORMAL
type=PROCTITLE msg=audit(1441988805.991:239): proctitle=64756D7065326673002D68002F6465762F73646131</synopsis>
    <para>Certain fields of the audit log can be encoded in hexadecimal format, for example, the <userinput>arch</userinput> field, or the <userinput>a&lt;number&gt;</userinput> fields in the previous example. The &abbrev; application automatically decodes these fields (for example, the <userinput>c000003e</userinput> value becomes <userinput>x86_64</userinput>).</para>
    <para>The &abbrev; application extracts every field into name-value pairs. It automatically decodes the following fields:</para>
    <itemizedlist>
        <listitem>
            <para><userinput>name</userinput></para>
        </listitem>
        <listitem>
            <para><userinput>proctitle</userinput></para>
        </listitem>
        <listitem>
            <para><userinput>path</userinput></para>
        </listitem>
        <listitem>
            <para><userinput>dir</userinput></para>
        </listitem>
        <listitem>
            <para><userinput>comm</userinput></para>
        </listitem>
        <listitem>
            <para><userinput>ocomm</userinput></para>
        </listitem>
        <listitem>
            <para><userinput>data</userinput></para>
        </listitem>
        <listitem>
            <para><userinput>old</userinput></para>
        </listitem>
        <listitem>
            <para><userinput>new</userinput></para>
        </listitem>
    </itemizedlist>
    <para>To parse the log messages of the Linux Audit subsystem, define a parser that has the <parameter>linux-audit-parser()</parameter> option. By default, the parser will process the <userinput>${MESSAGE}</userinput> part of the log message. To process other parts of a log message, use the <parameter>template()</parameter> option. You can also define the parser inline in the log path.</para>
    <formalpara>
        <title>Declaration:</title>
        <para/>
    </formalpara>
    <synopsis>parser parser_name {
    linux-audit-parser(
        prefix()
        template()
    );
};</synopsis>
    <example>
        <title>Using the <parameter>linux-audit-parser()</parameter> parser</title>
        <para>In the following example, the source is a log file created by auditd. Since the audit log format is not a syslog format, the syslog parser is disabled, so that &abbrev; does not parse the message: <userinput>flags(no-parse)</userinput>. The parser inserts "<userinput>.auditd.</userinput>" prefix before all extracted name-value pairs. The destination is a file, that uses the <parameter>format-json</parameter> template function. Every name-value pair that begins with a dot ("<userinput>.</userinput>") character will be written to the file (<userinput>dot-nv-pairs</userinput>). The log line connects the source, the destination, and the parser.</para>
        <synopsis>source s_auditd {
    file(/var/log/audit/audit.log flags(no-parse));
};

destination d_json {
    file("/tmp/test.json"
        template("$(format-json .auditd.*)\n"));
};

parser p_auditd {
    linux-audit-parser (prefix(".auditd."));
};

log {
    source(s_auditd);
    parser(p_auditd);
    destination(d_json);
};</synopsis>
        <para>You can also define the parser inline in the log path.</para>
        <synopsis>source s_auditd {
    file(/var/log/audit/audit.log);
};

destination d_json {
    file("/tmp/test.json"
        template("$(format-json .auditd.*)\n"));
};

log {
    source(s_auditd);
    parser {
        linux-audit-parser (prefix(".auditd."));
    };
    destination(d_json);
};</synopsis>
    </example>
    <section xml:id="linux-audit-parser-options">
        <title>Options of <parameter>linux-audit-parser()</parameter> parsers</title>
        <para>The <parameter>linux-audit-parser()</parameter> has the following options.</para>
        <simplesect>
            <xi:include href="../../common/chunk/option-parser-prefix.xml" xmlns:xi="http://www.w3.org/2001/XInclude"/>
        </simplesect>
        <simplesect>
            <xi:include href="../../common/chunk/option-parser-template.xml" xmlns:xi="http://www.w3.org/2001/XInclude"/>
        </simplesect>
    </section>
</section>
