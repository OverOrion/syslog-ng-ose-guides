<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE note
 [  <!ENTITY % entities SYSTEM "../syslog-ng-entities.ent">
 %entities;]>
<itemizedlist xmlns="http://docbook.org/ns/docbook" version="5.0">
    <listitem>
        <para>The main body of the configuration file consists of object definitions: sources, destinations, logpaths define which log message are received and where they are sent. All identifiers, option names and attributes, and any other strings used in the syslog-ng configuration file are case sensitive. Object definitions (also called statements) have the following syntax:</para>
        <synopsis>type-of-the-object identifier-of-the-object {&lt;parameters&gt;};</synopsis>
        <itemizedlist>
            <listitem>
                <para><emphasis>Type of the object</emphasis>: One of <parameter>source</parameter>, <parameter>destination</parameter>, <parameter>log</parameter>, <parameter>filter</parameter>, <parameter>parser</parameter>, <parameter>rewrite</parameter> rule, or <parameter>template</parameter>.</para>
            </listitem>
            <listitem>
                <para><emphasis>Identifier of the object</emphasis>: A unique name identifying the object. When using a reserved word as an identifier, enclose the identifier in quotation marks.</para>
                <para>All identifiers, attributes, and any other strings used in the syslog-ng configuration file are case sensitive.</para>
                <tip>
                    <para>Use identifiers that refer to the type of the object they identify. For example, prefix source objects with <userinput>s_</userinput>, destinations with <userinput>d_</userinput>, and so on.</para>
                </tip>
                <note>
                    <para>Repeating a definition of an object (that is, defining the same object with the same id more than once) is not allowed, unless you use the <parameter>@define allow-config-dups 1</parameter> definition in the configuration file.</para>
                </note>
            </listitem>
            <listitem>
                <para><emphasis>Parameters</emphasis>: The parameters of the object, enclosed in braces <userinput>{parameters}</userinput>.</para>
            </listitem>
            <listitem>
                <para><emphasis>Semicolon</emphasis>: Object definitions end with a semicolon (<userinput>;</userinput>).</para>
            </listitem>
        </itemizedlist>
        <para>For example, the following line defines a source and calls it <userinput>s_internal</userinput>.</para>
        <synopsis>source s_internal { internal(); };</synopsis>
        <para>The object can be later referenced in other statements using its ID, for example, the previous source is used as a parameter of the following log statement:</para>
        <synopsis>log { source(s_internal); destination(d_file); };</synopsis>
    </listitem>
    <listitem>
        <para>The parameters and options within a statement are similar to function calls of the C programming language: the name of the option followed by a list of its parameters enclosed within brackets and terminated with a semicolon.</para>
        <synopsis>option(parameter1, parameter2); option2(parameter1, parameter2);</synopsis>
        <para>For example, the <parameter>file()</parameter> driver in the following source statement has three options: the filename (<filename>/var/log/apache/access.log</filename>), <parameter>follow-freq()</parameter>, and <parameter>flags()</parameter>. The <parameter>follow-freq()</parameter> option also has a parameter, while the <parameter>flags()</parameter> option has two parameters.</para>
        <synopsis>source s_tail { file("/var/log/apache/access.log"
    follow-freq(1) flags(no-parse, validate-utf8)); };</synopsis>
        <para>Objects may have required and optional parameters. Required parameters are positional, meaning that they must be specified in a defined order. Optional parameters can be specified in any order using the <literal>option(value)</literal> format. If a parameter (optional or required) is not specified, its default value is used. The parameters and their default values are listed in the reference section of the particular object.</para>
        <example>
            <title>Using required and optional parameters</title>
            <para>The <parameter>unix-stream()</parameter> source driver has a single required argument: the name of the socket to listen on. Optional parameters follow the socket name in any order, so the following source definitions have the same effect:</para>
            <synopsis>source s_demo_stream1 {
        unix-stream("&lt;path-to-socket&gt;" max-connections(10) group(log)); };
source s_demo_stream2 {
        unix-stream("&lt;path-to-socket&gt;" group(log) max-connections(10)); };</synopsis>
        </example>
    </listitem>
    <listitem>
        <para>Some options are global options, or can be set globally, for example, whether &abbrev; should use DNS resolution to resolve IP addresses. Global options are detailed in <xref linkend="chapter-global-options"/>.</para>
        <synopsis>options { use-dns(no); };</synopsis>
    </listitem>
    <listitem>
        <para>Objects can be used before definition.</para>
    </listitem>
    <listitem>
        <para>Objects can be defined inline as well. This is useful if you use the object only once (for example, a filter). For details, see <xref linkend="inline-objects"/>.</para>
    </listitem>
    <listitem>
        <para>To add comments to the configuration file, start a line with <userinput>#</userinput> and write your comments. These lines are ignored by syslog-ng.</para>
        <synopsis># Comment: This is a stream source
source s_demo_stream {
        unix-stream("&lt;path-to-socket&gt;" max-connections(10) group(log)); };</synopsis>
    </listitem>
</itemizedlist>
