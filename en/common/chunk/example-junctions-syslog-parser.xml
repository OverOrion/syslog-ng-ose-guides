<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE example
 [  <!ENTITY % entities SYSTEM "../syslog-ng-entities.ent">
 %entities;]>
<example xmlns="http://docbook.org/ns/docbook" version="5.0">
    <title>Using junctions</title>
    <para>For example, suppose that you have a single network source that receives log messages from different devices, and some devices send messages that are not RFC-compliant (some routers are notorious for that). To solve this problem in earlier versions of &abbrev;, you had to create two different network sources using different IP addresses or ports: one that received the RFC-compliant messages, and one that received the improperly formatted messages (for example, using the <userinput>flags(no-parse)</userinput> option). Using junctions this becomes much more simple: you can use a single network source to receive every message, then use a junction and two channels. The first channel processes the RFC-compliant messages, the second everything else. At the end, every message is stored in a single file. The filters used in the example can be <parameter>host()</parameter> filters (if you have a list of the IP addresses of the devices sending non-compliant messages), but that depends on your environment.</para>
    <synopsis>log {
    source { syslog(ip(10.1.2.3) transport("tcp") flags(no-parse)); };
    junction {
        channel { filter(f_compliant_hosts); parser { syslog-parser(); }; };
        channel { filter(f_noncompliant_hosts); };
    };
    destination { file("/var/log/messages"); };
};</synopsis>
    <para>Since every channel receives every message that reaches the junction, use the <userinput>flags(final)</userinput> option in the channels to avoid the unnecessary processing the messages multiple times:</para>
    <synopsis>log {
    source { syslog(ip(10.1.2.3) transport("tcp") flags(no-parse)); };
    junction {
        channel { filter(f_compliant_hosts); parser { syslog-parser(); }; flags(final); };
        channel { filter(f_noncompliant_hosts); flags(final); };
    };
    destination { file("/var/log/messages"); };
};</synopsis>
    <para>Note that &abbrev; has several parsers that you can use to parse non-compliant messages. You can even <link linkend="python-parser">write a custom syslog-ng parser in Python</link>. For details, see <xref linkend="chapter-parsers"/>.</para>
</example>
