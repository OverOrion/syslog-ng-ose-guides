<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE article
[
<!ENTITY % entities SYSTEM "../common/syslog-ng-entities.ent">
%entities;
]>
<section xml:id="mutual-authentication-syslog-ng" xmlns="http://docbook.org/ns/docbook">
    <title>Configuring &abbrev;</title>
    <para>Once you are ready with generating CA, server and client certificates, copy them to the respective machines and configure &abbrev; to use them. In theory, the CA and other certificates could be placed anywhere in the file system. In practice, server applications, such as &abbrev; are often protected by AppArmor, SELinux or other mechanisms, therefore it is recommended to create sub-directories where the <filename>syslog-ng.conf</filename> resides. This way &abbrev; can read them without modifying the related access rules.</para>
    <procedure xml:id="mutual-authentication-configure-server">
        <title>Configuring the &abbrev; server</title>
        <formalpara>
            <title>Purpose:</title>
            <para/>
        </formalpara>
        <para>In the following example <filename>syslog-ng.conf</filename> is under <filename>/usr/local/etc/syslog-ng</filename>, but it could be <filename>/opt/syslog-ng/etc/</filename>, <filename>/etc/syslog-ng/</filename> or any other directory in your system, so adopt the configuration example accordingly.</para>
        <formalpara>
            <title>Steps:</title>
            <para/>
        </formalpara>
        <step>
            <para>As a first step, create two new directories under the &abbrev; configuration directory:</para>
            <para><command>mkdir cert.d ca.d</command></para>
        </step>
        <step>
            <para>Copy <filename>serverkey.pem</filename> and <filename>servercert.pem</filename> to <filename>cert.d</filename>. Copy <filename>cacert.pem</filename> to <filename>ca.d</filename> and issue the following command on the certificate:</para>
            <para><command>openssl x509 -noout -hash -in cacert.pem </command></para>
            <para>The result is a hash (for example 6d2962a8), a series of alphanumeric characters based on the Distinguished Name of the certificate.</para>
        </step>
        <step>
            <para>Issue the following command to create a symbolic link to the certificate that uses the hash returned by the previous command and the <filename>.0</filename> suffix.</para>
            <para><command>ln -s cacert.pem 6d2962a8.0</command></para>
        </step>
        <step>
            <para>Adopt the following configuration example to your <filename>syslog-ng.conf</filename> by changing the IP and port parameters and directories to your local environment. In the log statement replace “<filename>d_local</filename>” with an actual log destination name in your configuration (for example the one that refers to <filename>/var/log/messages</filename>).</para>
            <synopsis>source demo_tls_source {
    network(ip(0.0.0.0) port(6514)
        transport("tls")
        tls( key_file("/usr/local/etc/syslog-ng/cert.d/serverkey.pem")
             cert_file("/usr/local/etc/syslog-ng/cert.d/servercert.pem")
             ca_dir("/usr/local/etc/syslog-ng/ca.d"))
    ); };

log { source(demo_tls_source); destination(d_local); };</synopsis>
        </step>
        <step>
            <para>Finally, restart &abbrev; for the configuration changes to take effect.</para>
        </step>
    </procedure>
    <procedure xml:id="mutual-authentication-configure-clients">
        <title>Configuring &abbrev; clients</title>
        <formalpara>
            <title>Purpose:</title>
            <para/>
        </formalpara>
        <para>Configuring the client side is similar to the server, the difference is in the configuration part. In the following example <filename>syslog-ng.conf</filename> is under <filename>/etc/syslog-ng</filename>, but it could be <filename>/opt/syslog-ng/etc/</filename>, <filename>/usr/local/etc/syslog-ng/</filename> or any other directory on your system, so adopt the configuration example accordingly.</para>
        <formalpara>
            <title>Steps:</title>
            <para/>
        </formalpara>
        <step>
            <para>As a first step, create two new directories under the &abbrev; configuration directory:</para>
            <para><command>mkdir cert.d ca.d</command></para>
        </step>
        <step>
            <para>Copy <filename>clientkey.pem</filename> and <filename>clientcert.pem</filename> to <filename>cert.d</filename>. Copy <filename>cacert.pem</filename> to <filename>ca.d</filename> and issue the following command on the certificate:</para>
            <para><command>openssl x509 -noout -hash -in cacert.pem</command></para>
            <para>The result is a hash (for example 6d2962a8), a series of alphanumeric characters based on the Distinguished Name of the certificate.</para>
        </step>
        <step>
            <para>Issue the following command to create a symbolic link to the certificate that uses the hash returned by the previous command and the <filename>.0</filename> suffix.</para>
            <para><command>ln -s cacert.pem 6d2962a8.0</command></para>
        </step>
        <step>
            <para>Adopt the following configuration example to your <filename>syslog-ng.conf</filename> by changing the IP and port parameters and directories to your local environment. In the log statement replace “<filename>src</filename>” with an actual log source name in your configuration.</para>
            <synopsis>destination demo_tls_destination {
    network("172.16.177.147" port(6514)
    transport("tls")
    tls( ca_dir("/etc/syslog-ng/ca.d")
         key_file("/etc/syslog-ng/cert.d/clientkey.pem")
         cert_file("/etc/syslog-ng/cert.d/clientcert.pem") )
    ); };

log { source(src); destination(demo_tls_destination); };</synopsis>
        </step>
        <step>
            <para>Finally, restart &abbrev; for the configuration changes to take effect.</para>
        </step>
    </procedure>
</section>
