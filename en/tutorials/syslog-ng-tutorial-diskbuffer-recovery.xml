<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE article
  [<!ENTITY % entities SYSTEM "../common/syslog-ng-entities.ent">
  %entities;
  ]>
<article xmlns="http://docbook.org/ns/docbook" version="5.0" xml:id="syslog-ng-tutorial-diskbuffer-recovery" condition="pe" xml:lang="en_EN">
    <info>
        <title>Processing messages stuck in the disk queue files of &product;</title>
        <orgname>&fullvendor;</orgname>
        <keywordset>
            <keyword>diskbuffer, disk queue, recovery, &pe;, &peabbrev;, &ose;, &oseabbrev;, &docgithash;</keyword>
        </keywordset>
        <subjectset>
            <subject>
                <subjectterm>support, diskbuffer, disk queue, recovery, syslog-ng troubleshooting</subjectterm>
            </subject>
        </subjectset>
        <xi:include href="../xml-stylesheet/common/common.xml" xmlns:xi="http://www.w3.org/2001/XInclude" xpointer="common_copyright_bb"/>
        <pubdate>
<?dbtimestamp?>
        </pubdate>
        <xi:include xmlns:xi="http://www.w3.org/2001/XInclude" href="../xml-stylesheet/common/common.xml" xpointer="common_logo_bb"/>
    </info>
    <bridgehead>Problem</bridgehead>
    <para>When you change the configuration of a &abbrev; host that uses disk-based buffering (also called dis queue), &abbrev; may start new disk buffer files for the destinations that you have changed. In such case, &abbrev; abandons the old disk queue files. If there were unsent log messages in the  disk queue files, these messages remain in the disk queue files, and will not be sent to the destinations.</para>
    <para>This document explains the steps required to find, examine, and flush the log messages from such orphaned disk queue files.</para>

    <procedure xml:id="recover-messages-from-syslog-ng-disk-queue-files">
        <title>Recover log messages from orphaned disk queue files</title>
        <formalpara>
            <title>Overview:</title>
            <para></para>
        </formalpara>
        <orderedlist>
            <listitem>
                <para><link linkend="identify-the-active-queue-files">Identify the active queue files</link></para>
            </listitem>
            <listitem>
                <para><link linkend="identify-valid-data">Identify which queue files still hold valid data</link></para>
            </listitem>
            <listitem>
                <para><link linkend="send-queue-files">Configure a separate syslog instance to send queue files to the processing application</link></para>
            </listitem>
        </orderedlist>
        <formalpara>
            <title>Steps:</title>
            <para></para>
        </formalpara>
        <step xml:id="identify-the-active-queue-files">
            <formalpara>
                <title>Identify the active queue files</title>
                <para></para>
            </formalpara>
            <para>The &abbrev; application keeps track of active disk queue files, and the internal state of its source drivers in the <filename>syslog-ng.persist</filename> file. While running, &abbrev; uses the <userinput>mmap()</userinput> system call to map the file's contents into physical memory. This means that the actual contents of the file may not always contain the up-to-date internal state of &abbrev;. For this reason, while you are working with the <filename>syslog-ng.persist</filename> file, stop &abbrev;.</para>
            <para>The following command lists the destinations and the related queue files.</para>
            <synopsis># /opt/syslog-ng/bin/persist-tool dump /opt/syslog-ng/var/syslog-ng.persist | fgrep qfile</synopsis>
            <para>The output if this command is similar to the following:</para>
            <synopsis>afsocket_dd_qfile(stream,127.0.0.1:601) = { "queue_file": "\/\/syslog-ng-00001.rqf" }</synopsis>
        </step>
        <step xml:id="identify-valid-data">
            <formalpara>
                <title>Identify which queue files hold valid data</title>
                <para></para>
            </formalpara>
            <para>To identify which queue files hold unsent data, use the following two commands for your disk queue files (the example shows a single file called <filename>syslog-ng-00000.rqf</filename>):</para>
            <synopsis># /opt/syslog-ng/bin/dqtool info syslog-ng-00000.rqf
# /opt/syslog-ng/bin/dqtool cat syslog-ng-00000.rqf</synopsis>
            <informalexample>
                <synopsis>root@server:/# /opt/syslog-ng/bin/dqtool info syslog-ng-00000.rqf
Reliable disk-buffer state loaded; filename='syslog-ng-00000.rqf', queue_length='138', size='71962'
root@server:/# /opt/syslog-ng/bin/dqtool cat syslog-ng-00000.rqf | tail -n 3
Reliable disk-buffer state loaded; filename='syslog-ng-00000.rqf', queue_length='138', size='71962'
Feb 20 17:22:14.776 server -- MARK --
Feb 20 17:42:14.777 server -- MARK --
Feb 20 18:02:14.778 server -- MARK --
root@server:/#</synopsis>
            </informalexample>
            <para>To identify queue files with valid data in them, use the following command. This command prints the names of disk queue files which hold valid data.</para>
            <synopsis># for q in *.rqf; do /opt/syslog-ng/bin/dqtool info ${q} 2>&amp;1 | fgrep queue_length; done | awk -F \' '{ if ($4 > 0) { print $2; } }'</synopsis>
            <para>Verify that the contents of the queue files are indeed valid. If you want to forward the messages to an application, verify that the receiving application will be able to parse them.</para>
        </step>
        <step xml:id="send-queue-files">
            <formalpara>
                <title>Configure a separate instance of &abbrev; to send queue files to the processing application</title>
                <para></para>
            </formalpara>
            <para>In order to process the queue files that contain valid data, you must configure and temporarily run a separate &abbrev; instance.</para>
            <para>The configuration must include a source that will definitely not receive any logs, connected to a network destination that points to the desired IP address and port number, and has disk queue configured. When you start &abbrev; with this configuration, it will generate a persist file that you can modify later on.</para>
            <substeps>
                <step>
                    <para>Create an appropriate configuration for your environment that matches the above criteria. For example:</para>
                    <informalexample>
                        <synopsis>@version:6.0
@include "scl.conf"
#
# sample configuration file for syslog-ng on AIX
# users should customize to fit their needs
#

options {
        threaded(yes);
        keep-hostname(yes);
        keep-timestamp(yes);
};

source nofile {
        file (
                "/no_such_file_or.dir"
        );
};

destination extra_listener {
        syslog(
                "127.0.0.1"
                port(10641)
                disk-buffer(
                        disk-buf-size(1048576)
                        reliable(yes)
                )
        );
};

log {
        source(nofile);
        destination(extra_listener);
};</synopsis>
                    </informalexample>
                </step>
                <step>
                    <formalpara>
                        <title>Start &abbrev; briefly from the command-line to generate a persist file.</title>
                        <para/>
                    </formalpara>
                    <para>Make sure to use the configuration file you created in the previous step using the <parameter>--cfgfile</parameter> option, and to use a non-existing persist file (to avoid overwriting the persist file of your regular &abbrev; instance). The following command uses the <filename>/root/syslog/syslog-ng.conf</filename> configuration file, and the <filename>/root/syslog/syslog-ng.persist</filename> persist file.</para>
                    <synopsis>root@server:~/syslog# /opt/syslog-ng/sbin/syslog-ng --foreground --enable-core --no-caps --cfgfile /root/syslog/syslog-ng.conf --pidfile /root/syslog/syslog-ng.sender.pid --control /root/syslog/syslog-ng.sender.ctl --persist-file /root/syslog/syslog-ng.persist --qdisk-dir /root/syslog/</synopsis>
                    <para>After &abbrev; starts up and generates the persist file, press <keycap>CTRL+C</keycap> to stop &abbrev;.</para>
                </step>
                <step>
                    <formalpara>
                        <title>Edit the persist file to include the location of the orphaned disk queue files.</title>
                        <para/>
                    </formalpara>
                    <para>Use the following <command>/opt/syslog-ng/bin/persist-tool dump /root/syslog/syslog-ng.persist</command> command to display the contents of the persist file generated in the previous step, for example:</para>
                    <synopsis>root@server:~/syslog# /opt/syslog-ng/bin/persist-tool dump /root/syslog/syslog-ng.persist
afsocket_dd_qfile(stream,127.0.0.1:10641) = { "queue_file": "\/root\/syslog\/\/syslog-ng-00000.rqf" }

affile_sd_curpos(/no_such_file_or.dir) = { "version": 1, "big_endian": false, "raw_buffer_leftover_size": 0, "buffer_pos": 0, "pending_buffer_end": 0, "buffer_size": 0, "buffer_cached_eol": 0, "pending_buffer_pos": 0, "raw_stream_pos": 0, "pending_raw_stream_pos": 0, "raw_buffer_size": 0, "pending_raw_buffer_size": 0, "file_size": 0, "file_inode": 0, "run_id": 1 }

run_id = { "value": "01 00 00 00" }</synopsis>
                    <para>Issue the following commands to modify the persist file.</para>
                    <synopsis>/opt/syslog-ng/bin/persist-tool dump /root/syslog/syslog-ng.persist > persist.dump
sed -i -e 's:syslog-ng-00000:full:' -e '/^run_id/ d' -e '/^$/ d' persist.dump
rm syslog-ng.persist
/opt/syslog-ng/bin/persist-tool add persist.dump -o .</synopsis>
                    <para>As a result, references to the <userinput>syslog-ng-00000.rqf</userinput> disk queue file should change to <userinput>full.rqf</userinput>. Display the contents of the persist file again to verify this.</para>
                    <synopsis>root@server:~/syslog# /opt/syslog-ng/bin/persist-tool dump /root/syslog/syslog-ng.persist
affile_sd_curpos(/no_such_file_or.dir) = { "version": 1, "big_endian": false, "raw_buffer_leftover_size": 0, "buffer_pos": 0, "pending_buffer_end": 0, "buffer_size": 0, "buffer_cached_eol": 0, "pending_buffer_pos": 0, "raw_stream_pos": 0, "pending_raw_stream_pos": 0, "raw_buffer_size": 0, "pending_raw_buffer_size": 0, "file_size": 0, "file_inode": 0, "run_id": 1 }

afsocket_dd_qfile(stream,127.0.0.1:10641) = { "queue_file": "\/root\/syslog\/\/full.rqf" }</synopsis>
                </step>
                <step>
                    <formalpara>
                        <title>Rename the queue file to the filename set in the persist file previously.</title>
                        <para></para>
                    </formalpara>
                    <synopsis>root@server:~/syslog# ls -l *.rqf
-rw------- 1 root root  4096 febr  21 23:57 full.rqf
-rw------- 1 root root 78506 febr  22 20:45 syslog-ng-00000.rqf
root@server:~/syslog# cp /syslog-ng-00000.rqf full.rqf
root@server:~/syslog# ls -l *.rqf
-rw------- 1 root root 78506 febr  22 20:45 full.rqf
-rw------- 1 root root 78506 febr  22 20:45 syslog-ng-00000.rqf</synopsis>
                </step>
                <step>
                    <formalpara>
                        <title>Start the new syslog-ng instance</title>
                        <para></para>
                    </formalpara>
                    <para>Start the new syslog-ng instance, and let it run until size of the queue file decreases to 4 KB. After that, press <keycap>Ctrl+C</keycap> to stop the syslog-ng instance.</para>
                    <synopsis>/opt/syslog-ng/sbin/syslog-ng --foreground --enable-core --no-caps --cfgfile /root/syslog/syslog-ng.conf --pidfile /root/syslog/syslog-ng.sender.pid --control /root/syslog/syslog-ng.sender.ctl --persist-file /root/syslog/syslog-ng.persist --qdisk-dir /root/syslog/
^C
root@server:~/syslog# ls -l *.rqf
-rw------- 1 root root  4096 febr  22 22:19 full.rqf
-rw------- 1 root root 78506 febr  22 20:45 syslog-ng-00000.rqf
root@server:~/syslog#</synopsis>
                    <para>If you wish to verify or debug &abbrev; sending the queue file contents, use the additional <userinput>--verbose --debug --stderr</userinput> options, for example:</para>
                    <synopsis>/opt/syslog-ng/sbin/syslog-ng --foreground --verbose --debug --stderr --enable-core --no-caps --cfgfile /root/syslog/syslog-ng.conf --pidfile /root/syslog/syslog-ng.sender.pid --control /root/syslog/syslog-ng.sender.ctl --persist-file /root/syslog/syslog-ng.persist --qdisk-dir /root/syslog/</synopsis>
                </step>
                <step>
                    <formalpara>
                        <title>Repeat these steps for the other left-over queue files</title>
                        <para></para>
                    </formalpara>
                    <para>After you have processed all left-over queue files this way, all the missing recoverable logs should have found their way to their intended destinations.</para>
                </step>
            </substeps>
        </step>
    </procedure>

    <xi:include xmlns:xi="http://www.w3.org/2001/XInclude" href="../xml-stylesheet/common/about-balabit.xml"/>

    <appendix>
        <title>About disk queue files</title>

        <xi:include xmlns:xi="http://www.w3.org/2001/XInclude" href="../common/chunk/topic-about-disk-queue-files.xml"/>

    </appendix>
</article>
