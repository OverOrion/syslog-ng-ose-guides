<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE reference
[
  <!ENTITY % entities SYSTEM "../syslog-ng-admin-guide/syslog-ng-entities.ent">
  %entities;
  ]>
<reference xml:id="lgstool-man-page" xmlns="http://docbook.org/ns/docbook" version="5.0">
  <info>
    <productname>&product;</productname>
    <title>The logstore tool manual page</title>
  </info>
  <refentry xml:id="lgstool.1">
    <refmeta>
      <refentrytitle>lgstool</refentrytitle>
      <manvolnum>1</manvolnum>
      <refmiscinfo class='version'>&version;</refmiscinfo>
      <refmiscinfo class='source'>&product;</refmiscinfo>
    </refmeta>
    <refnamediv>
      <refname>lgstool</refname>
      <refpurpose>Inspect and validate the binary log files (logstores) created with &product; </refpurpose>
    </refnamediv>
    <refsynopsisdiv>
      <cmdsynopsis>
        <command>lgstool</command>
        <arg>command</arg>
        <arg>options</arg>
      </cmdsynopsis>
    </refsynopsisdiv>
    <refsect1 xml:id="lgstool_mandescription">
      <title>Description</title>
      <para>NOTE: The lgstool application is distributed with the &product; system logging application, and is usually part of the syslog-ng package. The latest version of the syslog-ng application is available at the <link xmlns:ns1="http://www.w3.org/1999/xlink" ns1:href="http://www.balabit.com/network-security/syslog-ng/"
          >official syslog-ng website</link>. The <command>lgstool</command> utility is available for Microsoft Windows operating systems at the <link xmlns:ns1="http://www.w3.org/1999/xlink" ns1:href="http://www.balabit.com/network-security/syslog-ng/central-syslog-server/upgrades/">&product; Download Page</link>. </para>
      <para>This manual page is only an abstract; for the complete documentation of syslog-ng, see
          <link xmlns:ns1="http://www.w3.org/1999/xlink" ns1:href="http://www.balabit.com/support/documentation/">
          The &product; Administrator Guide
        </link>.</para>
      <para>The <command>lgstool</command> application is a utility that can be used to:</para>
      <itemizedlist>
        <listitem>
          <para>display and format the messages stored in logstore files;</para>
        </listitem>
        <listitem>
          <para>display the record structure of logstore files;</para>
        </listitem>
        <listitem>
          <para>process log messages from orphaned journal files and write them into logstore files;</para>
        </listitem>
        <listitem>
          <para>follow (tail) messages arriving to a logstore file real-time;</para>
        </listitem>
        <listitem>
          <para>validate the digital signature and timestamp of encrypted logstore files;</para>
        </listitem>
      </itemizedlist>
      <para>Note that in the Windows-version of <command>lgstool</command> the <command>recover</command> option is not available and the functionality of the <command>tail</command> option is limited.</para>
    </refsect1>
    <refsect1 xml:id="lgstool_cat">
      <title>The cat command</title>
      <cmdsynopsis>
        <command>cat</command>
        <arg>options</arg>
        <arg>file</arg>
      </cmdsynopsis>
      <para>Use the <command>cat</command> command to display the log messages stored in the logstore file. Log messages available in the journal file of the logstore (but not yet written to the logstore file itself) are displayed as well. The messages are printed to the standard output (stdout), so it is possible to use grep and other tools to find particular log messages, e.g., <command>lgstool cat /var/log/messages.lgs |grep 192.168.1.1</command>. Note that can also follow logstore files &mdash; for details on this feature, see <xref linkend="lgstool_tail"/>.</para>
      <para>The <command>cat</command> command has the following options:</para>
      <variablelist>
        <varlistentry>
          <term><command>--debug</command> or <command>-d</command></term>
          <listitem>
            <para>Print diagnostic and debugging messages to stderr.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><command>--filter&lt;expression&gt;</command> or <command>-i</command></term>
        <listitem>
          <para>Only print messages matching the specified &abbrev; filter. All possible macros, regular expressions and logical expressions can be specified in a filter.</para>
          <example>
            <title>lgstool cat filter</title>
            <synopsis>lgstool cat  -t 'host: ${HOST} program: ${PROGRAM} msg: ${MSG}\n' --filter='program("prg0000[0]")' /tmp/logstore-serialized.lgs</synopsis>
          </example>
        </listitem>
        </varlistentry>
        <varlistentry>
          <term><command>--help</command> or <command>-h</command></term>
          <listitem>
            <para>Display a brief help message.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><command>--key=&lt;keyfile&gt;</command> or <command>-k</command></term>
          <listitem>
            <para>Use the specified private key to decrypt encrypted logstore files.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><command>--seek=&lt;ID&gt;</command> or <command>-s</command></term>
          <listitem>
            <para>Display only messages newer than the message specified.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><command>--template=&lt;template&gt;</command> or <command>-t</command></term>
          <listitem>
            <para>Format the messages using the specified template.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><command>--verbose</command> or <command>-v</command></term>
          <listitem>
            <para>Print verbose messages to stderr.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><command>--version</command> or <command>-V</command></term>
          <listitem>
            <para>Display version information.</para>
          </listitem>
        </varlistentry>
      </variablelist>
      <para>Example:
        <synopsis>lgstool cat --key=mykey.pem mylogstore.lgs</synopsis></para>
    </refsect1>
    <refsect1 xml:id="lgstool_inspect">
      <title>The inspect command</title>
      <cmdsynopsis>
        <command>inspect</command>
        <arg>options</arg>
        <arg>file</arg>
      </cmdsynopsis>
      <para>Use the <command>inspect</command> command to display structure of the logstore file. The following information is displayed:</para>
      <itemizedlist>
          <listitem>
              <para><emphasis>cipher</emphasis>: The cipher algorithm used to encrypt the logstore file.</para>
          </listitem>
          <listitem>
              <para><emphasis>digest</emphasis>: The digest (hash) algorithm used.</para>
          </listitem>
          <listitem>
              <para><emphasis>encrypt</emphasis>: <parameter>TRUE</parameter> if the logstore file is encrypted.</para>
          </listitem>
          <listitem>
              <para><emphasis>compress</emphasis>: <parameter>TRUE</parameter> if the logstore file is compressed.</para>
          </listitem>
          <listitem>
              <para><emphasis>hmac</emphasis>: <parameter>TRUE</parameter> if the logstore file includes HMAC (Hash-based Message Authentication Code) information for the chunks.</para>
          </listitem>
          <listitem>
              <para><emphasis>chunk_mac</emphasis>: The MAC (Message Authentication Code) of the chunk.</para>
          </listitem>
          <listitem>
              <para><emphasis>file_mac</emphasis>: The MAC (Message Authentication Code) of the chunk.</para>
          </listitem>
      </itemizedlist>
      <para>For timestamped logstore files, the following information is also displayed:</para>
      <itemizedlist>
          <listitem>
              <para><emphasis>chunk_id</emphasis>: The ID of the chunk.</para>
          </listitem>
          <listitem>
              <para><emphasis>Version</emphasis>: The version of the logstore file format used.</para>
          </listitem>
          <listitem>
              <para><emphasis>Policy OID</emphasis>: The OID of the timestamping policy used in the timestamping request.</para>
          </listitem>
          <listitem>
              <para><emphasis>Hash Algorithm</emphasis>: The digest (hash) algorithm used to create the hash of the chunk.</para>
          </listitem>
          <listitem>
              <para><emphasis>Serial number</emphasis>: The serial number of the timestamp.</para>
          </listitem>
          <listitem>
              <para><emphasis>Timestamp</emphasis>: The date when the Timestamping Authority timestamped the chunk.</para>
          </listitem>
          <listitem>
              <para><emphasis>Accuracy</emphasis>: The accuracy of the timestamp.</para>
          </listitem>
          <listitem>
              <para><emphasis>Ordering</emphasis>: Indicates the status of the ordering field in the timestamping request.</para>
          </listitem>
          <listitem>
              <para><emphasis>Nonce</emphasis>: The nonce (a large random number with a high probability that it is generated by the client only once) included in the timestamping request (if any).</para>
          </listitem>
          <listitem>
              <para><emphasis>TSA</emphasis>: The Distinguished Name (DN) of the Timestamping Authority.</para>
          </listitem>
      </itemizedlist>
      <para>The <command>inspect</command> command has the following options:</para>
      <variablelist>
        <varlistentry>
          <term><command>--debug</command> or <command>-d</command></term>
          <listitem>
            <para>Print diagnostic and debugging messages to stderr.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><command>--help</command> or <command>-h</command></term>
          <listitem>
            <para>Display a brief help message.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><command>--key=&lt;keyfile&gt;</command> or <command>-k</command></term>
          <listitem>
            <para>Use the specified private key to decrypt encrypted logstore files.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><command>--verbose</command> or <command>-v</command></term>
          <listitem>
            <para>Print verbose messages to stderr.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><command>--version</command> or <command>-V</command></term>
          <listitem>
            <para>Display version information.</para>
          </listitem>
        </varlistentry>
      </variablelist>
      <para>Example:
        <synopsis>lgstool inspect --key=mykey.pem mylogstore.lgs</synopsis></para>
      <para>A sample output looks like this:</para>
      <synopsis>XFRM_INFO @941
    cipher: aes-128-cbc
    digest: sha1
CHUNK 0@1079: [1 - 1000]:
    encrypt: TRUE
    compress: TRUE
    hmac: TRUE
    chunk_mac: e4d5d813979cf865d5ae4624f7aa98047123cd52
    file_mac: 6600600ca5befb002a73b15be8f0ac04973d5936
TIMESTAMP @36481:
    chunk_id: 0
    Status info:
    Status: Granted.
    Status description: unspecified
    Failure info: unspecified
    TST info:
    Version: 1
    Policy OID: 1.2.3.4
    Hash Algorithm: sha1
    Message data:
        0000 - 66 00 60 0c a5 be fb 00-2a 73 b1 5b e8 f0 ac 04 f.`.....*s.[....
        0010 - 97 3d 59 36                                       .=Y6
    Serial number: 0x029A
    Time stamp: Mar 19 13:48:57 2010 GMT
    Accuracy: 0x01 seconds, 0x01F4 millis, 0x64 micros
    Ordering: no
    Nonce: 0xB613F55AEFFA6DC0
    TSA: unspecified
    Extensions:</synopsis>
    </refsect1>
    <refsect1 xml:id="lgstool_recover">
      <title>The recover command</title>
      <cmdsynopsis>
        <command>recover</command>
        <arg>options</arg>
        <arg>file</arg>
      </cmdsynopsis>
      <warning>
          <para>Do NOT use the <command>lgstool recover</command> command on logstore files that are actively used by &abbrev;. It might lead to data loss. Always stop &abbrev; first.</para>
      </warning>
      <para>Use the <command>recover</command> command can process and correct broken logstore files. It can also process orphaned journal files and move their contents to the respective logstore file. Encrypted, compressed, and timestamped logstore files can be recovered as well &mdash; the private key of the logstore is not needed to recover encrypted logstore files (recovering the encrypted file does not give access to its contents). Note that the <command>recover</command> option is not available in the Windows-version of <command>lgstool</command>.</para>
      <warning>
          <para>The <command>lgstool</command> application cannot fetch timestamps to the chunks (message blocks), so chunks recovered with <command>lgstool</command> are not timestamped (the internal timestamp of the syslog messages is included in the messages).</para>
      </warning>
      <para>The <command>recover</command> command is available in &product; 3.2 and later, and has the following options:</para>
      <variablelist>
        <varlistentry>
          <term><command>--compress-level</command> or <command>-c</command></term>
          <listitem>
            <para>Set the level of compression when processing a journal file into a compressed logstore. Default value: 3</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><command>--debug</command> or <command>-d</command></term>
          <listitem>
            <para>Print diagnostic and debugging messages to stderr.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><command>--help</command> or <command>-h</command></term>
          <listitem>
            <para>Display a brief help message.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><command>--verbose</command> or <command>-v</command></term>
          <listitem>
            <para>Print verbose messages to stderr.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><command>--version</command> or <command>-V</command></term>
          <listitem>
            <para>Display version information.</para>
          </listitem>
        </varlistentry>
      </variablelist>
      <para>Example:
        <synopsis>lgstool recover mylogstore.lgs</synopsis></para>
    </refsect1>
    <refsect1 xml:id="lgstool_tail">
      <title>The tail command</title>
      <cmdsynopsis>
        <command>tail</command>
        <arg>options</arg>
        <arg>file</arg>
      </cmdsynopsis>
      <para>Use the <command>tail -f</command> command to follow the contents of a logstore file like the traditional <command>tail</command> command does on Linux/UNIX systems. The messages are printed to the standard output (stdout). Contents of the journal file related to the logstore file are displayed as well.</para>
      <para>The <command>tail</command> command is available in &product; 3.2 and later, and has the following options. Note that in the Windows-version of <command>lgstool</command> the <command>tail -f</command> option is not available.</para>
      <variablelist>
        <varlistentry>
          <term><command>--debug</command> or <command>-d</command></term>
          <listitem>
            <para>Print diagnostic and debugging messages to stderr.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><command>--help</command> or <command>-h</command></term>
          <listitem>
            <para>Display a brief help message.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><command>--filter=&lt;expression&gt;</command> or <command>-i</command></term>
          <listitem>
            <para>Only print messages matching the specified &abbrev; filter. All possible macros, regular expressions and logical expressions can be specified in a filter.</para>
            <example>
              <title>lgstool tail filter</title>
              <synopsis>lgstool tail  -t 'host: ${HOST} program: ${PROGRAM} msg: ${MSG}\n' --filter='program("prg0000[0]")' /tmp/logstore-serialized.lgs</synopsis>
            </example>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><command>--follow</command> or <command>-f</command></term>
          <listitem>
            <para>Follow mode: display messages as they arrive into the logstore.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><command>--key=&lt;keyfile&gt;</command> or <command>-k</command></term>
          <listitem>
            <para>Use the specified private key to decrypt encrypted logstore files.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><command>--lines=&lt;N&gt;</command> or <command>-n</command></term>
          <listitem>
            <para>Display the last N lines of the logstore file instead of the last 10. Alternatively, use <parameter>+N</parameter> to display lines starting with the Nth.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><command>--sleep_interval=&lt;seconds&gt;</command> or <command>-s</command></term>
          <listitem>
            <para>Number of seconds to wait before displaying new messages in follow mode.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><command>--template=&lt;template&gt;</command> or <command>-t</command></term>
          <listitem>
            <para>Format the messages using the specified template.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><command>--verbose</command> or <command>-v</command></term>
          <listitem>
            <para>Print verbose messages to stderr.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><command>--version</command> or <command>-V</command></term>
          <listitem>
            <para>Display version information.</para>
          </listitem>
        </varlistentry>
      </variablelist>
      <para>Example:
        <synopsis>lgstool tail -f -n=20 --key=mykey.pem mylogstore.lgs</synopsis></para>
    </refsect1>
    <refsect1 xml:id="lgstool_validate">
      <title>The validate command</title>
      <cmdsynopsis>
        <command>validate</command>
        <arg>options</arg>
        <arg>file</arg>
      </cmdsynopsis>
      <para>Use the <command>validate</command> command to validate the signatures and timestamps of a logstore file. The <command>validate</command> command has the following options:</para>
      <variablelist>
        <varlistentry>
          <term><command>--ca-dir=&lt;directory&gt;</command> or <command>-C</command></term>
          <listitem>
            <para>The directory that stores the certificates of the trusted Certificate Authorities. Use this option if the timestamps of your logstore files were signed with certificates belonging to different Certificate Authorities.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><command>--ca-dir-layout=&lt;md5|sha1&gt;</command></term>
          <listitem>
            <para>The type of the hash used for the CA certificates. The default value (<parameter>md5</parameter>) is expected to change to <parameter>sha1</parameter> in subsequent releases of &abbrev;.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><command>--ca-file=&lt;file&gt;</command> or <command>-P</command></term>
          <listitem>
            <para>A file that stores the certificate of the trusted Certificate Authority. Use this option if the timestamps of your logstore files were signed with a single certificate, or if every such certificate belongs to the same Certificate Authority.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><command>--crl-dir=&lt;directory&gt;</command> or <command>-R</command></term>
          <listitem>
            <para>The directory that stores the Certificate Revocation Lists of the trusted Certificate Authorities.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><command>--debug</command> or <command>-d</command></term>
          <listitem>
            <para>Print diagnostic and debugging messages to stderr.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><command>--help</command> or <command>-h</command></term>
          <listitem>
            <para>Display a brief help message.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><command>--key=&lt;keyfile&gt;</command> or <command>-k</command></term>
          <listitem>
            <para>Use the specified private key to decrypt encrypted logstore files.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><command>--require-ts</command> or <command>-T</command></term>
          <listitem>
            <para>Consider the logstore file invalid unless the entire file is protected by a valid timestamp.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><command>--seed</command> or <command>-S</command></term>
          <listitem>
            <para>Use the <filename>~/.rnd</filename> file or the file specified in the <parameter>$RANDFILE</parameter> environmental variable as seed. This is needed only on platforms that do not have a <parameter>/dev/random</parameter> device (for example, Solaris) and the entropy gathering daemon <parameter>egd</parameter> application is not installed on the system.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><command>--ts-name=&lt;name&gt;</command> or <command>-D</command></term>
          <listitem>
            <para>Consider the logstore file invalid unless the timestamps are signed by the specified Timestamping Authority. Specify the Distinguished Name (DN) of the Timestamping Authority.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><command>--verbose</command> or <command>-v</command></term>
          <listitem>
            <para>Print verbose messages to stderr.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><command>--version</command> or <command>-V</command></term>
          <listitem>
            <para>Display version information.</para>
          </listitem>
        </varlistentry>
      </variablelist>
      <para>By default, the <command>lgstool validate</command> command checks only the checksum of the file. Use the <parameter>--require-ts</parameter> option to validate the timestamps as well. THe digital signature of the timestamps is checked only if the <parameter>--ca-dir</parameter> or the <parameter>--ca-file</parameter> parameter is set.</para>
      <para>Example:
        <synopsis>lgstool validate --key=mykey.pem --ca-file=mycacert.pem --ts-name=MYTSA mylogstore.lgs</synopsis></para>
    </refsect1>
    <refsect1 xml:id="lgstool_reindex">
      <title>The reindex command</title>
      <cmdsynopsis>
        <command>reindex</command>
        <arg>options</arg>
        <arg>file</arg>
      </cmdsynopsis>
      <para>The <command>reindex</command> command is an experimental, currently unsupported tool. Do not attempt to use it unless your &abbrev; support team explicitly instructs you to do so.</para>
    </refsect1>
    <refsect1>
      <title>Files</title>
      <para>
        <filename>/opt/syslog-ng/bin/lgstool</filename>
      </para>
    </refsect1>
    <refsect1>
      <title>See also</title>
      <para>
        <link linkend="syslog-ng.conf.5">
          <command>syslog-ng.conf</command>(5)</link>
      </para>
      <para>
        <link linkend="syslog-ng.8">
          <command>syslog-ng</command>(8)</link>
      </para>
      <xi:include href="manpage-see-also.xml" xmlns:xi="http://www.w3.org/2001/XInclude"/>
    </refsect1>
    <xi:include href="manpage-author.xml" xmlns:xi="http://www.w3.org/2001/XInclude"/>
    <xi:include href="manpage-copyright.xml" xmlns:xi="http://www.w3.org/2001/XInclude"/>
    </refentry>
</reference>
