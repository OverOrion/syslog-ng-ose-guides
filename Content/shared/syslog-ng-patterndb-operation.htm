<?xml version="1.0" encoding="UTF-8"?>

<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd"><body name="syslog-ng-patterndb-operation" oldrole="section">
<h1 name="syslog-ng-patterndb-operation" version="5.0" xmlns="http://docbook.org/ns/docbook">How pattern matching works</h1>
<MadCap:keyword term="pattern matching:['procedure of']"></MadCap:keyword>
<p class="CaptionFigure">Applying patterns</p>
<img class="Image" fileref="&lt;entity&gt;imgroot&lt;/entity&gt;/patterndb-pattern.png" format="PNG" MadCap:mediastyle="@media print { width: auto; height: auto; }" oldrole="figure" scale="50" src="patterndb-pattern.png" style="height: auto; width: auto;"/>
<p oldrole="para">The followings describe how patterns work. This information applies to program patterns and message patterns alike, even though message patterns are used to illustrate the procedure.</p>
<p oldrole="para">Patterns can consist of literals (keywords, or rather, keycharacters) and pattern parsers. Pattern parsers attempt to parse a sequence of characters according to certain rules.</p>
<table cellspacing="0" class="TableStyle-NoteTable_Blue_DoNotEdit" oldrole="note" style="width: 100%;mc-table-style: url('../Resources/TableStyles/NoteTable_Blue_DoNotEdit.css');"><col class="TableStyle-NoteTable_Blue_DoNotEdit-Column-Column1" style="width: 0.3in;"></col><col class="TableStyle-NoteTable_Blue_DoNotEdit-Column-Column2"></col><tbody><tr class="TableStyle-NoteTable_Blue_DoNotEdit-Body-Body1"><td class="TableStyle-NoteTable_Blue_DoNotEdit-BodyB-Column1-Body1"><p><img src="../Resources/Images/Common/note.png"/></p></td><td class="TableStyle-NoteTable_Blue_DoNotEdit-BodyA-Column2-Body1"><span class="AllNoteStyles">NOTE: </span><p oldrole="para">Wildcards and regular expressions cannot be used in patterns. The <span class="Code" oldrole="userinput">@</span> character must be escaped, that is, to match for this character, you have to write <span class="Code" oldrole="userinput">@@</span> in your pattern. This is required because pattern parsers of syslog-ng are enclosed between <span class="Code" oldrole="userinput">@</span> characters.</p></td></tr></tbody></table>
<MadCap:keyword term="classifying messages:['pattern matching concepts']"></MadCap:keyword>
<MadCap:keyword term="pattern database:['pattern matching precedence']"></MadCap:keyword>
<p oldrole="para">When a new message arrives, syslog-ng attempts to classify it using the pattern database. The available patterns are organized alphabetically into a tree, and syslog-ng inspects the message character-by-character, starting from the beginning. This approach ensures that only a small subset of the rules must be evaluated at any given step, resulting in high processing speed. Note that the speed of classifying messages is practically independent from the total number of rules.</p>
<p oldrole="para">For example, if the message begins with the <span class="Code" oldrole="userinput">Apple</span> string, only patterns beginning with the character <span class="Code" oldrole="userinput">A</span> are considered. In the next step, syslog-ng selects the patterns that start with <span class="Code" oldrole="userinput">Ap</span>, and so on, until there is no more specific pattern left. The syslog-ng application has a strong preference for rules that match the input string completely.</p>
<p oldrole="para">Note that literal matches take precedence over pattern parser matches: if at a step there is a pattern that matches the next character with a literal, andÂ another pattern that would match it with a parser, the pattern with the literal match is selected. Using the previous example, if at the third step there is the literal pattern <span class="Code" oldrole="userinput">Apport</span> and a pattern parser <span class="Code" oldrole="userinput">Ap@STRING@</span>, the <span class="Code" oldrole="userinput">Apport</span> pattern is matched. If the literal does not match the incoming string (for example, <span class="Code" oldrole="userinput">Apple</span>), syslog-ng attempts to match the pattern with the parser. However, if there are two or more parsers on the same level, only the first one will be applied, even if it does not perfectly match the message.</p>
<p oldrole="para">If there are two parsers at the same level (for example, <span class="Code" oldrole="userinput">Ap@STRING@</span> and <span class="Code" oldrole="userinput">Ap@QSTRING@</span>), it is random which pattern is applied (technically, the one that is loaded first). However, if the selected parser cannot parse at least one character of the message, the other parser is used. But having two different parsers at the same level is extremely rare, so the impact of this limitation is much less than it appears.</p>
</body></html>
