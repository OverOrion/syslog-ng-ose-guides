<?xml version="1.0" encoding="UTF-8"?>

<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd"><body name="chapter-manipulating-messages" oldrole="chapter">
<h1 name="chapter-manipulating-messages" version="5.0" xmlns="http://docbook.org/ns/docbook">Manipulating messages</h1>
<p oldrole="para">This chapter explains the methods that you can use to customize, reformat, and modify log messages using <MadCap:variable name="General.product"></MadCap:variable>.</p>
<ul oldrole="itemizedlist">
<li oldrole="listitem">
<p oldrole="para"><MadCap:xref href="chapter-manipulating-messages.htm#customizing-message-format"></MadCap:xref> explains how to use templates and macros to change the format of log messages, or the names of logfiles and database tables.</p>
</li>
<li oldrole="listitem">
<p oldrole="para"><MadCap:xref href="chapter-manipulating-messages.htm#modifying-messages"></MadCap:xref> describes how to use rewrite rules to search and replace certain parts of the message content.</p>
</li>
<li oldrole="listitem">
<p oldrole="para"><MadCap:xref href="chapter-manipulating-messages.htm#regular-expressions"></MadCap:xref> lists the different types of regular expressions that can be used in various <MadCap:variable name="General.abbrev"></MadCap:variable> objects like filters and rewrite rules.</p>
</li>
</ul>
<h2 name="customizing-message-format">Customizing message format using macros and templates</h2>
<p oldrole="para">The following sections describe how to customize the names of logfiles, and also how to use templates, macros, and template functions.</p>
<ul oldrole="itemizedlist">
<li oldrole="listitem">
<p oldrole="para"><MadCap:xref href="chapter-manipulating-messages.htm#concepts-macro"></MadCap:xref> explains how macros work.</p>
</li>
<li oldrole="listitem">
<p oldrole="para"><MadCap:xref href="chapter-manipulating-messages.htm#modifying-messages"></MadCap:xref> describes how to use macros and templates to format log messages or change the names of logfiles and database tables.</p>
</li>
<li oldrole="listitem">
<p oldrole="para"><MadCap:xref href="reference-macros.htm#reference-macros"></MadCap:xref> lists the different types of macros available in <MadCap:variable name="General.abbrev"></MadCap:variable>.</p>
</li>
<li oldrole="listitem">
<p oldrole="para"><MadCap:xref href="chapter-manipulating-messages.htm#template-functions"></MadCap:xref> explains what template functions are and how to use them.</p>
</li>
<li oldrole="listitem">
<p oldrole="para"><MadCap:xref href="reference-template-functions.htm#reference-template-functions"></MadCap:xref> lists the template functions available in <MadCap:variable name="General.abbrev"></MadCap:variable>.</p>
</li>
</ul>
<h2 name="concepts-macro">Formatting messages, filenames, directories, and tablenames</h2>
<MadCap:keyword term="formatting messages"></MadCap:keyword>
<MadCap:keyword term="templates"></MadCap:keyword>
<MadCap:keyword term="message templates"></MadCap:keyword>
<MadCap:keyword term="macros"></MadCap:keyword>
<p oldrole="para">The <MadCap:variable name="General.abbrev"></MadCap:variable> application can dynamically create filenames, directories, or names of database tables using macros that help you organize your log messages. Macros refer to a property or a part of the log message, for example, the <span class="Code" oldrole="parameter">${HOST}</span> macro refers to the name or IP address of the client that sent the log message, while <span class="Code" oldrole="parameter">${DAY}</span> is the day of the month when syslog-ng has received the message. Using these macros in the path of the destination log files allows you for example to collect the logs of every host into separate files for every day.</p>
<p oldrole="para">A set of macros can be defined as a template object and used in multiple destinations.</p>
<p oldrole="para">Another use of macros and templates is to customize the format of the syslog message, for example, to add elements of the message header to the message text.</p>
<MadCap:snippetBlock src="../../shared/wnt/note-formatting-messages.htm"></MadCap:snippetBlock>
<ul oldrole="itemizedlist">
<li oldrole="listitem">
<p oldrole="para">For details on using templates and macros, see <MadCap:xref href="chapter-manipulating-messages.htm#configuring-macros"></MadCap:xref>.</p>
</li>
<li oldrole="listitem">
<p oldrole="para">For a list and description of the macros available in <MadCap:variable name="General.abbrev"></MadCap:variable>, see <MadCap:xref href="reference-macros.htm#reference-macros"></MadCap:xref>.</p>
</li>
<li oldrole="listitem">
<p oldrole="para">For details on using custom macros created with CSV parsers and pattern databases, see <MadCap:xref href="chapter-parsers.htm#chapter-parsers"></MadCap:xref> and <MadCap:xref href="chapter-patterndb.htm#patterndb-filters"></MadCap:xref>, respectively.</p>
</li>
</ul>
<h2 name="configuring-macros">Templates and macros</h2>
<!-- FIXME the template+macro, parser and rewrite sections should be moved into a common section -->
<MadCap:keyword term="templates"></MadCap:keyword>
<p oldrole="para">The <MadCap:variable name="General.abbrev"></MadCap:variable> application allows you to define message templates, and reference them from every object that can use a template. Templates can include strings, macros (for example date, the hostname, and so on), and template functions. For example, you can use templates to create standard message formats or filenames. For a list of macros available in <MadCap:variable name="General.product"></MadCap:variable>, see <MadCap:xref href="reference-macros.htm#reference-macros"></MadCap:xref>.<MadCap:conditionaltext MadCap:conditions="pe6"> For the macros of the syslog-ng Agent for Windows application, see <a href="https://support.oneidentity.com/technical-documents/one-identity-psm/syslog-ng-windows-agent-guide-admin/chapter-format" oldrole="olink"></a>.</MadCap:conditionaltext> Fields from the structured data (SD) part of messages using the new IETF-syslog standard can also be used as macros.</p>
<h6 oldrole="formalpara">Declaration:</h6>

<MadCap:keyword term="templates:['defining']"></MadCap:keyword>
<pre class="Code" oldrole="synopsis">template &lt;template-name&gt; {
    template("&lt;template-expression&gt;") &lt;template-escape(yes)&gt;;
};</pre>
<p oldrole="para">Template objects have a single option called <span class="Code" oldrole="parameter">template-escape()</span>, which is disabled by default (<span class="Code" oldrole="userinput">template-escape(no)</span>). This behavior is useful when the messages are passed to an application that cannot handle escaped characters properly. Enabling template escaping (<span class="Code" oldrole="userinput">template-escape(yes)</span>) causes syslog-ng to escape the <span class="Code" oldrole="userinput">'</span>, <span class="Code" oldrole="userinput">"</span>, and backslash characters from the messages.</p>
<p oldrole="para">If you do not want to enable the <span class="Code" oldrole="parameter">template-escape()</span> option (which is rarely needed), you can define the template without the enclosing braces.</p>
<pre class="Code" oldrole="synopsis">template &lt;template-name&gt; "&lt;template-expression&gt;";</pre>
<p oldrole="para">You can also refer to an existing template from within a template. The result of the referred template will be pasted into the second template.</p>
<pre class="Code" oldrole="synopsis">template first-template "sample-text";
template second-template "The result of the first-template is: $(template first-template)";</pre>
<p oldrole="para">If you want to use a template only once, you can define the template inline, for example:</p>
<pre class="Code" oldrole="synopsis">destination d_file {
    file ("/var/log/messages" template("${ISODATE} ${HOST} ${MSG}\n") );
};</pre>
<p oldrole="para">Macros can be included by prefixing the macro name with a <span class="Code" oldrole="userinput">$</span> sign, just like in Bourne compatible shells. Although using braces around macro names is not mandatory, and the <span class="Code" oldrole="userinput">"$MSG"</span> and <span class="Code" oldrole="userinput">"${MSG}"</span> formats are equivalent, using the <span class="Code" oldrole="userinput">"${MSG}"</span> format is recommended for clarity.</p>
<MadCap:keyword term="templates:['literal $']"></MadCap:keyword>
<MadCap:keyword term="templates:['escaping']"></MadCap:keyword>
<p oldrole="para">To use a literal <span class="Code" oldrole="userinput">$</span> character in a template, you have to escape it. In <MadCap:variable name="General.abbrev"></MadCap:variable> versions <MadCap:conditionaltext MadCap:conditions="pe">4.0-4.2</MadCap:conditionaltext><MadCap:conditionaltext MadCap:conditions="ose">3.4 and earlier</MadCap:conditionaltext>, use a backslash (<span class="Code" oldrole="userinput">\$</span>). In version <MadCap:conditionaltext MadCap:conditions="pe">5.0</MadCap:conditionaltext><MadCap:conditionaltext MadCap:conditions="ose">3.5</MadCap:conditionaltext> and later, use <span class="Code" oldrole="userinput">$$</span>.</p>
<MadCap:snippetBlock src="../../shared/wnt/note-escape-at.htm"></MadCap:snippetBlock>
<MadCap:keyword term="macros:['default value']"></MadCap:keyword>
<p oldrole="para">Default values for macros can also be specified by appending the <span class="Code" oldrole="userinput">:-</span> characters and the default value of the macro. If a message does not contain the field referred to by the macro, or it is empty, the default value will be used when expanding the macro. For example, if a message does not contain a hostname, the following macro can specify a default hostname.</p>
<pre class="Code" oldrole="synopsis">${HOST:-default_hostname}</pre>
<p oldrole="para">By default, syslog-ng sends messages using the following template: <span class="Code" oldrole="userinput">${ISODATE} ${HOST} ${MSGHDR}${MSG}\n</span>. (The <span class="Code" oldrole="userinput">${MSGHDR}${MSG}</span> part is written together because the <span class="Code" oldrole="parameter">${MSGHDR}</span> macro includes a trailing whitespace.)</p>

<h6 oldrole="example">Example: Using templates and macros</h6>
<MadCap:keyword term="templates:['example']"></MadCap:keyword>
<p oldrole="para">The following template (<span class="Code" oldrole="userinput">t_demo_filetemplate</span>) adds the date of the message and the name of the host sending the message to the beginning of the message text. The template is then used in a file destination: messages sent to this destination (<span class="Code" oldrole="userinput">d_file</span>) will use the message format defined in the template.</p>
<pre class="Code" oldrole="synopsis">template t_demo_filetemplate {
    template("${ISODATE} ${HOST} ${MSG}\n"); };
destination d_file {
    file("/var/log/messages" template(t_demo_filetemplate)); };</pre>
<p oldrole="para">If you do not want to enable the <span class="Code" oldrole="parameter">template-escape()</span> option (which is rarely needed), you can define the template without the enclosing braces. The following two templates are equivalent.</p>
<pre class="Code" oldrole="synopsis">template t_demo_template-with-braces {
    template("${ISODATE} ${HOST} ${MSG}\n");
};
template t_demo_template-without-braces "${ISODATE} ${HOST} ${MSG}\n";
</pre>
<p oldrole="para">Templates can also be used inline, if they are used only at a single location. The following destination is equivalent with the previous example:</p>
<pre class="Code" oldrole="synopsis">destination d_file {
    file ("/var/log/messages" template("${ISODATE} ${HOST} ${MSG}\n") );
};</pre>
<MadCap:keyword term="macros:['in filenames']"></MadCap:keyword>
<p oldrole="para">The following file destination uses macros to daily create separate logfiles for every client host.</p>
<pre class="Code" oldrole="synopsis">destination d_file {
        file("/var/log/${YEAR}.${MONTH}.${DAY}/${HOST}.log");
};</pre>

<table cellspacing="0" class="TableStyle-NoteTable_Blue_DoNotEdit" oldrole="note" style="width: 100%;mc-table-style: url('../../Resources/TableStyles/NoteTable_Blue_DoNotEdit.css');"><col class="TableStyle-NoteTable_Blue_DoNotEdit-Column-Column1" style="width: 0.3in;"></col><col class="TableStyle-NoteTable_Blue_DoNotEdit-Column-Column2"></col><tbody><tr class="TableStyle-NoteTable_Blue_DoNotEdit-Body-Body1"><td class="TableStyle-NoteTable_Blue_DoNotEdit-BodyB-Column1-Body1"><p><img src="../../Resources/Images/Common/note.png"/></p></td><td class="TableStyle-NoteTable_Blue_DoNotEdit-BodyA-Column2-Body1"><span class="AllNoteStyles">NOTE: </span><p oldrole="para">Macros can be used to format messages, and also in the name of destination files or database tables. However, they cannot be used in sources as wildcards, for example, to read messages from files or directories that include a date in their name.</p></td></tr></tbody></table>
<h2 name="date-macros">Date-related macros</h2>
<MadCap:keyword term="macros:['date-related']"></MadCap:keyword>
<p oldrole="para">The macros related to the date of the message (for example: <span class="Code" oldrole="parameter">${ISODATE}</span>, <span class="Code" oldrole="parameter">${HOUR}</span>, and so on) have three further variants each:</p>
<ul oldrole="itemizedlist">
<li oldrole="listitem">
<p oldrole="para"><span class="Code" oldrole="userinput">S_</span> prefix, for example, <span class="Code" oldrole="parameter">${S_DATE}</span>: The <span class="Code" oldrole="parameter">${S_DATE}</span> macro represents the date found in the log message, that is, when the message was sent by the original application.</p>
<MadCap:snippetBlock src="../../shared/wnt/warning-keep-timestamp-s-macros.htm"></MadCap:snippetBlock>
</li>
<li oldrole="listitem">
<p oldrole="para"><span class="Code" oldrole="userinput">R_</span> prefix, for example, <span class="Code" oldrole="parameter">${R_DATE}</span>: <span class="Code" oldrole="parameter">${R_DATE}</span> is the date when <MadCap:variable name="General.abbrev"></MadCap:variable> has received the message.</p>
</li>
<li oldrole="listitem">
<p oldrole="para"><span class="Code" oldrole="userinput">C_</span> prefix, for example, <span class="Code" oldrole="parameter">${C_DATE}</span>: <span class="Code" oldrole="parameter">${C_DATE}</span> is the current date, that is when <MadCap:variable name="General.abbrev"></MadCap:variable> processes the message and resolves the macro.</p>
</li>
</ul>
<p oldrole="para">The <span class="Code" oldrole="parameter">${DATE}</span> macro equals the <span class="Code" oldrole="parameter">${S_DATE}</span> macro.</p>
<p oldrole="para">The values of the date-related macros are calculated using the original timezone information of the message. To convert it to a different timezone, use the <span class="Code" oldrole="parameter">time-zone()</span> option. You can set the <span class="Code" oldrole="parameter">time-zone()</span> option as a global option, or per destination. For sources, it applies only if the original message does not contain timezone information. Converting the timezone changes the values of the following date-related macros (macros <span class="Code" oldrole="parameter">MSEC</span> and <span class="Code" oldrole="parameter">USEC</span> are not changed):</p>
<ul oldrole="itemizedlist">
<li oldrole="listitem">
<p oldrole="para"><span class="Code" oldrole="parameter">AMPM</span></p>
</li>
<li oldrole="listitem">
<p oldrole="para"><span class="Code" oldrole="parameter">DATE</span></p>
</li>
<li oldrole="listitem">
<p oldrole="para"><span class="Code" oldrole="parameter">DAY</span></p>
</li>
<li oldrole="listitem">
<p oldrole="para"><span class="Code" oldrole="parameter">FULLDATE</span></p>
</li>
<li oldrole="listitem">
<p oldrole="para"><span class="Code" oldrole="parameter">HOUR</span></p>
</li>
<li oldrole="listitem">
<p oldrole="para"><span class="Code" oldrole="parameter">HOUR12</span></p>
</li>
<li oldrole="listitem">
<p oldrole="para"><span class="Code" oldrole="parameter">ISODATE</span></p>
</li>
<li oldrole="listitem">
<p oldrole="para"><span class="Code" oldrole="parameter">MIN</span></p>
</li>
<li oldrole="listitem">
<p oldrole="para"><span class="Code" oldrole="parameter">MONTH</span></p>
</li>
<li oldrole="listitem">
<p oldrole="para"><span class="Code" oldrole="parameter">MONTH_ABBREV</span></p>
</li>
<li oldrole="listitem">
<p oldrole="para"><span class="Code" oldrole="parameter">MONTH_NAME</span></p>
</li>
<li oldrole="listitem">
<p oldrole="para"><span class="Code" oldrole="parameter">MONTH_WEEK</span></p>
</li>
<li oldrole="listitem">
<p oldrole="para"><span class="Code" oldrole="parameter">SEC</span></p>
</li>
<li oldrole="listitem">
<p oldrole="para"><span class="Code" oldrole="parameter">STAMP</span></p>
</li>
<li oldrole="listitem">
<p oldrole="para"><span class="Code" oldrole="parameter">TZ</span></p>
</li>
<li oldrole="listitem">
<p oldrole="para"><span class="Code" oldrole="parameter">TZOFFSET</span></p>
</li>
<li oldrole="listitem">
<p oldrole="para"><span class="Code" oldrole="parameter">UNIXTIME</span></p>
</li>
<li oldrole="listitem">
<p oldrole="para"><span class="Code" oldrole="parameter">WEEK</span></p>
</li>
<li oldrole="listitem">
<p oldrole="para"><span class="Code" oldrole="parameter">WEEK_DAY</span></p>
</li>
<li oldrole="listitem">
<p oldrole="para"><span class="Code" oldrole="parameter">WEEK_DAY_ABBREV</span></p>
</li>
<li oldrole="listitem">
<p oldrole="para"><span class="Code" oldrole="parameter">WEEK_DAY_NAME</span></p>
</li>
<li oldrole="listitem">
<p oldrole="para"><span class="Code" oldrole="parameter">YEAR</span></p>
</li>
<li oldrole="listitem">
<p oldrole="para"><span class="Code" oldrole="parameter">YEAR_DAY</span></p>
</li>
</ul>
<h2 name="macros-hard-vs-soft">Hard vs. soft macros</h2>
<MadCap:keyword term="macros:['hard and soft macros']"></MadCap:keyword>
<MadCap:keyword term="hard macros"></MadCap:keyword>
<MadCap:keyword term="soft macros"></MadCap:keyword>
<p oldrole="para">Hard macros contain data that is directly derived from the log message, for example, the ${MONTH} macro derives its value from the timestamp. Hard macros are read-only. Soft macros (sometimes also called name-value pairs) are either built-in macros automatically generated from the log message (for example, ${HOST}), or custom user-created macros generated by using the syslog-ng pattern database or a CSV-parser. In contrast to hard macros, soft macros are writable and can be modified within <MadCap:variable name="General.abbrev"></MadCap:variable>, for example, using rewrite rules.</p>
<p oldrole="para">Hard and soft macros are rather similar and often treated as equivalent. Macros are most commonly used in filters and templates, which does not modify the value of the macro, so both soft and hard macros can be used. However, it is not possible to change the values of hard macros in rewrite rules or via any other means.</p>
<p oldrole="para">The following macros in <MadCap:variable name="General.abbrev"></MadCap:variable> are hard macros and cannot be modified: <span class="Code" oldrole="parameter">BSDTAG</span>, <span class="Code" oldrole="parameter">CONTEXT_ID</span>, <span class="Code" oldrole="parameter">DATE</span>, <span class="Code" oldrole="parameter">DAY</span>, <span class="Code" oldrole="parameter">FACILITY_NUM</span>, <span class="Code" oldrole="parameter">FACILITY</span>, <span class="Code" oldrole="parameter">FULLDATE</span>, <span class="Code" oldrole="parameter">HOUR</span>, <span class="Code" oldrole="parameter">ISODATE</span>, <span class="Code" oldrole="parameter">LEVEL_NUM</span>, <span class="Code" oldrole="parameter">LEVEL</span>, <span class="Code" oldrole="parameter">MIN</span>, <span class="Code" oldrole="parameter">MONTH_ABBREV</span>, <span class="Code" oldrole="parameter">MONTH_NAME</span>, <span class="Code" oldrole="parameter">MONTH</span>, <span class="Code" oldrole="parameter">MONTH_WEEK</span>, <span class="Code" oldrole="parameter"></span>, <span class="Code" oldrole="parameter">PRIORITY</span>, <span class="Code" oldrole="parameter">PRI</span>, <span class="Code" oldrole="parameter">RCPTID</span>, <span class="Code" oldrole="parameter">SDATA</span>, <span class="Code" oldrole="parameter">SEC</span>, <span class="Code" oldrole="parameter">SEQNUM</span>, <span class="Code" oldrole="parameter">SOURCEIP</span>, <span class="Code" oldrole="parameter">STAMP</span>, <span class="Code" oldrole="parameter">TAG</span>, <span class="Code" oldrole="parameter">TAGS</span>, <span class="Code" oldrole="parameter">TZOFFSET</span>, <span class="Code" oldrole="parameter">TZ</span>, <span class="Code" oldrole="parameter">UNIXTIME</span>, <span class="Code" oldrole="parameter">WEEK_DAY_ABBREV</span>, <span class="Code" oldrole="parameter">WEEK_DAY_NAME</span>, <span class="Code" oldrole="parameter">WEEK_DAY</span>, <span class="Code" oldrole="parameter">WEEK</span>, <span class="Code" oldrole="parameter">YEAR_DAY</span>, <span class="Code" oldrole="parameter">YEAR</span>.</p>
<p oldrole="para">The following macros can be modified:<span class="Code" oldrole="parameter">FULLHOST_FROM</span>, <span class="Code" oldrole="parameter">FULLHOST</span>, <span class="Code" oldrole="parameter">HOST_FROM</span>, <span class="Code" oldrole="parameter">HOST</span>, <span class="Code" oldrole="parameter">LEGACY_MSGHDR</span>, <span class="Code" oldrole="parameter">MESSAGE</span>, <span class="Code" oldrole="parameter">MSG</span>,<span class="Code" oldrole="parameter">MSGID</span>, <span class="Code" oldrole="parameter">MSGONLY</span>, <span class="Code" oldrole="parameter">PID</span>, <span class="Code" oldrole="parameter">PROGRAM</span>, <span class="Code" oldrole="parameter">SOURCE</span>. Custom values created using rewrite rules or parsers can be modified as well, just like stored matches of regular expressions ($0 ... $255).</p>
<MadCap:snippetBlock src="reference-macros.htm"></MadCap:snippetBlock>
<h2 name="template-functions">Using template functions</h2>
<MadCap:keyword term="template functions"></MadCap:keyword>
<MadCap:keyword term="templates:['template functions']"></MadCap:keyword>
<p oldrole="para">A template function is a transformation: it modifies the way macros or name-value pairs are expanded. Template functions can be used in template definitions, or when macros are used in the configuration of <MadCap:variable name="General.abbrev"></MadCap:variable>. Template functions use the following syntax:</p>
<pre class="Code" oldrole="synopsis">$(function-name parameter1 parameter2 parameter3 ...)</pre>
<p oldrole="para">For example, the <span class="Code" oldrole="parameter">$(echo)</span> template function simply returns the value of the macro it receives as a parameter, thus <span class="Code" oldrole="userinput">$(echo ${HOST})</span> is equivalent to <span class="Code" oldrole="parameter">${HOST}</span>.</p>
<p oldrole="para">The parameters of template functions are separated by a whitespace character. If you want to use a longer string or multiple macros as a single parameter, enclose the parameter in double-quotes or apostrophes. For example:</p>
<pre class="Code" oldrole="synopsis">$(echo "${HOST} ${PROGRAM} ${PID}")</pre>
<p oldrole="para">Template functions can be nested into each other, so the parameter of a template function can be another template function, like:</p>
<pre class="Code" oldrole="synopsis">$(echo $(echo ${HOST}))</pre>
<p oldrole="para">For details on the available template functions, see the descriptions of the individual template functions in <MadCap:xref href="reference-template-functions.htm#reference-template-functions"></MadCap:xref>.</p>
<p oldrole="para">You can define your own template function as a regular configuration object (for example, to reuse the same function in different places in your configuration).</p>
<h6 oldrole="formalpara">Declaration:</h6>

<pre class="Code" oldrole="synopsis">template-function &lt;name-of-the-template-function&gt; "&lt;template-expression-using-strings-macros-template-functions&gt;";</pre>

<h6 oldrole="example">Example: Using custom template functions</h6>
<p oldrole="para">The following template function can be used to reformat the message. It adds the length of the message to the message template.</p>
<pre class="Code" oldrole="synopsis">
template-function my-template-function "${ISODATE} ${HOST} message-length=$(length "${MSG}") ${MSG}";
destination d_file {
	file("/tmp/mylogs.log" template("$(my-template-function)\n")); };</pre>
<p oldrole="para">You can also refer to existing templates in your template function.</p>
<pre class="Code" oldrole="synopsis">
template my-custom-header-template "${ISODATE} ${HOST_FROM} ${MSGHDR}";
template-function my-template-function "$(my-custom-header-template) message-length=$(length "${MSG}") ${MSG}";</pre>

<MadCap:snippetBlock src="reference-template-functions.htm"></MadCap:snippetBlock>
<h2 name="on-the-wire-format">Modifying the on-the-wire message format</h2>
<p oldrole="para">Macros, templates, and template functions allow you to fully customize the format of the message. This flexibility makes it possible to use <MadCap:variable name="General.abbrev"></MadCap:variable> in some unexpected way if needed, for example, to emulate simple, plain-text protocols. The following example shows you how to send LPUSH commands to a Redis server.</p>
<table cellspacing="0" class="TableStyle-NoteTable_Blue_DoNotEdit" oldrole="note" style="width: 100%;mc-table-style: url('../../Resources/TableStyles/NoteTable_Blue_DoNotEdit.css');"><col class="TableStyle-NoteTable_Blue_DoNotEdit-Column-Column1" style="width: 0.3in;"></col><col class="TableStyle-NoteTable_Blue_DoNotEdit-Column-Column2"></col><tbody><tr class="TableStyle-NoteTable_Blue_DoNotEdit-Body-Body1"><td class="TableStyle-NoteTable_Blue_DoNotEdit-BodyB-Column1-Body1"><p><img src="../../Resources/Images/Common/note.png"/></p></td><td class="TableStyle-NoteTable_Blue_DoNotEdit-BodyA-Column2-Body1"><span class="AllNoteStyles">NOTE: </span><p oldrole="para">The purpose of this example is to demonstrate the flexibility of <MadCap:variable name="General.abbrev"></MadCap:variable>. A dedicated Redis destination is available in <MadCap:variable name="General.abbrev"></MadCap:variable> version 3.5. For details, see <MadCap:xref href="destination-redis.htm#configuring-destinations-redis"></MadCap:xref>.</p></td></tr></tbody></table>
<p oldrole="para">The following template is a valid LPUSH command in accordance with the <a href="https://redis.io/topics/protocol/">Redis protocol</a>, and puts the $MESSAGE into a separate list for every $PROGRAM:</p>
<pre class="Code" oldrole="synopsis">template t_redis_lpush {
    template("*3\r\n$$5\r\nLPUSH\r\n$$$(length ${PROGRAM})\r\n${PROGRAM}\r\n$$$(length ${MESSAGE})\r\n${MESSAGE}\r\n");
};</pre>
<p oldrole="para">If you use this template in a <span class="Code" oldrole="userinput">network()</span> destination, <MadCap:variable name="General.abbrev"></MadCap:variable> formats the message according to the template, and sends it to the Redis server.</p>
<pre class="Code" oldrole="synopsis">destination d_redis_tcp {
    network("127.0.0.1" port(6379) template(t_redis_lpush));
};</pre>
<h2 name="modifying-messages">Modifying messages using rewrite rules</h2>
<MadCap:keyword term="rewriting messages:['concepts of']"></MadCap:keyword>
<MadCap:keyword term="rewrite rules"></MadCap:keyword>
<MadCap:keyword term="rewriting messages"></MadCap:keyword>
<MadCap:keyword term="sedding messages"></MadCap:keyword>
<MadCap:keyword term="replacing message text"></MadCap:keyword>
<p oldrole="para">The syslog-ng application can rewrite parts of the messages using rewrite rules. Rewrite rules are global objects similar to parsers and filters and can be used in log paths. The syslog-ng application has two methods to rewrite parts of the log messages: substituting (setting) a part of the message to a fix value, and a general search-and-replace mode.</p>
<p oldrole="para">Substitution completely replaces a specific part of the message that is referenced using a built-in or user-defined macro.</p>
<p oldrole="para">General rewriting searches for a string in the entire message (or only a part of the message specified by a macro) and replaces it with another string. Optionally, this replacement string can be a template that contains macros.</p>
<p oldrole="para">Rewriting messages is often used in conjunction with message parsing <MadCap:xref href="chapter-parsers.htm#chapter-parsers"></MadCap:xref>.</p>
<p oldrole="para">Rewrite rules are similar to filters: they must be defined in the syslog-ng configuration file and used in the log statement. You can also define the rewrite rule inline in the log path.</p>
<!-- FIXME options should be restructured to simplesects -->
<MadCap:snippetBlock src="../../shared/wnt/note-element-order.htm"></MadCap:snippetBlock>
<h2 name="rewrite-replace">Replacing message parts</h2>
<MadCap:keyword term="rewrite()"></MadCap:keyword>
<MadCap:keyword term="subst()"></MadCap:keyword>
<p oldrole="para">To replace a part of the log message, you have to:</p>
<ul oldrole="itemizedlist">
<li oldrole="listitem">
<p oldrole="para">define a string or regular expression to find the text to replace</p>
</li>
<li oldrole="listitem">
<p oldrole="para">define a string to replace the original text (macros can be used as well)</p>
</li>
<li oldrole="listitem">
<p oldrole="para">select the field of the message that the rewrite rule should process</p>
</li>
</ul>
<p oldrole="para">Substitution rules can operate on any soft macros, for example MESSAGE, PROGRAM, or any user-defined macros created using parsers. Hard macros cannot be modified. For details on the hard and soft macros, see <MadCap:xref href="chapter-manipulating-messages.htm#macros-hard-vs-soft"></MadCap:xref>). You can also rewrite the structured-data fields of messages complying to the RFC5424 (IETF-syslog) message format. Substitution rules use the following syntax:</p>
<h6 oldrole="formalpara">Declaration:</h6>

<pre class="Code" oldrole="synopsis">rewrite &lt;name_of_the_rule&gt; {
    subst("&lt;string or regular expression to find&gt;",
        "&lt;replacement string&gt;", value(&lt;field name&gt;), flags() );
};</pre>
<p oldrole="para">The <span class="Code" oldrole="parameter">type()</span> and <span class="Code" oldrole="parameter">flags()</span> options are optional. The <span class="Code" oldrole="parameter">type()</span> specifies the type of regular expression to use, while the <span class="Code" oldrole="parameter">flags()</span> are the flags of the regular expressions. For details on regular expressions, see <MadCap:xref href="chapter-manipulating-messages.htm#regular-expressions"></MadCap:xref>.</p>
<p oldrole="para">A single substitution rule can include multiple substitutions that are applied sequentially to the message. Note that rewriting rules must be included in the log statement to have any effect.</p>
<table cellspacing="0" class="TableStyle-NoteTable_Blue_DoNotEdit" oldrole="tip" style="width: 100%;mc-table-style: url('../../Resources/TableStyles/NoteTable_Blue_DoNotEdit.css');"><col class="TableStyle-NoteTable_Blue_DoNotEdit-Column-Column1" style="width: 0.3in;"></col><col class="TableStyle-NoteTable_Blue_DoNotEdit-Column-Column2"></col><tbody><tr class="TableStyle-NoteTable_Blue_DoNotEdit-Body-Body1"><td class="TableStyle-NoteTable_Blue_DoNotEdit-BodyB-Column1-Body1"><p><img src="../../Resources/Images/Common/note.png"/></p></td><td class="TableStyle-NoteTable_Blue_DoNotEdit-BodyA-Column2-Body1"><span class="AllNoteStyles">TIP: </span><p oldrole="para">For case-insensitive searches, add the <span class="Code" oldrole="userinput">flags(ignore-case)</span> option. To replace every occurrence of the string, add <span class="Code" oldrole="userinput">flags(global)</span> option. Note that the <span class="Code" oldrole="parameter">store-matches</span> flag is automatically enabled in rewrite rules.</p></td></tr></tbody></table>

<h6 name="example-rewrite-subst" oldrole="example">Example: Using substitution rules</h6>
<p oldrole="para">The following example replaces the <span class="Code" oldrole="userinput">IP</span> in the text of the message with the string <span class="Code" oldrole="userinput">IP-Address</span>.</p>
<pre class="Code" oldrole="synopsis">rewrite r_rewrite_subst{subst("IP", "IP-Address", value("MESSAGE"));};</pre>
<p oldrole="para">To replace every occurrence, use:</p>
<pre class="Code" oldrole="synopsis">rewrite r_rewrite_subst{
    subst("IP", "IP-Address", value("MESSAGE"), flags("global"));
};</pre>
<p oldrole="para">Multiple substitution rules are applied sequentially. The following rules replace the first occurrence of the string <span class="Code" oldrole="userinput">IP</span> with the string <span class="Code" oldrole="userinput">IP-Addresses</span>.</p>
<pre class="Code" oldrole="synopsis">rewrite r_rewrite_subst{
    subst("IP", "IP-Address", value("MESSAGE"));
    subst("Address", "Addresses", value("MESSAGE"));
};</pre>

<MadCap:snippetBlock src="../../shared/chunk/example-rewrite-hash.htm"></MadCap:snippetBlock>
<h2 name="rewrite-set">Setting message fields to specific values</h2>
<MadCap:keyword term="setting message fields"></MadCap:keyword>
<MadCap:keyword term="set()"></MadCap:keyword>
<p oldrole="para">To set a field of the message to a specific value, you have to:</p>
<ul oldrole="itemizedlist">
<li oldrole="listitem">
<p oldrole="para">define the string to include in the message, and</p>
</li>
<li oldrole="listitem">
<p oldrole="para">select the field where it should be included.</p>
</li>
</ul>
<p oldrole="para">You can set the value of available macros, for example HOST, MESSAGE, PROGRAM, or any user-defined macros created using parsers (for details, see <MadCap:xref href="chapter-parsers.htm#chapter-parsers"></MadCap:xref> and <MadCap:xref href="chapter-patterndb.htm#chapter-patterndb"></MadCap:xref>). Hard macros cannot be modified. For details on the hard and soft macros, see <MadCap:xref href="chapter-manipulating-messages.htm#macros-hard-vs-soft"></MadCap:xref>). Note that the rewrite operation completely replaces any previous value of that field. Use the following syntax:</p>
<h6 oldrole="formalpara">Declaration:</h6>

<pre class="Code" oldrole="synopsis">rewrite &lt;name_of_the_rule&gt; {
    set("&lt;string to include&gt;", value(&lt;field name&gt;));
};</pre>

<h6 name="example-rewrite-set" oldrole="example">Example: Setting message fields to a particular value</h6>
<p oldrole="para">The following example sets the HOST field of the message to <span class="Code" oldrole="userinput">myhost</span>.</p>
<pre class="Code" oldrole="synopsis">rewrite r_rewrite_set{set("myhost", value("HOST"));};</pre>
<p oldrole="para">The following example appends the "suffix" string to the MESSAGE field:</p>
<pre class="Code" oldrole="synopsis">rewrite r_rewrite_set{set("$MESSAGE suffix", value("MESSAGE"));};</pre>
<p oldrole="para">For details on rewriting SDATA fields, see <MadCap:xref href="chapter-manipulating-messages.htm#custom-sdata-fields"></MadCap:xref>.</p>

<p oldrole="para">You can also use the following options in rewrite rules that use the <span class="Code" oldrole="parameter">set()</span> operator.</p>
<pre class="Code" oldrole="synopsis">rewrite &lt;name_of_the_rule&gt; {
    set("&lt;string to include&gt;", value(&lt;field name&gt;), on-error("fallback-to-string");
};</pre>

<MadCap:snippetBlock src="../../shared/chunk/option-destination-frac-digits.htm"></MadCap:snippetBlock>


<MadCap:snippetBlock src="../../shared/chunk/option-destination-local-timezone.htm"></MadCap:snippetBlock>


<MadCap:snippetBlock src="../../shared/chunk/option-destination-on-error.htm"></MadCap:snippetBlock>


<MadCap:snippetBlock src="../../shared/chunk/option-destination-send-timezone.htm"></MadCap:snippetBlock>


<MadCap:snippetBlock src="../../shared/chunk/option-destination-timezone.htm"></MadCap:snippetBlock>


<MadCap:snippetBlock src="../../shared/chunk/option-destination-ts-format.htm"></MadCap:snippetBlock>

<h2 name="rewrite-unset">Unsetting message fields</h2>
<MadCap:keyword term="unsetting message fields"></MadCap:keyword>
<MadCap:keyword term="unset()"></MadCap:keyword>
<p oldrole="para">You can unset a macro or a field of the message, including any user-defined macros created using parsers (for details, see <MadCap:xref href="chapter-parsers.htm#chapter-parsers"></MadCap:xref> and <MadCap:xref href="chapter-patterndb.htm#chapter-patterndb"></MadCap:xref>). Hard macros cannot be modified. For details on hard and soft macros, see <MadCap:xref href="chapter-manipulating-messages.htm#macros-hard-vs-soft"></MadCap:xref>). Note that the unset operation completely deletes any previous value of the field that you apply it on. Use the following syntax:</p>
<h6 oldrole="formalpara">Declaration:</h6>

<pre class="Code" oldrole="synopsis">rewrite &lt;name_of_the_rule&gt; {
    unset(value("&lt;field name&gt;"));
};</pre>

<h6 name="example-rewrite-unset" oldrole="example">Example: Unsetting a message field</h6>
<p oldrole="para">The following example unsets the HOST field of the message.</p>
<pre class="Code" oldrole="synopsis">rewrite r_rewrite_unset{unset(value("HOST"));};</pre>

<p oldrole="para">To unset a group of fields, you can use the <span class="Code" oldrole="parameter">groupunset()</span> rewrite rule.</p>
<h6 oldrole="formalpara">Declaration:</h6>

<pre class="Code" oldrole="synopsis">rewrite &lt;name_of_the_rule&gt; {
    groupunset(values("&lt;expression-for-field-names&gt;"));
};</pre>

<h6 oldrole="example">Example: Unsetting a group of fields</h6>
<p oldrole="para">The following rule clears all SDATA fields:</p>
<pre class="Code" oldrole="synopsis">rewrite r_rewrite_unset_SDATA{ groupunset(values(".SDATA.*"));};</pre>

<h2 name="custom-sdata-fields">Creating custom SDATA fields</h2>
<MadCap:keyword term="setting message fields"></MadCap:keyword>
<MadCap:keyword term="creating SDATA fields"></MadCap:keyword>
<MadCap:keyword term="modifying SDATA"></MadCap:keyword>
<p oldrole="para">If you use RFC5424-formatted (IETF-syslog) messages, you can also create custom fields in the SDATA part of the message (For details on the SDATA message part, see <MadCap:xref href="chapter-concepts.htm#ietfsyslog-structureddata"></MadCap:xref>). According to RFC5424, the name of the field (its SD-ID) must not contain the <span class="Code" oldrole="userinput">@</span> character for reserved SD-IDs. Custom SDATA fields must be in the following format: <span class="Code" oldrole="userinput">.SDATA.group-name@&lt;private enterprise number&gt;.field-name</span>, for example, <span class="Code" oldrole="userinput">.SDATA.mySDATA-field-group@18372.4.mySDATA-field</span>. (18372.4 is the private enterprise number of &amp;fullvendor;, the developer of &amp;abbrev;.)</p>

<h6 oldrole="example">Example: Rewriting custom SDATA fields</h6>
<p oldrole="para">The following example sets the sequence ID field of the RFC5424-formatted (IETF-syslog) messages to a fixed value. This field is a predefined SDATA field with a reserved SD-ID, therefore its name does not contain the <span class="Code" oldrole="userinput">@</span> character.</p>
<pre class="Code" oldrole="synopsis">rewrite r_sd {
    set("55555" value(".SDATA.meta.sequenceId"));
};</pre>
<p oldrole="para">It is also possible to set the value of a field that does not exist yet, and create a new, custom name-value pair that is associated with the message. The following example creates the <span class="Code" oldrole="userinput">.SDATA.groupID.fieldID@18372.4</span> field and sets its value to <span class="Code" oldrole="userinput">yes</span>. If you use the <span class="Code" oldrole="userinput">${.SDATA.groupID.fieldID@18372.4}</span> macro in a template or SQL table, its value will be <span class="Code" oldrole="userinput">yes</span> for every message that was processed with this rewrite rule, and empty for every other message.</p>
<p oldrole="para">The next example creates a new SDATA field-group and field called <span class="Code" oldrole="userinput">custom</span> and <span class="Code" oldrole="userinput">sourceip</span>, respectively:</p>
<pre class="Code" oldrole="synopsis">rewrite r_rewrite_set {
    set("${SOURCEIP}" value(".SDATA.custom@18372.4.sourceip"));
};</pre>
<p oldrole="para">If you use the <span class="Code" oldrole="userinput">${.SDATA.custom@18372.4.sourceip}</span> macro in a template or SQL table, its value will be that of the <span class="Code" oldrole="userinput">SOURCEIP</span> macro (as seen on the machine where the SDATA field was created) for every message that was processed with this rewrite rule, and empty for every other message.</p>
<p oldrole="para">You can verify whether or not the format is correct by looking at the actual network traffic. The SDATA field-group will be called <span class="Code" oldrole="userinput">custom@18372.4</span>, and <span class="Code" oldrole="userinput">sourceip</span> will become a field within that group. If you decide to set up several fields, they will be listed in consecutive order within the field-group's SDATA block.</p>

<h2 name="rewrite-groupset">Setting multiple message fields to specific values</h2>
<MadCap:keyword term="setting message fields:['setting multiple fields']"></MadCap:keyword>
<MadCap:keyword term="groupset()"></MadCap:keyword>
<p oldrole="para">The <span class="Code" oldrole="parameter">groupset()</span> rewrite rule allows you to modify the value of multiple message fields at once, for example, to change the value of sensitive fields extracted using patterndb, or received in a JSON format.</p>
<ul oldrole="itemizedlist">
<li oldrole="listitem">
<p oldrole="para">The first parameter is the new value of the modified fields. This can be a simple string, a macro, or a template (which can include template functions as well).</p>
</li>
<li oldrole="listitem">
<p oldrole="para">The second parameter (<span class="Code" oldrole="parameter">values()</span>) specifies the fields to modify. You can explicitly list the macros or fields (a space-separated list with the values enclosed in double-quotes), or use wildcards and glob expressions to select multiple fields.</p>
</li>
<li oldrole="listitem">
<p oldrole="para">Note that <span class="Code" oldrole="parameter">groupset()</span> does not create new fields, it only modifies existing fields.</p>
</li>
<li oldrole="listitem">
<p oldrole="para">You can refer to the old value of the field using the <span class="Code" oldrole="parameter">$_</span> macro. This is resolved to the value of the current field, and is available only in <span class="Code" oldrole="parameter">groupset()</span> rules.</p>
</li>
</ul>
<h6 oldrole="formalpara">Declaration:</h6>

<pre class="Code" oldrole="synopsis">rewrite &lt;name_of_the_rule&gt; {
    groupset("&lt;new-value-of-the-fields&gt;", values("&lt;field-name-or-glob&gt;" ["&lt;another-field-name-or-glob&gt;"]));
};</pre>

<h6 name="rewrite-groupset-examples" oldrole="example">Example: Using groupset rewrite rules</h6>
<p oldrole="para">The following examples show how to change the values of multiple fields at the same time.</p>
<ul oldrole="itemizedlist">
<li oldrole="listitem">
<p oldrole="para">Change the value of the <span class="Code" oldrole="parameter">HOST</span> field to <span class="Code" oldrole="parameter">myhost</span>.</p>
<pre class="Code" oldrole="synopsis">groupset ("myhost" values("HOST"))</pre>
</li>
<li oldrole="listitem">
<p oldrole="para">Change the value of the <span class="Code" oldrole="parameter">HOST</span> and <span class="Code" oldrole="parameter">FULLHOST</span> fields to <span class="Code" oldrole="parameter">myhost</span>.</p>
<pre class="Code" oldrole="synopsis">groupset ("myhost" values("HOST" "FULLHOST"))</pre>
</li>
<li oldrole="listitem">
<p oldrole="para">Change the value of the <span class="Code" oldrole="parameter">HOST</span> <span class="Code" oldrole="parameter">FULLHOST</span> and fields to lowercase.</p>
<pre class="Code" oldrole="synopsis">groupset ("$(lowercase "$_")" values("HOST" "FULLHOST"))</pre>
</li>
<li oldrole="listitem">
<p oldrole="para">Change the value of each field and macro that begins with <span class="Code" oldrole="parameter">.USER</span> to <span class="Code" oldrole="parameter">nobody</span>.</p>
<pre class="Code" oldrole="synopsis">groupset ("nobody" values(".USER.*"))</pre>
</li>
<li oldrole="listitem">
<p oldrole="para">Change the value of each field and macro that begins with <span class="Code" oldrole="parameter">.USER</span> to its SHA-1 hash (truncated to 6 characters).</p>
<pre class="Code" oldrole="synopsis">groupset ("$(sha1 --length 6 $_)" values(".USER.*"))</pre>
</li>
</ul>

<h2 name="conditional-rewrite">Conditional rewrites</h2>
<MadCap:keyword term="condition()"></MadCap:keyword>
<MadCap:keyword term="conditional rewrites"></MadCap:keyword>
<MadCap:keyword term="rewrite if"></MadCap:keyword>
<MadCap:keyword term="rewriting messages:['conditional rewrites']"></MadCap:keyword>
<MadCap:keyword term="filtering rewrites"></MadCap:keyword>
<p oldrole="para">Starting with <MadCap:conditionaltext MadCap:conditions="pe">4 F1</MadCap:conditionaltext><MadCap:conditionaltext MadCap:conditions="ose">3.2</MadCap:conditionaltext>, it is possible to apply a rewrite rule to a message only if certain conditions are met. The <span class="Code" oldrole="parameter">condition()</span> option effectively embeds a filter expression into the rewrite rule: the message is modified only if the message passes the filter. If the condition is not met, the message is passed to the next element of the log path (that is, the element following the rewrite rule in the log statement, for example, the destination). Any filter expression normally used in filters can be used as a rewrite condition. Existing filter statements can be referenced using the <span class="Code" oldrole="parameter">filter()</span> function within the condition. For details on filters, see <MadCap:xref href="chapter-routing-filters.htm#filters"></MadCap:xref>.</p>
<table cellspacing="0" class="TableStyle-NoteTable_Blue_DoNotEdit" oldrole="tip" style="width: 100%;mc-table-style: url('../../Resources/TableStyles/NoteTable_Blue_DoNotEdit.css');"><col class="TableStyle-NoteTable_Blue_DoNotEdit-Column-Column1" style="width: 0.3in;"></col><col class="TableStyle-NoteTable_Blue_DoNotEdit-Column-Column2"></col><tbody><tr class="TableStyle-NoteTable_Blue_DoNotEdit-Body-Body1"><td class="TableStyle-NoteTable_Blue_DoNotEdit-BodyB-Column1-Body1"><p><img src="../../Resources/Images/Common/note.png"/></p></td><td class="TableStyle-NoteTable_Blue_DoNotEdit-BodyA-Column2-Body1"><span class="AllNoteStyles">TIP: </span><p oldrole="para">Using conditions in rewrite rules can simplify your <MadCap:variable name="General.abbrev"></MadCap:variable> configuration file, as you do not need to create separate log paths to modify certain messages.</p></td></tr></tbody></table>
<MadCap:snippetBlock src="procedure-conditional-rewrite.htm"></MadCap:snippetBlock>

<h6 name="example-conditional-rewrite" oldrole="example">Example: Using conditional rewriting</h6>
<p oldrole="para">The following example sets the HOST field of the message to <span class="Code" oldrole="userinput">myhost</span> only if the message was sent by the <span class="Code" oldrole="userinput">myapplication</span> program.</p>
<pre class="Code" oldrole="synopsis">rewrite r_rewrite_set{set("myhost", value("HOST") condition(program("myapplication")));};</pre>
<p oldrole="para">The following example is identical to the previous one, except that the condition references an existing filter template.</p>
<pre class="Code" oldrole="synopsis">filter f_rewritefilter {program("myapplication");};
rewrite r_rewrite_set{set("myhost", value("HOST") condition(filter(f_rewritefilter)));};</pre>

<h2 name="rewrite-tags">Adding and deleting tags</h2>
<MadCap:keyword term="set-tag()"></MadCap:keyword>
<MadCap:keyword term="clear-tag()"></MadCap:keyword>
<MadCap:keyword term="rewrite()"></MadCap:keyword>
<MadCap:keyword term="manipulating tags{see}['modifying tags']"></MadCap:keyword>
<MadCap:keyword term="modifying tags"></MadCap:keyword>
<p oldrole="para">To add or delete a tag, you can use rewrite rules. To add a tag, use the following syntax:</p>
<pre class="Code" oldrole="synopsis">rewrite &lt;name_of_the_rule&gt; {
    set-tag("&lt;tag-to-add&gt;");
};</pre>
<p oldrole="para">To delete a tag, use the following syntax:</p>
<pre class="Code" oldrole="synopsis">rewrite &lt;name_of_the_rule&gt; {
    clear-tag("&lt;tag-to-delete&gt;");
};</pre>
<p oldrole="para">You cannot use macros in the tags.</p>
<MadCap:snippetBlock src="anonymizing-credit-card-numbers.htm"></MadCap:snippetBlock>
<h2 name="regular-expressions">Regular expressions</h2>
<MadCap:keyword term="regular expressions"></MadCap:keyword>
<MadCap:keyword term="type()"></MadCap:keyword>
<p oldrole="para">Filters and substitution rewrite rules can use regular expressions. In regular expressions, the characters <span class="Code" oldrole="userinput">()[].*?+^$|\</span> are used as special symbols. Depending on how you want to use these characters and which quotation mark you use, these characters must be used differently, as summarized below.</p>
<ul oldrole="itemizedlist">
<li oldrole="listitem">
<p oldrole="para">Strings between single quotes (<span class="Code" oldrole="userinput">'string'</span>) are treated literally and are not interpreted at all, you do not have to escape special characters. For example the output of <span class="Code" oldrole="userinput">'\x41'</span> is <span class="Code" oldrole="userinput">\x41</span> (characters as follows: backslash, <span class="Code" oldrole="userinput">x</span>(letter), <span class="Code" oldrole="userinput">4</span>(number), <span class="Code" oldrole="userinput">1</span>(number)). This makes writing and reading regular expressions much more simple: it is recommended to use single quotes when writing regular expressions.</p>
</li>
<li oldrole="listitem">
<p oldrole="para">When enclosing strings between double-quotes (<span class="Code" oldrole="userinput">"string"</span>), the string is interpreted and you have to escape special characters, that is, to precede them with a backslash (<span class="Code" oldrole="userinput">\</span>) character if they are meant literally. For example the output of the <span class="Code" oldrole="userinput">"\x41"</span> is simply the letter <span class="Code" oldrole="userinput">a</span>. Therefore special characters like <span class="Code" oldrole="userinput">\</span>(backslash) or <span class="Code" oldrole="userinput">"</span>(quotation mark) must be escaped (<span class="Code" oldrole="userinput">\\</span> and <span class="Code" oldrole="userinput">\"</span>). The following expressions are interpreted: <span class="Code" oldrole="userinput">\a</span>, <span class="Code" oldrole="userinput">\n</span>, <span class="Code" oldrole="userinput">\r</span>, <span class="Code" oldrole="userinput">\t</span>, <span class="Code" oldrole="userinput">\v</span>. For example, the <span class="Code" oldrole="userinput">\$40</span> expression matches the <span class="Code" oldrole="userinput">$40</span> string. Backslashes have to be escaped as well if they are meant literally, for example, the <span class="Code" oldrole="userinput">\\d</span> expression matches the <span class="Code" oldrole="userinput">\d</span> string.</p>
<table cellspacing="0" class="TableStyle-NoteTable_Blue_DoNotEdit" oldrole="tip" style="width: 100%;mc-table-style: url('../../Resources/TableStyles/NoteTable_Blue_DoNotEdit.css');"><col class="TableStyle-NoteTable_Blue_DoNotEdit-Column-Column1" style="width: 0.3in;"></col><col class="TableStyle-NoteTable_Blue_DoNotEdit-Column-Column2"></col><tbody><tr class="TableStyle-NoteTable_Blue_DoNotEdit-Body-Body1"><td class="TableStyle-NoteTable_Blue_DoNotEdit-BodyB-Column1-Body1"><p><img src="../../Resources/Images/Common/note.png"/></p></td><td class="TableStyle-NoteTable_Blue_DoNotEdit-BodyA-Column2-Body1"><span class="AllNoteStyles">TIP: </span><p oldrole="para">If you use single quotes, you do not need to escape the backslash, for example <span class="Code" oldrole="userinput">match("\\.")</span> is equivalent to <span class="Code" oldrole="userinput">match('\.')</span>.</p></td></tr></tbody></table>
</li>
<li oldrole="listitem">
<p oldrole="para">Enclosing alphanumeric strings between double-quotes (<span class="Code" oldrole="userinput">"string"</span>) is not necessary, you can just omit the double-quotes. For example when writing filters, <span class="Code" oldrole="userinput">match("sometext")</span> and <span class="Code" oldrole="userinput">match(sometext)</span> will both match for the <span class="Code" oldrole="userinput">sometext</span> string.</p>
<table cellspacing="0" class="TableStyle-NoteTable_Blue_DoNotEdit" oldrole="note" style="width: 100%;mc-table-style: url('../../Resources/TableStyles/NoteTable_Blue_DoNotEdit.css');"><col class="TableStyle-NoteTable_Blue_DoNotEdit-Column-Column1" style="width: 0.3in;"></col><col class="TableStyle-NoteTable_Blue_DoNotEdit-Column-Column2"></col><tbody><tr class="TableStyle-NoteTable_Blue_DoNotEdit-Body-Body1"><td class="TableStyle-NoteTable_Blue_DoNotEdit-BodyB-Column1-Body1"><p><img src="../../Resources/Images/Common/note.png"/></p></td><td class="TableStyle-NoteTable_Blue_DoNotEdit-BodyA-Column2-Body1"><span class="AllNoteStyles">NOTE: </span><p oldrole="para">Only strings containing alphanumerical characters can be used without quotes or double quotes. If the string contains whitespace or any special characters (<span class="Code" oldrole="userinput">()[].*?+^$|\</span> or <span class="Code" oldrole="userinput">;:#</span>), you must use quotes or double quotes.</p><p oldrole="para">When using the <span class="Code" oldrole="userinput">;:#</span> characters, you must use quotes or double quotes, but escaping them is not required.</p></td></tr></tbody></table>
</li>
</ul>
<MadCap:keyword term="regular expressions:['case-insensitive']"></MadCap:keyword>
<MadCap:keyword term="regular expressions:['escaping']"></MadCap:keyword>
<MadCap:keyword term="escaping special characters"></MadCap:keyword>
<p oldrole="para">By default, all regular expressions are case sensitive. To disable the case sensitivity of the expression, add the <span class="Code" oldrole="userinput">flags(ignore-case)</span> option to the regular expression.</p>
<pre class="Code" oldrole="synopsis">filter demo_regexp_insensitive { host("system" flags(ignore-case)); };</pre>
<p oldrole="para">The regular expressions can use up to 255 regexp matches (<span class="Code" oldrole="userinput">${1} ... ${255}</span>), but only from the last filter and only if the <span class="Code" oldrole="userinput">flags("store-matches")</span> flag was set for the filter. For case-insensitive searches, use the <span class="Code" oldrole="userinput">flags("ignore-case")</span> option.</p>
<h2 name="reference-regexp-types">Types and options of regular expressions</h2>
<p oldrole="para">By default, syslog-ng uses PCRE-style regular expressions. To use other expression types, add the <span class="Code" oldrole="parameter">type()</span> option after the regular expression.</p>
<p oldrole="para">The <MadCap:variable name="General.abbrev"></MadCap:variable> application supports the following expression types:</p>
<ul oldrole="itemizedlist">
<li oldrole="listitem">
<p oldrole="para"><a href="chapter-manipulating-messages.htm">Perl Compatible Regular Expressions (PCRE)</a></p>
</li>
<li oldrole="listitem">
<p oldrole="para"><a href="chapter-manipulating-messages.htm">Literal string searches</a></p>
</li>
<li oldrole="listitem">
<p oldrole="para"><a href="chapter-manipulating-messages.htm">Glob patterns without regular expression support</a></p>
</li>
</ul>

<h6 name="reference-regexp-pcre" oldrole="simplesect">pcre</h6>
<MadCap:keyword term="pcre"></MadCap:keyword>
<MadCap:keyword term="regular expressions:['pcre']"></MadCap:keyword>
<p oldrole="para"><i oldrole="emphasis" role="bold">Description:</i> Use Perl Compatible Regular Expressions (PCRE).<MadCap:conditionaltext MadCap:conditions="pe"> Starting with <MadCap:variable name="General.abbrev"></MadCap:variable> version 3.1, PCRE expressions are supported on every platform.</MadCap:conditionaltext> If the <span class="Code" oldrole="parameter">type()</span> parameter is not specified, syslog-ng uses PCRE regular expressions by default.</p>
<p oldrole="para">PCRE regular expressions have the following flag options:</p>
<h6 oldrole="formalpara">global:</h6>
<MadCap:keyword term="global"></MadCap:keyword>
<p oldrole="para">Usable only in rewrite rules: match for every occurrence of the expression, not only the first one.</p>
<h6 oldrole="formalpara">ignore-case:</h6>
<MadCap:keyword term="ignore-case"></MadCap:keyword>
<p oldrole="para">Disable case-sensitivity.</p>
<h6 oldrole="formalpara">store-matches:</h6>
<MadCap:keyword term="store-matches"></MadCap:keyword>
<p oldrole="para">Store the matches of the regular expression into the <span class="Code" oldrole="userinput">$0, ... $255</span> variables. The <span class="Code" oldrole="userinput">$0</span> stores the entire match, <span class="Code" oldrole="userinput">$1</span> is the first group of the match (parentheses), and so on. Named matches (also called named subpatterns), for example <span class="Code" oldrole="userinput">(?&lt;name&gt;...)</span>, are stored as well. Matches from the last filter expression can be referenced in regular expressions.</p>
<h6 oldrole="formalpara">unicode:</h6>
<MadCap:keyword term="unicode"></MadCap:keyword>
<p oldrole="para">Use Unicode support for UTF-8 matches: UTF-8 character sequences are handled as single characters.</p>
<h6 oldrole="formalpara">utf8:</h6>
<MadCap:keyword term="utf8"></MadCap:keyword>
<p oldrole="para">An alias for the <span class="Code" oldrole="parameter">unicode</span> flag.</p>

<h6 name="example-regexp-pcre" oldrole="example">Example: Using PCRE regular expressions</h6>
<pre class="Code" oldrole="synopsis">rewrite r_rewrite_subst
        {subst("a*", "?", value("MESSAGE") flags("utf8" "global"));  };</pre>



<h6 name="reference-regexp-string" oldrole="simplesect">string</h6>
<MadCap:keyword term="string"></MadCap:keyword>
<p oldrole="para"><i oldrole="emphasis" role="bold">Description:</i> Match the strings literally, without regular expression support. By default, only identical strings are matched. For partial matches, use the <span class="Code" oldrole="userinput">flags("prefix")</span> or the <span class="Code" oldrole="userinput">flags("substring")</span> flags.</p>


<h6 name="reference-regexp-glob" oldrole="simplesect">glob</h6>
<MadCap:keyword term="glob"></MadCap:keyword>
<MadCap:keyword term="glob patterns"></MadCap:keyword>
<p oldrole="para"><i oldrole="emphasis" role="bold">Description:</i> Match the strings against a pattern containing '*' and '?' wildcards, without regular expression and character range support. The advantage of glob patterns to regular expressions is that globs can be processed much faster.</p>
<ul oldrole="variablelist">
<li oldrole="varlistentry">
<b oldrole="command">*</b>
<li oldrole="listitem">
<p oldrole="para">matches an arbitrary string, including an empty string</p>
</li>
</li>
<li oldrole="varlistentry">
<b oldrole="command">?</b>
<li oldrole="listitem">
<p oldrole="para">matches an arbitrary character</p>
</li>
</li>
</ul>
<table cellspacing="0" class="TableStyle-NoteTable_Blue_DoNotEdit" oldrole="note" style="width: 100%;mc-table-style: url('../../Resources/TableStyles/NoteTable_Blue_DoNotEdit.css');"><col class="TableStyle-NoteTable_Blue_DoNotEdit-Column-Column1" style="width: 0.3in;"></col><col class="TableStyle-NoteTable_Blue_DoNotEdit-Column-Column2"></col><tbody><tr class="TableStyle-NoteTable_Blue_DoNotEdit-Body-Body1"><td class="TableStyle-NoteTable_Blue_DoNotEdit-BodyB-Column1-Body1"><p><img src="../../Resources/Images/Common/note.png"/></p></td><td class="TableStyle-NoteTable_Blue_DoNotEdit-BodyA-Column2-Body1"><span class="AllNoteStyles">NOTE: </span><ul oldrole="itemizedlist">
<li oldrole="listitem">
<p oldrole="para">The wildcards can match the <span class="Code" oldrole="userinput">/</span> character.</p>
</li>
<li oldrole="listitem">
<p oldrole="para">You cannot use the <span class="Code" oldrole="userinput">*</span> and <span class="Code" oldrole="userinput">?</span> literally in the pattern.</p>
</li>
</ul></td></tr></tbody></table>

<h2 name="optimizing-regular-expressions">Optimizing regular expressions</h2>
<MadCap:keyword term="filters"></MadCap:keyword>
<MadCap:keyword term="regular expressions"></MadCap:keyword>
<MadCap:keyword term="optimizing regular expressions"></MadCap:keyword>
<MadCap:keyword term="optimizing syslog-ng performance:['regular expressions']"></MadCap:keyword>
<p oldrole="para">The <span class="Code" oldrole="parameter">host()</span>, <span class="Code" oldrole="parameter">match()</span>, and <span class="Code" oldrole="parameter">program()</span> filter functions and some other syslog-ng objects accept regular expressions as parameters. But evaluating general regular expressions puts a high load on the CPU, which can cause problems when the message traffic is very high. Often the regular expression can be replaced with simple filter functions and logical operators. Using simple filters and logical operators, the same effect can be achieved at a much lower CPU load.</p>

<h6 oldrole="example">Example: Optimizing regular expressions in filters</h6>
<p oldrole="para">Suppose you need a filter that matches the following error message logged by the <span class="Code" oldrole="userinput">xntpd</span> NTP daemon:</p>
<pre class="Code" oldrole="synopsis">xntpd[1567]: time error -1159.777379 is too large (set clock manually);</pre>
<p oldrole="para">The following filter uses regular expressions and matches every instance and variant of this message.</p>
<pre class="Code" oldrole="synopsis">filter f_demo_regexp {
    program("demo_program") and
    match("time error .* is too large .* set clock manually"); };</pre>
<p oldrole="para">Segmenting the <span class="Code" oldrole="parameter">match()</span> part of this filter into separate <span class="Code" oldrole="parameter">match()</span> functions greatly improves the performance of the filter.</p>
<pre class="Code" oldrole="synopsis">filter f_demo_optimized_regexp {
    program("demo_program") and
    match("time error") and
    match("is too large") and
    match("set clock manually"); };</pre>

</body></html>
