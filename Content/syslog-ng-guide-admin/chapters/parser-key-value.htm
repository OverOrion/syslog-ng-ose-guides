<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
    <head>
        <meta name="description" content="" />
    </head>
    <body name="key-value-parser" oldrole="section">
        <h1 name="key-value-parser" version="5.0" xmlns="http://docbook.org/ns/docbook">Parsing <span class="Code" oldrole="userinput">key=value</span> pairs</h1>
        <MadCap:keyword term="segmenting messages">
        </MadCap:keyword>
        <MadCap:keyword term="key=value pairs">
        </MadCap:keyword>
        <MadCap:keyword term="key-value pairs">
        </MadCap:keyword>
        <MadCap:keyword term="splitting messages">
        </MadCap:keyword>
        <MadCap:keyword term="parsers:['kv-parser']">
        </MadCap:keyword>
        <p oldrole="para">The <MadCap:variable name="General.abbrev"></MadCap:variable> application can separate a message consisting of whitespace or comma-separated <span class="Code" oldrole="userinput">key=value</span> pairs (for example, Postfix log messages) into name-value pairs. You can also specify other separator character instead of the equal sign, for example, colon (<span class="Code" oldrole="userinput">:</span>) to parse MySQL log messages. The <MadCap:variable name="General.abbrev"></MadCap:variable> application automatically trims any leading or trailing whitespace characters from the keys and values, and also parses values that contain unquoted whitespace. For details on using value-pairs in <MadCap:variable name="General.abbrev"></MadCap:variable> see <MadCap:xref href="concepts-value-pairs.htm#concepts-value-pairs"></MadCap:xref>.</p>
        <p oldrole="para">You can refer to the separated parts of the message using the key of the value as a macro. For example, if the message contains <span class="Code" oldrole="userinput">KEY1=value1,KEY2=value2</span>, you can refer to the values as <span class="Code" oldrole="userinput">${KEY1}</span> and <span class="Code" oldrole="userinput">${KEY2}</span>.</p>
        <MadCap:snippetBlock src="../../shared/wnt/n-kv-parser-repeated-keys.htm">
        </MadCap:snippetBlock>
        <table cellspacing="0" class="TableStyle-NoteTable_Yellow_DoNotEdit" oldrole="warning" style="width: 100%;mc-table-style: url('../../Resources/TableStyles/NoteTable_Yellow_DoNotEdit.css');">
            <col class="TableStyle-NoteTable_Yellow_DoNotEdit-Column-Column1" style="width: 0.3in;">
            </col>
            <col class="TableStyle-NoteTable_Yellow_DoNotEdit-Column-Column2">
            </col>
            <tbody>
                <tr class="TableStyle-NoteTable_Yellow_DoNotEdit-Body-Body1">
                    <td class="TableStyle-NoteTable_Yellow_DoNotEdit-BodyB-Column1-Body1">
                        <p>
                            <img src="../../Resources/Images/Common/caution.png" />
                        </p>
                    </td>
                    <td class="TableStyle-NoteTable_Yellow_DoNotEdit-BodyA-Column2-Body1"><span class="Yellow">Caution: </span>
                        <p oldrole="para">If the names of keys in the message are the same as the names of <MadCap:variable name="General.abbrev"></MadCap:variable> soft macros, the value from the parsed message will overwrite the value of the macro. For example, the <span class="Code" oldrole="userinput">PROGRAM=value1, MESSAGE=value2</span> content will overwrite the <span class="Code" oldrole="userinput">${PROGRAM}</span> and <span class="Code" oldrole="userinput">${MESSAGE}</span> macros. To avoid overwriting such macros, use the <span class="Code" oldrole="parameter">prefix()</span> option.</p>
                        <p oldrole="para">Hard macros cannot be modified, so they will not be overwritten. For details on the macro types, see <MadCap:xref href="chapter-manipulating-messages.htm#macros-hard-vs-soft"></MadCap:xref>.</p>
                        <p oldrole="para">The parser discards message sections that are not <span class="Code" oldrole="userinput">key=value</span> pairs, even if they appear between <span class="Code" oldrole="userinput">key=value</span> pairs that can be parsed.</p>
                    </td>
                </tr>
            </tbody>
        </table>
        <p oldrole="para">To parse <span class="Code" oldrole="userinput">key=value</span> pairs, define a parser that has the <span class="Code" oldrole="parameter">kv-parser()</span> option. Defining the prefix is optional. By default, the parser will process the <span class="Code" oldrole="userinput">${MESSAGE}</span> part of the log message. You can also define the parser inline in the log path.</p>
        <h6 oldrole="formalpara">Declaration:</h6><pre class="Code" oldrole="synopsis">parser parser_name {
    kv-parser(
        prefix()
    );
};</pre>
        <h6 oldrole="example">Example: Using a <span class="Code" oldrole="userinput">key=value</span> parser</h6>
        <p oldrole="para">In the following example, the source is a log message consisting of comma-separated <span class="Code" oldrole="userinput">key=value</span> pairs, for example, a Postfix log message:</p><pre class="Code" oldrole="synopsis">Jun 20 12:05:12 mail.example.com &lt;info&gt; postfix/qmgr[35789]: EC2AC1947DA: from=&lt;me@example.com&gt;, size=807, nrcpt=1 (queue active)</pre>
        <p oldrole="para">The kv-parser inserts the "<span class="Code" oldrole="userinput">.kv.</span>" prefix before all extracted name-value pairs. The destination is a file, that uses the <span class="Code" oldrole="parameter">format-json</span> template function. Every name-value pair that begins with a dot ("<span class="Code" oldrole="userinput">.</span>") character will be written to the file (<span class="Code" oldrole="userinput">dot-nv-pairs</span>). The log line connects the source, the destination and the parser.</p><pre class="Code" oldrole="synopsis">source s_kv {
    network(port(21514));
};

destination d_json {
    file("/tmp/test.json"
        template("$(format-json --scope dot-nv-pairs)\n"));
};

parser p_kv {
    kv-parser (prefix(".kv."));
};

log {
    source(s_kv);
    parser(p_kv);
    destination(d_json);
};</pre>
        <p oldrole="para">You can also define the parser inline in the log path.</p><pre class="Code" oldrole="synopsis">source s_kv {
    network(port(21514));
};

destination d_json {
    file("/tmp/test.json"
        template("$(format-json --scope dot-nv-pairs)\n"));
};

log {
    source(s_kv);
    parser {
        kv-parser (prefix(".kv."));
    };
    destination(d_json);
};</pre>
        <p oldrole="para">You can set the separator character between the key and the value to parse for example <span class="Code" oldrole="userinput">key:value</span> pairs, like MySQL logs:</p><pre class="Code" oldrole="synopsis">Mar  7 12:39:25 myhost MysqlClient[20824]: SYSTEM_USER:'oscar', MYSQL_USER:'my_oscar', CONNECTION_ID:23, DB_SERVER:'127.0.0.1', DB:'--', QUERY:'USE test;'</pre><pre class="Code" oldrole="synopsis">parser p_mysql { kv-parser(value-separator(":") prefix(".mysql."));</pre>
        <h2 name="kv-parser-options">Options of <span class="Code" oldrole="userinput">key=value</span> parsers</h2>
        <p oldrole="para">The <span class="Code" oldrole="parameter">kv-parser</span> has the following options.</p>
        <h6 name="kv-parser-extract-stray-words-into" oldrole="simplesect">extract-stray-words-into()</h6>
        <MadCap:keyword term="extract-stray-words-into()">
        </MadCap:keyword>
        <table cellspacing="0" class="RuledTableWithHeading_DoNotEdit" colsep="0" frame="topbot" rowsep="0" style="width: 100%;mc-table-style: url('../../Resources/TableStyles/RuledTableWithHeading_DoNotEdit.css');">
            <tbody>
                <tr class="TableStyle-RuledTableWithHeading_DoNotEdit-Body-Body1">
                    <td class="TableStyle-RuledTableWithHeading_DoNotEdit-Body-Body1">Synopsis: 

                            </td>
                    <td class="TableStyle-RuledTableWithHeading_DoNotEdit-Body-Body1">extract-stray-words-into("&lt;name-value-pair&gt;")</td>
                </tr>
            </tbody>
            <col class="TableStyle-RuledTableWithHeading_DoNotEdit-Column-Column1" style="width: 0.3in;">
            </col>
        </table>
        <p oldrole="para"><i oldrole="emphasis" role="bold">Description:</i> Specifies the name-value pair where <MadCap:variable name="General.abbrev"></MadCap:variable> stores any stray words that appear before or between the parsed key-value pairs (mainly when the <a href="parser-key-value.htm"><span class="Code" oldrole="parameter">pair-separator()</span></a> option is also set). If multiple stray words appear in a message, then <MadCap:variable name="General.abbrev"></MadCap:variable> stores them as a comma-separated list. Note that the <span class="Code" oldrole="parameter">prefix()</span> option does not affect the name-value pair storing the stray words. Default value: <span class="Code" oldrole="userinput">N/A</span></p>
        <h6 name="example-extract-stray-words" oldrole="example">Example: Extracting stray words in key-value pairs</h6>
        <p oldrole="para">For example, consider the following message:</p><pre class="Code" oldrole="synopsis">VSYS=public; Slot=5/1; protocol=17; source-ip=10.116.214.221; source-port=50989; destination-ip=172.16.236.16; destination-port=162;time=2016/02/18 16:00:07; interzone-emtn_s1_vpn-enodeb_om; inbound; policy=370;</pre>
        <p oldrole="para">This is a list of key-value pairs, where the value separator is <span class="Code" oldrole="userinput">=</span> and the pair separator is <span class="Code" oldrole="userinput">;</span>. However, before the last key-value pair (<span class="Code" oldrole="userinput">policy=370</span>), there are two stray words: <span class="Code" oldrole="userinput">interzone-emtn_s1_vpn-enodeb_om inbound</span>. If you want to store or process these, specify a name-value pair to store them in the <span class="Code" oldrole="parameter">extract-stray-words-into()</span> option, for example, <span class="Code" oldrole="userinput">extract-stray-words-into("my-stray-words")</span>. The value of <span class="Code" oldrole="userinput">${my-stray-words}</span> for this message will be <span class="Code" oldrole="userinput">interzone-emtn_s1_vpn-enodeb_om, inbound</span></p>
        <MadCap:snippetBlock src="../../shared/chunk/option-parser-prefix.htm">
        </MadCap:snippetBlock>
        <MadCap:snippetBlock src="../../shared/chunk/para-macro-prefix-parser.htm">
        </MadCap:snippetBlock>
        <p oldrole="para">For example, to insert the <span class="Code" oldrole="userinput">postfix</span> prefix when parsing Postfix log messages, use the <span class="Code" oldrole="userinput">prefix(.postfix.)</span> option.</p>
        <h6 name="kv-parser-pair-separator" oldrole="simplesect">pair-separator()</h6>
        <MadCap:keyword term="pair-separator()">
        </MadCap:keyword>
        <table cellspacing="0" class="RuledTableWithHeading_DoNotEdit" colsep="0" frame="topbot" rowsep="0" style="width: 100%;mc-table-style: url('../../Resources/TableStyles/RuledTableWithHeading_DoNotEdit.css');">
            <tbody>
                <tr class="TableStyle-RuledTableWithHeading_DoNotEdit-Body-Body1">
                    <td class="TableStyle-RuledTableWithHeading_DoNotEdit-Body-Body1">Synopsis: 

                            </td>
                    <td class="TableStyle-RuledTableWithHeading_DoNotEdit-Body-Body1">pair-separator("&lt;separator-string&gt;")</td>
                </tr>
            </tbody>
            <col class="TableStyle-RuledTableWithHeading_DoNotEdit-Column-Column1" style="width: 0.3in;">
            </col>
        </table>
        <p oldrole="para"><i oldrole="emphasis" role="bold">Description:</i> Specifies the character or string that separates the key-value pairs from each other. Default value: <span class="Code" oldrole="userinput">, </span> (a comma followed by a whitespace)</p>
        <p oldrole="para">For example, to parse <span class="Code" oldrole="userinput">key1=value1;key2=value2</span> pairs, use <span class="Code" oldrole="userinput">kv-parser(pair-separator(";"));</span></p>
        <MadCap:snippetBlock src="../../shared/chunk/option-parser-template.htm">
        </MadCap:snippetBlock>
        <h6 oldrole="simplesect">value-separator()</h6>
        <MadCap:keyword term="value-separator()">
        </MadCap:keyword>
        <table cellspacing="0" class="RuledTableWithHeading_DoNotEdit" colsep="0" frame="topbot" rowsep="0" style="width: 100%;mc-table-style: url('../../Resources/TableStyles/RuledTableWithHeading_DoNotEdit.css');">
            <tbody>
                <tr class="TableStyle-RuledTableWithHeading_DoNotEdit-Body-Body1">
                    <td class="TableStyle-RuledTableWithHeading_DoNotEdit-Body-Body1">Synopsis: 

                            </td>
                    <td class="TableStyle-RuledTableWithHeading_DoNotEdit-Body-Body1">value-separator("&lt;separator-character&gt;")</td>
                </tr>
            </tbody>
            <col class="TableStyle-RuledTableWithHeading_DoNotEdit-Column-Column1" style="width: 0.3in;">
            </col>
        </table>
        <p oldrole="para"><i oldrole="emphasis" role="bold">Description:</i> Specifies the character that separates the keys from the values. Default value: <span class="Code" oldrole="userinput">=</span></p>
        <p oldrole="para">For example, to parse <span class="Code" oldrole="userinput">key:value</span> pairs, use <span class="Code" oldrole="userinput">kv-parser(value-separator(":"));</span></p>
    </body>
</html>