<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" MadCap:lastBlockDepth="12" MadCap:lastHeight="8715" MadCap:lastWidth="1388">
    <head>
        <meta name="description" content="" />
    </head>
    <body name="chapter-configuration-file" oldrole="chapter">
        <h1 name="chapter-configuration-file" version="5.0" xmlns="http://docbook.org/ns/docbook">The <MadCap:variable name="General.abbrev"></MadCap:variable> configuration file</h1>
        <h2 name="config-file">Location of the syslog-ng configuration file</h2>
        <p oldrole="para">The syslog-ng application is configured by editing the <span class="Code" oldrole="filename">syslog-ng.conf</span> file. Use any regular text editor application to modify the file.<MadCap:conditionaltext MadCap:conditions="ose"> The location of the configuration file depends on how you installed <MadCap:variable name="General.abbrev"></MadCap:variable>. Native packages of a platform (like the ones downloaded from Linux repositories) typically place the configuration file under the <span class="Code" oldrole="filename">/etc/syslog-ng/</span> directory.</MadCap:conditionaltext><MadCap:conditionaltext MadCap:conditions="pe"> The <span class="Code" oldrole="filename">syslog-ng.conf</span> and <span class="Code" oldrole="filename">license.txt</span> files are located under the <span class="Code" oldrole="filename">/opt/syslog-ng/etc/</span> directory.</MadCap:conditionaltext></p>
        <h2 name="configuration-syntax">The configuration syntax in detail</h2>
        <MadCap:keyword term="syslog-ng.conf">
        </MadCap:keyword>
        <p oldrole="para">Every syslog-ng configuration file must begin with a line containing the version information of syslog-ng. For syslog-ng version <MadCap:variable name="Version.version"></MadCap:variable>, this line looks like:</p><pre class="Code" oldrole="synopsis">@version: <MadCap:variable name="Version.techversion"></MadCap:variable></pre>
        <p oldrole="para">Versioning the configuration file was introduced in syslog-ng 3.0. If the configuration file does not contain the version information, syslog-ng assumes that the file is for syslog-ng version 2.x. In this case it interprets the configuration and sends warnings about the parts of the configuration that should be updated. Version 3.0 and later will correctly operate with configuration files of version 2.x, but the default values of certain parameters have changed since 3.0.</p>
        <h6 oldrole="example">Example: A simple configuration file</h6>
        <p oldrole="para">The following is a very simple configuration file for syslog-ng: it collects the internal messages of syslog-ng and the messages from <span class="Code" oldrole="filename">/dev/log</span> into the <span class="Code" oldrole="filename">/var/log/messages_syslog-ng.log</span> file.</p><pre class="Code" oldrole="synopsis">@version: <MadCap:variable name="Version.techversion"></MadCap:variable>

source s_local { unix-dgram("/dev/log"); internal(); };

destination d_file { file("/var/log/messages_syslog-ng.log"); };

log { source(s_local); destination(d_file); };</pre>
        <p oldrole="para">As a syslog-ng user described on a <a href="https://lists.gt.net/gentoo/user/209108">mailing list</a>:</p>
        <blockquote>
            <attribution>Alan McKinnon</attribution>
            <p oldrole="para"><i oldrole="emphasis">The syslog-ng's config file format was written by programmers for programmers to be understood by programmers. That may not have been the stated intent, but it is how things turned out. The syntax is exactly that of C, all the way down to braces and statement terminators.</i>
            </p>
        </blockquote>
        <MadCap:snippetBlock src="../../shared/chunk/global-objects-syntax.htm">
        </MadCap:snippetBlock>
        <table cellspacing="0" class="TableStyle-NoteTable_Blue_DoNotEdit" oldrole="tip" style="width: 100%;mc-table-style: url('../../Resources/TableStyles/NoteTable_Blue_DoNotEdit.css');">
            <col class="TableStyle-NoteTable_Blue_DoNotEdit-Column-Column1" style="width: 0.3in;">
            </col>
            <col class="TableStyle-NoteTable_Blue_DoNotEdit-Column-Column2">
            </col>
            <tbody>
                <tr class="TableStyle-NoteTable_Blue_DoNotEdit-Body-Body1">
                    <td class="TableStyle-NoteTable_Blue_DoNotEdit-BodyB-Column1-Body1">
                        <p>
                            <img src="../../Resources/Images/Common/note.png" />
                        </p>
                    </td>
                    <td class="TableStyle-NoteTable_Blue_DoNotEdit-BodyA-Column2-Body1"><span class="AllNoteStyles">TIP: </span>
                        <p oldrole="para">Before activating a new configuration, check that your configuration file is syntactically correct using the <b oldrole="command">syslog-ng --syntax-only</b> command.</p>
                        <p oldrole="para">To activate the configuration, reload the configuration of syslog-ng using the <b oldrole="command">/etc/init.d/syslog-ng reload</b> command.</p>
                    </td>
                </tr>
            </tbody>
        </table>
        <h2 name="configuration-syntax-notes">Notes about the configuration syntax</h2>
        <p oldrole="para">When you are editing the syslog-ng configuration file, note the following points:</p>
        <ul oldrole="itemizedlist">
            <li oldrole="listitem">
                <p oldrole="para">The configuration file can contain a maximum of 6665 source / destination / log elements.</p>
            </li>
            <li oldrole="listitem">
                <p oldrole="para">When writing the names of options and parameters (or other reserved words), the hyphen (<span class="Code" oldrole="userinput">-</span>) and underscore (<span class="Code" oldrole="userinput">_</span>) characters are equivalent, for example <span class="Code" oldrole="userinput">max-connections(10)</span> and <span class="Code" oldrole="userinput">max_connections(10)</span> are both correct.</p>
            </li>
            <li oldrole="listitem">
                <p oldrole="para">Numbers can be prefixed with <span class="Code" oldrole="userinput">+</span> or <span class="Code" oldrole="userinput">-</span> to indicate positive or negative values. Numbers beginning with zero (<span class="Code" oldrole="userinput">0</span>) or <span class="Code" oldrole="userinput">0x</span> are treated as octal or hexadecimal numbers, respectively.</p>
                <p oldrole="para">Starting with <MadCap:variable name="General.abbrev"></MadCap:variable> version <MadCap:conditionaltext MadCap:conditions="ose">3.5</MadCap:conditionaltext><MadCap:conditionaltext MadCap:conditions="pe">7.0</MadCap:conditionaltext>, you can use suffixes for kilo-, mega-, and gigabytes. Use the Kb, Mb, or Gb suffixes for the base-10 version, and Kib, Mib, or Gib for the base-2 version. That is, 2MB means 2000000, while 2MiB means 2097152. For example, to set the <span class="Code" oldrole="parameter">log-msg-size()</span> option to 2000000 bytes, use <span class="Code" oldrole="parameter">log-msg-size(2Mb)</span>.</p>
            </li>
            <li oldrole="listitem">
                <p oldrole="para">You can use commas (<span class="Code" oldrole="userinput">,</span>) to separate options or other parameters for readability, syslog-ng completely ignores them. The following declarations are equivalent:</p><pre class="Code" oldrole="synopsis">source s_demo_stream {
        unix-stream("&lt;path-to-socket&gt;" max-connections(10) group(log)); };
source s_demo_stream {
        unix-stream("&lt;path-to-socket&gt;", max-connections(10), group(log)); };</pre>
            </li>
            <li oldrole="listitem">
                <p oldrole="para">When enclosing object IDs (for example the name of a destination) between double-quotes (<span class="Code" oldrole="userinput">"mydestination"</span>), the ID can include whitespace as well, for example:</p><pre class="Code" oldrole="synopsis">source "s demo stream" {
        unix-stream("&lt;path-to-socket&gt;" max-connections(10) group(log)); };</pre>
            </li>
            <li oldrole="listitem">
                <p oldrole="para">For notes on using regular expressions, see <MadCap:xref href="chapter-manipulating-messages.htm#regular-expressions"></MadCap:xref>.</p>
            </li>
        </ul>
        <h2 name="inline-objects">Defining configuration objects inline</h2>
        <p oldrole="para">Starting with <MadCap:variable name="General.abbrev"></MadCap:variable> <MadCap:conditionaltext MadCap:conditions="ose">3.4</MadCap:conditionaltext><MadCap:conditionaltext MadCap:conditions="pe">7.0</MadCap:conditionaltext>, you can define configuration objects inline, where they are actually used, without having to define them in a separate object. This is useful if you need an object only once, for example, a filter or a rewrite rule, because it makes the configuration much easier to read. Every object can be defined inline: sources, destinations, filters, parsers, rewrite rules, and so on.</p>
        <p oldrole="para">To define an object inline, use braces instead of parentheses. That is, instead of <span class="Code" oldrole="parameter">&lt;object-type&gt; (&lt;object-id&gt;);</span>, you use <span class="Code" oldrole="parameter">&lt;object-type&gt; {&lt;object-definition&gt;};</span></p>
        <h6 oldrole="example">Example: Using inline definitions</h6>
        <p oldrole="para">The following two configuration examples are equivalent. The first one uses traditional statements, while the second uses inline definitions.</p><pre class="Code" oldrole="synopsis">source s_local {
    system();
    internal();
};
destination d_local {
    file("/var/log/messages");
};
log {
    source(s_local);
    destination(d_local);
};</pre><pre class="Code" oldrole="synopsis">log {
    source {
        system();
        internal();
    };
    destination {
        file("/var/log/messages");
    };
};</pre>
        <MadCap:snippetBlock src="embedded-objects.htm">
        </MadCap:snippetBlock>
        <h2 name="config-global-variables">Global and environmental variables</h2>
        <MadCap:keyword term="syslog-ng.conf:['global variables']">
        </MadCap:keyword>
        <MadCap:keyword term="syslog-ng.conf:['environmental variables']">
        </MadCap:keyword>
        <MadCap:keyword term="environmental variables">
        </MadCap:keyword>
        <MadCap:keyword term="global variables">
        </MadCap:keyword>
        <MadCap:keyword term="@define">
        </MadCap:keyword>
        <p oldrole="para">Starting with <MadCap:variable name="General.abbrev"></MadCap:variable> version <MadCap:conditionaltext MadCap:conditions="ose">3.2</MadCap:conditionaltext><MadCap:conditionaltext MadCap:conditions="pe">4 F1</MadCap:conditionaltext>, it is possible to define global variables in the configuration file. Global variables are actually <span class="Code" oldrole="userinput">name-value</span> pairs. When syslog-ng processes the configuration file during startup, it automatically replaces <span class="Code" oldrole="userinput">`name`</span> with <span class="Code" oldrole="userinput">value</span>. To define a global variable, use the following syntax:</p><pre class="Code" oldrole="synopsis">@define name "value"</pre>
        <p oldrole="para">The value can be any string, but special characters must be escaped.<!-- FIXME add a link to the part about escaping -->To use the variable, insert the name of the variable enclosed between backticks (<span class="Code" oldrole="userinput">`</span>, similarly to using variables in Linux or UNIX shells) anywhere in the configuration file.</p>
        <p oldrole="para">The value of the global variable can be also specified using the following methods:</p>
        <ul oldrole="itemizedlist">
            <li oldrole="listitem">
                <p oldrole="para">Without any quotes, as long as the value does not contain any spaces or special characters. In other word, it contains only the following characters: <span class="Code" oldrole="userinput">a-zA-Z0-9_.</span>.</p>
            </li>
            <li oldrole="listitem">
                <p oldrole="para">Between apostrophes, in case the value does not contain apostrophes.</p>
            </li>
            <li oldrole="listitem">
                <p oldrole="para">Between double quotes, in which case special characters must be escaped using backslashes (<span class="Code" oldrole="userinput">\</span>).</p>
            </li>
        </ul>
        <table cellspacing="0" class="TableStyle-NoteTable_Blue_DoNotEdit" oldrole="tip" style="width: 100%;mc-table-style: url('../../Resources/TableStyles/NoteTable_Blue_DoNotEdit.css');">
            <col class="TableStyle-NoteTable_Blue_DoNotEdit-Column-Column1" style="width: 0.3in;">
            </col>
            <col class="TableStyle-NoteTable_Blue_DoNotEdit-Column-Column2">
            </col>
            <tbody>
                <tr class="TableStyle-NoteTable_Blue_DoNotEdit-Body-Body1">
                    <td class="TableStyle-NoteTable_Blue_DoNotEdit-BodyB-Column1-Body1">
                        <p>
                            <img src="../../Resources/Images/Common/note.png" />
                        </p>
                    </td>
                    <td class="TableStyle-NoteTable_Blue_DoNotEdit-BodyA-Column2-Body1"><span class="AllNoteStyles">TIP: </span>
                        <p oldrole="para">The environmental variables of the host are automatically imported and can be used as global variables.</p>
                    </td>
                </tr>
            </tbody>
        </table>
        <h6 name="example-global-variables" oldrole="example">Example: Using global variables</h6>
        <p oldrole="para">For example, if an application is creating multiple log files in a directory, you can store the path in a global variable, and use it in your source definitions.</p><pre class="Code" oldrole="synopsis">@define mypath "/opt/myapp/logs"
        source s_myapp_1 { file("`mypath`/access.log" follow-freq(1)); };
        source s_myapp_2 { file("`mypath`/error.log" follow-freq(1)); };
        source s_myapp_3 { file("`mypath`/debug.log" follow-freq(1)); };</pre>
        <p oldrole="para">The <MadCap:variable name="General.abbrev"></MadCap:variable> application will interpret this as:</p><pre class="Code" oldrole="synopsis">@define mypath "/opt/myapp/logs"
        source s_myapp_1 { file("/opt/myapp/logs/access.log" follow-freq(1)); };
        source s_myapp_2 { file("/opt/myapp/logs/error.log" follow-freq(1)); };
        source s_myapp_3 { file("/opt/myapp/logs/debug.log" follow-freq(1)); };</pre>
        <!-- FIXME add an example that uses escaping -->
        <h2 name="logchksign">Logging configuration changes</h2>
        <MadCap:keyword term="syslog-ng.conf:['fingerprint']">
        </MadCap:keyword>
        <MadCap:keyword term="configuration file:['detecting changes']">
        </MadCap:keyword>
        <MadCap:keyword term="logchksign">
        </MadCap:keyword>
        <p oldrole="para">Every time syslog-ng is started, or its configuration is reloaded, it automatically logs the SHA-1 fingerprint of its configuration file using the <span class="Code" oldrole="parameter">internal()</span> message source. That way any modification of the configuration of your syslog-ng clients is visible in the central logs. Note that the log message does not contain the exact change, nor can the configuration file be retrieved from the fingerprint. Only the fact of the configuration change can be detected.</p>
        <table cellspacing="0" class="TableStyle-NoteTable_Blue_DoNotEdit" oldrole="note" style="width: 100%;mc-table-style: url('../../Resources/TableStyles/NoteTable_Blue_DoNotEdit.css');">
            <col class="TableStyle-NoteTable_Blue_DoNotEdit-Column-Column1" style="width: 0.3in;">
            </col>
            <col class="TableStyle-NoteTable_Blue_DoNotEdit-Column-Column2">
            </col>
            <tbody>
                <tr class="TableStyle-NoteTable_Blue_DoNotEdit-Body-Body1">
                    <td class="TableStyle-NoteTable_Blue_DoNotEdit-BodyB-Column1-Body1">
                        <p>
                            <img src="../../Resources/Images/Common/note.png" />
                        </p>
                    </td>
                    <td class="TableStyle-NoteTable_Blue_DoNotEdit-BodyA-Column2-Body1"><span class="AllNoteStyles">NOTE: </span>
                        <p oldrole="para">Modular configuration files that are included in the main configuration file of <MadCap:variable name="General.abbrev"></MadCap:variable> are included when the fingerprint is calculated. However, other external files (for example, scripts used in program sources or destinations) are excluded, therefore their modifications do not change the fingerprint.</p>
                    </td>
                </tr>
            </tbody>
        </table>
        <p oldrole="para">The fingerprint can be examined with the <b oldrole="command">logchksign</b> command-line application, which detects that the fingerprint was indeed generated by a syslog-ng application. Just paste the hashes from the log message after the logchksign command like in the following example:</p><pre class="Code" oldrole="synopsis">bin/logchksign "cfg-fingerprint='832ef664ff79df8afc66cd955c0c8aaa3c343f31', cfg-nonce-ndx='0', cfg-signature='785223cfa19ad52b855550be141b00306347b0a9'"</pre>
        <h2 name="modules">Modules in <MadCap:variable name="General.abbrev"></MadCap:variable></h2>
        <MadCap:keyword term="modules">
        </MadCap:keyword>
        <MadCap:keyword term="plugins{see}['modules']">
        </MadCap:keyword>
        <p oldrole="para">The <MadCap:variable name="General.abbrev"></MadCap:variable> application is modular, to increase its flexibility and also to simplify the development of additional modules. Most of the functionality of <MadCap:variable name="General.abbrev"></MadCap:variable> is in separate modules. That way it becomes also possible to finetune the resource requirements of <MadCap:variable name="General.abbrev"></MadCap:variable>, for example, by loading only the modules that are actually used in the configuration, or simply omitting modules that are not used but require large amount of memory.</p>
        <p oldrole="para">Each module contains one or more plugins, which add some functionality to <MadCap:variable name="General.abbrev"></MadCap:variable>, for example, a destination or a source driver.</p>
        <ul oldrole="itemizedlist">
            <li oldrole="listitem">
                <p oldrole="para">To display the list of available modules, execute the <b oldrole="command">syslog-ng --version</b> command.</p>
            </li>
            <li oldrole="listitem">
                <p oldrole="para">To the description of the available modules, execute the <b oldrole="command">syslog-ng --module-registry</b> command.</p>
            </li>
            <li oldrole="listitem">
                <p oldrole="para">To customize which modules are loaded automatically when <MadCap:variable name="General.abbrev"></MadCap:variable> is started, use the <b oldrole="command">--default-modules</b> command-line option of <MadCap:variable name="General.abbrev"></MadCap:variable>.</p>
            </li>
            <li oldrole="listitem">
                <p oldrole="para">To request loading a module from the <MadCap:variable name="General.abbrev"></MadCap:variable> configuration file, see <MadCap:xref href="chapter-configuration-file.htm#modules-loading"></MadCap:xref>.</p>
            </li>
        </ul>
        <p oldrole="para">For details on the command-line parameters of <MadCap:variable name="General.abbrev"></MadCap:variable> mentioned in the previous list, see the <MadCap:variable name="General.abbrev"></MadCap:variable> man page at <MadCap:xref href="#syslog-ng.8"></MadCap:xref>.</p>
        <h2 name="modules-loading">Loading modules</h2>
        <MadCap:keyword term="modules">
        </MadCap:keyword>
        <MadCap:keyword term="plugins{see}['modules']">
        </MadCap:keyword>
        <MadCap:keyword term="@module">
        </MadCap:keyword>
        <p oldrole="para">The <MadCap:variable name="General.product"></MadCap:variable> application loads every available module during startup<MadCap:conditionaltext MadCap:conditions="pe6">, except the <span class="Code" oldrole="parameter">snmp()</span> module. For details on using the <span class="Code" oldrole="parameter">snmp()</span> destination driver, see <MadCap:xref href="#configuring-destinations-snmp"></MadCap:xref></MadCap:conditionaltext>.</p>
        <p oldrole="para">To load a module that is not loaded automatically, include the following statement in the <MadCap:variable name="General.abbrev"></MadCap:variable> configuration file:</p><pre class="Code" oldrole="synopsis">@module &lt;module-name&gt;</pre>
        <p oldrole="para">Note the following points about the <span class="Code" oldrole="parameter">@module</span> statement:</p>
        <ul oldrole="itemizedlist">
            <li oldrole="listitem">
                <p oldrole="para">The <span class="Code" oldrole="parameter">@module</span> statement is a top-level statement, that is, it cannot be nested into any other statement. Usually it is used immediately after the <span class="Code" oldrole="parameter">@version</span> statement.</p>
            </li>
            <li oldrole="listitem">
                <p oldrole="para">Every <span class="Code" oldrole="parameter">@module</span> statement loads a single module: loading multiple modules requires a separate <span class="Code" oldrole="parameter">@module</span> statement for every module.</p>
            </li>
            <li oldrole="listitem">
                <p oldrole="para">In the configuration file, the <span class="Code" oldrole="parameter">@module</span> statement of a module must be earlier than the module is used.</p>
            </li>
        </ul>
        <table cellspacing="0" class="TableStyle-NoteTable_Blue_DoNotEdit" oldrole="note" style="width: 100%;mc-table-style: url('../../Resources/TableStyles/NoteTable_Blue_DoNotEdit.css');">
            <col class="TableStyle-NoteTable_Blue_DoNotEdit-Column-Column1" style="width: 0.3in;">
            </col>
            <col class="TableStyle-NoteTable_Blue_DoNotEdit-Column-Column2">
            </col>
            <tbody>
                <tr class="TableStyle-NoteTable_Blue_DoNotEdit-Body-Body1">
                    <td class="TableStyle-NoteTable_Blue_DoNotEdit-BodyB-Column1-Body1">
                        <p>
                            <img src="../../Resources/Images/Common/note.png" />
                        </p>
                    </td>
                    <td class="TableStyle-NoteTable_Blue_DoNotEdit-BodyA-Column2-Body1"><span class="AllNoteStyles">NOTE: </span>
                        <p oldrole="para">To disable loading every module automatically, set the <span class="Code" oldrole="parameter">autoload-compiled-modules</span> global variable to 0 in your configuration file:</p>
                        <MadCap:keyword term="autoload-compiled-modules">
                        </MadCap:keyword><pre class="Code" oldrole="synopsis">@define autoload-compiled-modules 0</pre>
                        <p oldrole="para">Note that in this case, you have to explicitly load the modules you want to use.</p>
                    </td>
                </tr>
            </tbody>
        </table>
        <h2 name="large-configs">Managing complex syslog-ng configurations</h2>
        <p oldrole="para">The following sections describe some methods that can be useful to simplify the management of large-scale syslog-ng installations.</p>
        <h2 name="including-config-files">Including configuration files</h2>
        <MadCap:keyword term="syslog-ng.conf:['includes']">
        </MadCap:keyword>
        <MadCap:keyword term="configuration file:['including other files']">
        </MadCap:keyword>
        <MadCap:keyword term="@include">
        </MadCap:keyword>
        <p oldrole="para">The syslog-ng application supports including external files in its configuration file, so parts of its configuration can be managed separately. To include the contents of a file in the syslog-ng configuration, use the following syntax:</p><pre class="Code" oldrole="synopsis">@include "&lt;path to filename&gt;"</pre>
        <table cellspacing="0" class="TableStyle-NoteTable_Blue_DoNotEdit" oldrole="note" style="width: 100%;mc-table-style: url('../../Resources/TableStyles/NoteTable_Blue_DoNotEdit.css');">
            <col class="TableStyle-NoteTable_Blue_DoNotEdit-Column-Column1" style="width: 0.3in;">
            </col>
            <col class="TableStyle-NoteTable_Blue_DoNotEdit-Column-Column2">
            </col>
            <tbody>
                <tr class="TableStyle-NoteTable_Blue_DoNotEdit-Body-Body1">
                    <td class="TableStyle-NoteTable_Blue_DoNotEdit-BodyB-Column1-Body1">
                        <p>
                            <img src="../../Resources/Images/Common/note.png" />
                        </p>
                    </td>
                    <td class="TableStyle-NoteTable_Blue_DoNotEdit-BodyA-Column2-Body1"><span class="AllNoteStyles">NOTE: </span>
                        <p oldrole="para">If you enter only the filename, <MadCap:variable name="General.abbrev"></MadCap:variable> will search for the file in the default directory: <span class="Code" oldrole="filename">/opt/syslog-ng/etc</span>. If <MadCap:variable name="General.abbrev"></MadCap:variable> has been installed to a different directory, use the full path instead.</p>
                    </td>
                </tr>
            </tbody>
        </table>
        <p oldrole="para">This imports the entire file into the configuration of <MadCap:variable name="General.abbrev"></MadCap:variable>, at the location of the include statement. The &lt;filename&gt; can be one of the following:</p>
        <ul oldrole="itemizedlist">
            <li oldrole="listitem">
                <p oldrole="para">A filename, optionally with full path. The filename (not the path) can include UNIX-style wildcard characters (<span class="Code" oldrole="userinput">*</span>, <span class="Code" oldrole="userinput">?</span>). When using wildcard characters, <MadCap:variable name="General.abbrev"></MadCap:variable> will include every matching file. For details on using wildcard characters, see <MadCap:xref href="chapter-manipulating-messages.htm#reference-regexp-glob"></MadCap:xref>.</p>
            </li>
            <li oldrole="listitem">
                <p oldrole="para">A directory. When including a directory, <MadCap:variable name="General.abbrev"></MadCap:variable> will try to include every file from the directory, except files beginning with a ~ (tilde) or a . (dot) character. Including a directory is not recursive. The files are included in alphabetic order, first files beginning with uppercase characters, then files beginning with lowercase characters. For example, if the directory contains the <span class="Code" oldrole="userinput">a.conf, B. conf, c.conf, D.conf</span> files, they will be included in the following order: <span class="Code" oldrole="userinput">B.conf, D. conf, a.conf, c.conf</span>.</p>
            </li>
        </ul>
        <p oldrole="para">When including configuration files, consider the following points:</p>
        <ul oldrole="itemizedlist">
            <li oldrole="listitem">
                <p oldrole="para">Defining an object twice is not allowed, unless you use the <span class="Code" oldrole="parameter">@define allow-config-dups 1</span> definition in the configuration file. If an object is defined twice (for example the original syslog-ng configuration file and the file imported into this configuration file both define the same option, source, or other object), then the object that is defined later in the configuration file will be effective. For example, if you set a global option at the beginning of the configuration file, and later include a file that defines the same option with a different value, then the option defined in the imported file will be used.</p>
            </li>
            <li oldrole="listitem">
                <p oldrole="para">Files can be embedded into each other: the included files can contain include statements as well, up to a maximum depth of 15 levels.</p>
            </li>
            <li oldrole="listitem">
                <p oldrole="para">You cannot include complete configuration files into each other, only configuration snippets can be included. This means that the included file cannot have a <span class="Code" oldrole="parameter">@version</span> statement.</p>
            </li>
            <li oldrole="listitem">
                <p oldrole="para">Include statements can only be used at top level of the configuration file. For example, the following is correct:</p><pre class="Code" oldrole="synopsis">@version: <MadCap:variable name="Version.techversion"></MadCap:variable>
@include "example.conf"</pre>
                <p oldrole="para">But the following is not:</p><pre class="Code" oldrole="synopsis">source s_example {
    @include "example.conf"
};</pre>
            </li>
        </ul>
        <table cellspacing="0" class="TableStyle-NoteTable_Yellow_DoNotEdit" oldrole="warning" style="width: 100%;mc-table-style: url('../../Resources/TableStyles/NoteTable_Yellow_DoNotEdit.css');">
            <col class="TableStyle-NoteTable_Yellow_DoNotEdit-Column-Column1" style="width: 0.3in;">
            </col>
            <col class="TableStyle-NoteTable_Yellow_DoNotEdit-Column-Column2">
            </col>
            <tbody>
                <tr class="TableStyle-NoteTable_Yellow_DoNotEdit-Body-Body1">
                    <td class="TableStyle-NoteTable_Yellow_DoNotEdit-BodyB-Column1-Body1">
                        <p>
                            <img src="../../Resources/Images/Common/caution.png" />
                        </p>
                    </td>
                    <td class="TableStyle-NoteTable_Yellow_DoNotEdit-BodyA-Column2-Body1"><span class="Yellow">Caution: </span>
                        <p oldrole="para">The syslog-ng application will not start if it cannot find a file that is to be included in its configuration. Always double-check the filenames, paths, and access rights when including configuration files, and use the <b oldrole="command">--syntax-only</b> command-line option to check your configuration.</p>
                    </td>
                </tr>
            </tbody>
        </table>
        <h2 name="config-blocks">Reusing configuration blocks</h2>
        <MadCap:keyword term="configuration snippets">
        </MadCap:keyword>
        <MadCap:keyword term="reusing snippets">
        </MadCap:keyword>
        <MadCap:keyword term="block">
        </MadCap:keyword>
        <p oldrole="para">To create a reusable configuration snippet and reuse parts of a configuration file, you have to define the block (for example, a source) once, and reference it later. (Such reusable blocks are sometimes called a Source Configuration Library, or SCL.) Any syslog-ng object can be a block. Use the following syntax to define a block:</p><pre class="Code" oldrole="synopsis">block type name() {&lt;contents of the block&gt;};</pre>
        <p oldrole="para">Type must be one of the following: <span class="Code" oldrole="parameter">destination</span>, <span class="Code" oldrole="parameter">filter</span>, <span class="Code" oldrole="parameter">log</span>, <span class="Code" oldrole="parameter">parser</span>, <span class="Code" oldrole="parameter">rewrite</span>, <span class="Code" oldrole="parameter">root</span>, <span class="Code" oldrole="parameter">source</span>. The <span class="Code" oldrole="parameter">root</span> blocks can be used in the "root" context of the configuration file, that is, outside any other statements.</p>
        <p oldrole="para">Blocks may be nested into each other, so for example a block can be built from other blocks. Blocks are somewhat similar to C++ templates.</p>
        <p oldrole="para">The type and name combination of each block must be unique, that is, two blocks can have the same name if their type is different.</p>
        <p oldrole="para">To use a block in your configuration file, you have to do two things:</p>
        <ul oldrole="itemizedlist">
            <li oldrole="listitem">
                <p oldrole="para">Include the file defining the block in the <span class="Code" oldrole="filename">syslog-ng.conf</span> file <MadCap:variable name="General.mdash"></MadCap:variable> or a file already included into <span class="Code" oldrole="filename">syslog-ng.conf</span>. Version <MadCap:conditionaltext MadCap:conditions="ose">3.7</MadCap:conditionaltext><MadCap:conditionaltext MadCap:conditions="pe">7.0</MadCap:conditionaltext> and newer automatically includes the <span class="Code" oldrole="filename">*.conf</span> files from the <span class="Code" oldrole="filename">&lt;directory-where-syslog-ng-is-installed&gt;/scl/*/</span> directories.</p>
            </li>
            <li oldrole="listitem">
                <p oldrole="para">Reference the name of the block in your configuration file. This will insert the block into your configuration. For example, to use a block called <span class="Code" oldrole="userinput">myblock</span>, include the following line in your configuration:</p><pre class="Code" oldrole="synopsis">myblock()</pre>
                <p oldrole="para">Blocks may have parameters, but even if they do not, the reference must include opening and closing parentheses like in the previous example.</p>
            </li>
        </ul>
        <p oldrole="para">The contents of the block will be inserted into the configuration when <MadCap:variable name="General.abbrev"></MadCap:variable> is started or reloaded.</p>
        <h6 name="example-configuration-block" oldrole="example">Example: Reusing configuration blocks</h6>
        <p oldrole="para">Suppose you are running an application on your hosts that logs into the <span class="Code" oldrole="filename">/opt/var/myapplication.log</span> file. Create a file (for example, <span class="Code" oldrole="filename">myblocks.conf</span>) that stores a source describing this file and how it should be read:</p><pre class="Code" oldrole="synopsis">block source myappsource() {
        file("/opt/var/myapplication.log" follow-freq(1) default-facility(syslog)); };</pre>
        <p oldrole="para">Include this file in your main syslog-ng configuration file, reference the block, and use it in a logpath:</p><pre class="Code" oldrole="synopsis">@version: <MadCap:variable name="Version.techversion"></MadCap:variable>
@include "&lt;correct/path&gt;/myblocks.conf"
source s_myappsource { myappsource(); };
...
log { source(s_myappsource); destination(...); };</pre>
        <p oldrole="para">To define a block that defines more than one object, use <span class="Code" oldrole="parameter">root</span> as the type of the block, and reference the block from the main part of the <MadCap:variable name="General.abbrev"></MadCap:variable> configuration file.</p>
        <h6 name="example-configuration-block-root" oldrole="example">Example: Defining blocks with multiple elements</h6>
        <MadCap:keyword term="root">
        </MadCap:keyword>
        <MadCap:keyword term="root">
        </MadCap:keyword>
        <p oldrole="para">The following example defines a source, a destination, and a log path to connect them.</p><pre class="Code" oldrole="synopsis">block root mylogs() {
        source s_file { file("/var/log/mylogs.log" follow-freq(1)); };
        destination d_local { file("/var/log/messages"); };
        log { source(s_file); destination(d_local); };
};</pre>
        <table cellspacing="0" class="TableStyle-NoteTable_Blue_DoNotEdit" oldrole="tip" style="width: 100%;mc-table-style: url('../../Resources/TableStyles/NoteTable_Blue_DoNotEdit.css');">
            <col class="TableStyle-NoteTable_Blue_DoNotEdit-Column-Column1" style="width: 0.3in;">
            </col>
            <col class="TableStyle-NoteTable_Blue_DoNotEdit-Column-Column2">
            </col>
            <tbody>
                <tr class="TableStyle-NoteTable_Blue_DoNotEdit-Body-Body1">
                    <td class="TableStyle-NoteTable_Blue_DoNotEdit-BodyB-Column1-Body1">
                        <p>
                            <img src="../../Resources/Images/Common/note.png" />
                        </p>
                    </td>
                    <td class="TableStyle-NoteTable_Blue_DoNotEdit-BodyA-Column2-Body1"><span class="AllNoteStyles">TIP: </span>
                        <p oldrole="para">Since the block is inserted into the <MadCap:variable name="General.abbrev"></MadCap:variable> configuration when <MadCap:variable name="General.abbrev"></MadCap:variable> is started, the block can be generated dynamically using an external script if needed. This is useful when you are running <MadCap:variable name="General.abbrev"></MadCap:variable> on different hosts and you want to keep the main configuration identical.</p>
                        <p oldrole="para">If you want to reuse more than a single configuration object, for example, a logpath and the definitions of its sources and destinations, use the include feature to reuse the entire snippet. For details, see <MadCap:xref href="chapter-configuration-file.htm#including-config-files"></MadCap:xref>.</p>
                    </td>
                </tr>
            </tbody>
        </table>
        <h2 name="config-blocks-arguments">Passing arguments to configuration blocks</h2>
        <MadCap:keyword term="block arguments">
        </MadCap:keyword>
        <MadCap:keyword term="configuration snippets:['block arguments']">
        </MadCap:keyword>
        <p oldrole="para">Configuration blocks can receive arguments as well. The parameters the block can receive must be specified when the block is defined, using the following syntax:</p><pre class="Code" oldrole="synopsis">block type block_name(argument1(&lt;default-value-of-the-argument&gt;) argument2(&lt;default-value-of-the-argument&gt;) argument3())</pre>
        <p oldrole="para">If an argument does not have a default value, use empty parentheses after the name of the argument. To refer the value of the argument in the block, use the name of the argument between backticks (for example, <span class="Code" oldrole="userinput">`argument1`</span>).</p>
        <h6 oldrole="example">Example: Passing arguments to blocks</h6>
        <p oldrole="para">The following sample defines a file source block, which can receive the name of the file as a parameter. If no parameter is set, it reads messages from the <span class="Code" oldrole="filename">/var/log/messages</span> file.</p><pre class="Code" oldrole="synopsis">block source s_logfile (filename("messages")) {
  file("/var/log/`filename`" );
};

source s_example {
  s_logfile(filename("logfile.log"));
};</pre>
        <MadCap:keyword term="block arguments:['dynamical']">
        </MadCap:keyword>
        <MadCap:keyword term="dynamical block arguments">
        </MadCap:keyword>
        <MadCap:keyword term="configuration snippets:['dynamical block arguments']">
        </MadCap:keyword>
        <p oldrole="para">If you reference the block with more arguments then specified in its definition, you can use these additional arguments as a single argument-list within the block. That way, you can use a variable number of optional arguments in your block. This can be useful when passing arguments to a template, or optional arguments to an underlying driver. To reference this argument-list, insert <span class="Code" oldrole="userinput">`__VARARGS__`</span> to the place in the block where you want to insert the argument-list. Note that you can use this only once in a block. The following definition extends the logfile block from the previous example, and passes the optional arguments (<span class="Code" oldrole="userinput">follow-freq(1) flags(no-parse)</span>) to the <span class="Code" oldrole="userinput">file()</span> source.</p><pre class="Code" oldrole="synopsis">block source s_logfile (filename("messages")) {
  file("/var/log/`filename`" `__VARARGS__`);
};

source s_example {
  s_logfile(filename("logfile.log") follow-freq(1) flags(no-parse));
};</pre>
        <h6 condition="ose" oldrole="example">Example: Using arguments in blocks</h6>
        <p oldrole="para">The following example is the code of the <a href="configuring-source-pacct.htm"><span class="Code" oldrole="parameter">pacct()</span> source driver</a>, which is actually a block that can optionally receive two arguments.</p><pre class="Code" oldrole="synopsis">block source pacct(file("/var/log/account/pacct") follow-freq(1)) {
@module pacctformat
        file("`file`" follow-freq(`follow-freq`) format("pacct") tags(".pacct") `__VARARGS__`);
};</pre>
        <MadCap:snippetBlock src="generating-configuration-blocks.htm">
        </MadCap:snippetBlock>
    </body>
</html>