<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
    <head>
        <meta name="description" content="" />
    </head>
    <body name="syslog-ng-udp-message-loss" oldrole="section">
        <h1 name="syslog-ng-udp-message-loss">Resolving UDP message loss problems</h1>
        <p oldrole="para">Even if UDP is not a reliable protocol, and message loss can not be completely avoided, there are many ways to improve the situation. If you only have a few incoming UDP messages, you might not need any or all of these safe guards. However, as soon as you expect higher UDP traffic or burst of UDP packages, it is definitely worth implementing them.</p>
        <h6 oldrole="simplesect">Collect messages close to the source</h6>
        <p oldrole="para">UDP packages easily get lost if they have to travel through switches and routers. This kind of loss is difficult to detect, unless you can count the number of messages both on the sending and receiving side. To avoid message loss, install a syslog-ng relay collecting UDP messages as close as possible to the log source, ideally on the same switch or at least on the same subnetwork. Forward the logs to your central log server using a more reliable protocols, such as TCP<MadCap:conditionaltext MadCap:conditions="syslogngPE.pe"> or <MadCap:variable name="syslogngPEVariables.RLTPUppercase" /></MadCap:conditionaltext>.</p>
        <h6 oldrole="simplesect">Use the right network card and network driver</h6>
        <p oldrole="para">Some network cards handle high load better than others. In high traffic environments it is worth using server class network cards that can off-load many of the tasks. The same hardware can sometimes be used with different drivers, so select the driver that suits your needs best.</p>
        <p oldrole="para">To generate syslog traffic for stress testing your environment, use <b oldrole="command">loggen</b> (a tool bundled with syslog-ng). To check for dropped packages at hardware level, use <b oldrole="command">ifconfig</b> or <b oldrole="command">ethtool</b>.</p>
        <h6 oldrole="simplesect">Use physical machines instead of virtual ones</h6>
        <p oldrole="para">Full hardware virtualization, for example VMware can degrade performance, especially during hardware access like high speed networking. In some situations, using the right network driver inside the virtual machine can resolve this problem. On a loaded host machine even the right network driver will not solve these issues, therefore it is better to move log collection to a physical machine.</p>
        <h6 oldrole="simplesect">Use large buffers in kernel</h6>
        <p oldrole="para">If syslog-ng cannot read the messages fast enough from the UDP socket, the kernel receive buffers will start to fill and after the configured limit has been reached, the kernel will start discarding messages. In this case, it is necessary to adjust the buffer size accordingly. To raise the size of the kernel receive buffers, use the <b oldrole="command">sysctl</b> command to tune the <span class="Code" oldrole="parameter">net.core.rmem_max</span> parameter. Next, raise the size of the <span class="Code" oldrole="parameter">so-rcvbuf</span> option of the syslog-ng source definition as well, so that syslog-ng is capable of utilizing the larger kernel receive buffers. In a high traffic environment as high as 256MB might be necessary:</p>
        <p oldrole="para"><b oldrole="command">sysctl -w net.core.rmem_max=268435456</b>
        </p>
        <p oldrole="para">Enter the value in bytes. In the example above, 256*1024*1024=<span class="Code" oldrole="userinput">268435456</span> bytes. As a rule of thumb, this buffer size should be enough to accommodate incoming peak message rate for at least one second.</p>
        <table cellspacing="0" class="TableStyle-NoteTable_Yellow_DoNotEdit" oldrole="warning" style="width: 100%;mc-table-style: url('../../Resources/TableStyles/NoteTable_Yellow_DoNotEdit.css');">
            <col class="TableStyle-NoteTable_Yellow_DoNotEdit-Column-Column1" style="width: 0.3in;">
            </col>
            <col class="TableStyle-NoteTable_Yellow_DoNotEdit-Column-Column2">
            </col>
            <tbody>
                <tr class="TableStyle-NoteTable_Yellow_DoNotEdit-Body-Body1">
                    <td class="TableStyle-NoteTable_Yellow_DoNotEdit-BodyB-Column1-Body1">
                        <p>
                            <img src="../../Resources/Images/Common/caution.png" />
                        </p>
                    </td>
                    <td class="TableStyle-NoteTable_Yellow_DoNotEdit-BodyA-Column2-Body1"><span class="Yellow">Caution: </span>
                        <p oldrole="para">Any issue causing the loss of buffer content can result in higher message loss because of the higher buffer size. To minimize risk, it is important to determine the required buffer size instead of using a buffer that is higher than what is absolutely necessary.</p>
                    </td>
                </tr>
            </tbody>
        </table>
        <p oldrole="para">To monitor packet loss, use the following command:</p>
        <p oldrole="para"><b oldrole="command">netstat -su | grep "receive errors"</b>
        </p>
        <h6 oldrole="simplesect">Tuning syslog-ng for UDP</h6>
        <p oldrole="para">There are several configuration possibilities in syslog-ng that are related to using UDP protocol. To be able to handle message bursts, increase the value of the <span class="Code" oldrole="parameter">log_fifo_size()</span> option. To match the value configured for <b oldrole="command">net.core.rmem_max</b> in the previous step, increase the value of the <span class="Code" oldrole="parameter">so-rcvbuf()</span> accordingly.</p>
        <p oldrole="para">Flow control in syslog-ng slows down message reception if the destination slowed down for some reason. This works fine when messages are coming from TCP sources, as the sender side will notice slower reception and send messages at a lower rate. UDP, as a stateless protocol cannot handle this situation, the sender side will never notice that the receiving end slowed down and this will result in immediate message loss. Therefore in case of UDP sources, do not enable flow control for the destination.</p>
        <p oldrole="para">When you use a syslog-ng Store Box as the central logserver, flow-control is always applied to the log paths where messages are written into logspaces in order to avoid message loss. Therefore, log processing may slow down if logs are massively searched by dozens of users (this is similar to the example described in the “Problems” section above). Contrary to the highly configurable syslog-ng PE, you do not have the ability to fine-tune the low level OS level buffers underneath the syslog-ng Store Box log management application. Therefore, you may turn the UDP-based log collection into TCP-based already on a lower message rate.</p>
        <p oldrole="para">The UDP source driver in syslog-ng is not multi-threaded. A single UDP source runs only in a single thread on a single CPU core. If you have a high message rate and multiple CPU cores, define multiple UDP sources in your syslog-ng configuration. This way load is distributed among multiple CPU cores, ensuring that CPU does not become a bottleneck. Still in this case, if the messages received from several UDP sources are written into the very same file, the destination side can become a bottleneck.</p>
        <p oldrole="para">The consequence is that UDP-based collection always comes with a risk of message loss. The possibility of losing messages is different in each environment, therefore the situation might be examined in all cases in order to select the right safe guards that are sufficient to eliminate the risk of losing messages.</p>
    </body>
</html>