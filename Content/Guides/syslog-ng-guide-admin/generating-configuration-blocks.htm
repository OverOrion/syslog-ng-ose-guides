<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
    <head>
        <meta name="description" content="" />
    </head>
    <body name="generating-configuration-blocks">
        <h1 name="generating-configuration-blocks">Generating configuration blocks from a script</h1>
        <MadCap:keyword term="dynamic configuration">
        </MadCap:keyword>
        <MadCap:keyword term="confgen">
        </MadCap:keyword>
        <MadCap:keyword term="configuration files:['dynamic elements']">
        </MadCap:keyword>
        <div>
            <h6>Purpose:</h6>
            <p>The <MadCap:variable name="General.abbrev"></MadCap:variable> application can automatically execute scripts when it is started, and can include the output of such script in the configuration file. To create and use a script that generates a part of the <MadCap:variable name="General.abbrev"></MadCap:variable> configuration file (actually, a configuration block), complete the following steps. The steps include examples for collecting Apache access log files (<span class="Code">access.log</span>) from subdirectories, but you can create any script that creates a valid <MadCap:variable name="General.abbrev"></MadCap:variable> configuration snippet.</p>
        </div>
        <div>
            <h6>Steps:</h6>
            <ol>
                <li>
                    <p>Navigate to the directory where you have installed <MadCap:variable name="General.abbrev"></MadCap:variable> (for example, <span class="Code" oldrole="userinput">/opt/syslog-ng/share/include/scl/</span>), and create a new directory, for example, <span class="Code" oldrole="userinput">apache-access-logs</span>. The name of the directory will be used in the <MadCap:variable name="General.abbrev"></MadCap:variable> configuration file as well, so use a descriptive name.</p>
                </li>
                <li>
                    <p>Create a file called <span class="Code">plugin.conf</span> in this new directory.</p>
                </li>
                <li>
                    <p>Edit the <span class="Code">plugin.conf</span> file and add the following line:</p><pre>@module confgen context(source) name(&lt;directory-name&gt;) exec("`scl-root`/&lt;directory-name&gt;/&lt;my-script&gt;")</pre>
                    <p>Replace <span class="Code" oldrole="userinput">&lt;directory-name&gt;</span> with the name of the directory (for example, <span class="Code" oldrole="userinput">apache-access-logs</span>), and <span class="Code" oldrole="userinput">&lt;my-script&gt;</span> with the filename of your script (for example, <span class="Code" oldrole="userinput">apache-access-logs.sh</span>). You can reference the script in your <MadCap:variable name="General.abbrev"></MadCap:variable> configuration file as a configuration block using the value <span class="Code" oldrole="parameter">name</span> option.</p>
                    <p>The <span class="Code" oldrole="parameter">context</span> option determines the type of the configuration snippet that the script generates, and must be one of the following: <span class="Code" oldrole="parameter">destination</span>, <span class="Code" oldrole="parameter">filter</span>, <span class="Code" oldrole="parameter">log</span>, <span class="Code" oldrole="parameter">parser</span>, <span class="Code" oldrole="parameter">rewrite</span>, <span class="Code" oldrole="parameter">root</span>, <span class="Code" oldrole="parameter">source</span>. The <span class="Code" oldrole="parameter">root</span> blocks can be used in the "root" context of the configuration file, that is, outside any other statements. In the example, <span class="Code" oldrole="userinput">context(source)</span> means that the output of the script will be used within a source statement.</p>
                    <p>You can pass parameters to the script. In the script these parameters are available as environment variables, and have the <span class="Code">confgen_</span> prefix. For example, passing the <span class="Code">--myparameter</span> parameter becomes available in the script as the <span class="Code">confgen_myparameter</span> environment variable.</p>
                </li>
                <li>
                    <p>Write a script that generates the output you need, and formats it to a configuration snippet that <MadCap:variable name="General.abbrev"></MadCap:variable> can use. The filename of the script must match with the filename used in <span class="Code">plugin.conf</span>, for example, <span class="Code" oldrole="userinput">apache-access-logs.sh</span>.</p>
                    <p>The following example checks the <span class="Code">/var/log/apache2/</span> directory and its subdirectories, and creates a source driver for every directory that contains an <span class="Code">access.log</span> file.</p><pre>#!/bin/bash
for i in `find /var/log/apache2/ -type d`; do
    echo "file(\"$i/access.log\" flags(no-parse) program-override(\"apache2\"));";
done;</pre>
                    <p>The script generates an output similar to this one, where <span class="Code" oldrole="userinput">service*</span> is the actual name of a subdirectory:</p><pre>file("/var/log/apache2/service1/access.log" flags(no-parse) program-override("apache2"));
file("/var/log/apache2/service2/access.log" flags(no-parse) program-override("apache2"));
</pre>
                </li>
                <li>
                    <p>Include the <span class="Code">plugin.conf</span> file in the <span class="Code">syslog-ng.conf</span> file — or a file already included into <span class="Code">syslog-ng.conf</span>. Version <MadCap:conditionaltext MadCap:conditions="General.OSE">3.7</MadCap:conditionaltext> and newer automatically includes the <span class="Code">*.conf</span> files from the <span class="Code">&lt;directory-where-syslog-ng-is-installed&gt;/scl/*/</span> directories. For details on including configuration files, see <MadCap:xref href="including-config-files.htm"><span style="color: #04aada;" class="mcFormatColor">Including configuration files</span></MadCap:xref>.</p>
                </li>
                <li>
                    <p>Add the block you defined in the <span class="Code">plugin.conf</span> file to your <MadCap:variable name="General.abbrev"></MadCap:variable> configuration file. You can reference the block using the value of the <span class="Code" oldrole="parameter">name</span> option from the <span class="Code">plugin.conf</span> file, followed by parentheses, for example, <span class="Code" oldrole="userinput">apache-access-logs()</span>. Make sure to use the block in the appropriate context of the configuration file, for example, within a source statement if the value of the <span class="Code" oldrole="parameter">context</span> option in the <span class="Code">plugin.conf</span> file is source.</p><pre>@include "scl.conf"
...
source s_apache {
    file("/var/log/apache2/access.log" flags(no-parse) program-override("apache2"));
    file("/var/log/apache2/error.log" flags(no-parse) program-override("apache2"));
    file("/var/log/apache2/ssl.log" flags(no-parse) program-override("apache2"));
    apache-access-logs();
};

log {
    source(s_apache); destination(d_central);
};
...</pre>
                </li>
                <li>
                    <p>Check if your modified <MadCap:variable name="General.abbrev"></MadCap:variable> configuration file is syntactically correct using the <span class="Code" oldrole="command">syslog-ng --syntax-only</span> command.</p>
                </li>
                <li>
                    <p>If your modified configuration is syntactically correct, load the new configuration file using the <span class="Code" oldrole="command">syslog-ng-ctl reload</span> command.</p>
                </li>
            </ol>
        </div>
    </body>
</html>