<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
    <head>
        <meta name="description" content="" />
    </head>
    <body name="config-global-variables">
        <h1 name="config-global-variables">Global and environmental variables</h1>
        <MadCap:keyword term="syslog-ng.conf:['global variables']">
        </MadCap:keyword>
        <MadCap:keyword term="syslog-ng.conf:['environmental variables']">
        </MadCap:keyword>
        <MadCap:keyword term="environmental variables">
        </MadCap:keyword>
        <MadCap:keyword term="global variables">
        </MadCap:keyword>
        <MadCap:keyword term="@define">
        </MadCap:keyword>
        <p>You can define global variables in the configuration file. Global variables are actually <span class="Code" oldrole="userinput">name-value</span> pairs. When syslog-ng processes the configuration file during startup, it automatically replaces <span class="Code" oldrole="userinput">`name`</span> with <span class="Code" oldrole="userinput">value</span>. To define a global variable, use the following syntax:</p><pre>@define name "value"</pre>
        <p>The value can be any string, but special characters must be escaped (for details, see <MadCap:xref href="regular-expressions.htm" />). To use the variable, insert the name of the variable enclosed between backticks (<span class="Code" oldrole="userinput">`</span>, similarly to using variables in Linux or UNIX shells) anywhere in the configuration file. If backticks are meant literally, repeat the backticks to escape them. For example, <span class="Code" oldrole="userinput">``not-substituted-value``</span>.</p>
        <p>The value of the global variable can be also specified using the following methods:</p>
        <ul>
            <li>
                <p>Without any quotes, as long as the value does not contain any spaces or special characters. In other word, it contains only the following characters: <span class="Code" oldrole="userinput">a-zA-Z0-9_.</span>.</p>
            </li>
            <li>
                <p>Between apostrophes, in case the value does not contain apostrophes.</p>
            </li>
            <li>
                <p>Between double quotes, in which case special characters must be escaped using backslashes (<span class="Code" oldrole="userinput">\</span>).</p>
            </li>
        </ul>
        <div class="Note">
            <p class="Hyphenation"><span class="AllNoteStyles">TIP:</span> The environmental variables of the host are automatically imported and can be used as global variables.</p>
            <p>In <MadCap:variable name="General.abbrev" /> <MadCap:conditionaltext MadCap:conditions="General.PE">7.0.18</MadCap:conditionaltext><MadCap:conditionaltext MadCap:conditions="General.OSE">3.24</MadCap:conditionaltext> and later, the location of the syslog-ng configuration file is available as the <span class="Code">`syslog-ng-sysconfdir`</span> variable.</p>
        </div>
        <div class="Example">
            <h6 name="example-global-variables"><a name="example-global-variables"></a>Example: Using global variables</h6>
            <p>For example, if an application is creating multiple log files in a directory, you can store the path in a global variable, and use it in your source definitions.</p><pre>@define mypath "/opt/myapp/logs"
source s_myapp_1 {
    file("`mypath`/access.log" follow-freq(1));
};
source s_myapp_2 {
    file("`mypath`/error.log" follow-freq(1));
};
source s_myapp_3 {
    file("`mypath`/debug.log" follow-freq(1));
};</pre>
            <p>The <MadCap:variable name="General.abbrev"></MadCap:variable> application will interpret this as:</p><pre>@define mypath "/opt/myapp/logs"
source s_myapp_1 {
    file("/opt/myapp/logs/access.log" follow-freq(1));
};
source s_myapp_2 {
    file("/opt/myapp/logs/error.log" follow-freq(1));
};
source s_myapp_3 {
    file("/opt/myapp/logs/debug.log" follow-freq(1));
};</pre>
        </div>
    </body>
</html>