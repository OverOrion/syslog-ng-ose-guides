<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
    <head>
        <meta name="description" content="" />
    </head>
    <body name="patterndb-filters" oldrole="section">
        <h1 name="patterndb-filters"><a name="patterndb-filters"></a>Using parser results in filters and templates</h1>
        <MadCap:keyword term="pattern database:['using the results']">
        </MadCap:keyword>
        <MadCap:keyword term="message filtering:['using parsers']">
        </MadCap:keyword>
        <MadCap:keyword term="parsing messages:['filtering parsed messages']">
        </MadCap:keyword>
        <MadCap:keyword term="parsers">
        </MadCap:keyword>
        <MadCap:keyword term="message parsing">
        </MadCap:keyword>
        <MadCap:keyword term="parsing messages">
        </MadCap:keyword>
        <MadCap:keyword term="pattern database">
        </MadCap:keyword>
        <MadCap:keyword term="classifying messages:['filtering']">
        </MadCap:keyword>
        <MadCap:keyword term="message classification">
        </MadCap:keyword>
        <p>The results of message classification and parsing can be used in custom filters and templates, for example, in file and database templates. The following built-in macros allow you to use the results of the classification:</p>
        <ul oldrole="itemizedlist">
            <li oldrole="listitem">
                <p>The <span class="Code" oldrole="parameter">.classifier.class</span> macro contains the class assigned to the message (for example violation, security, or unknown).</p>
            </li>
            <li oldrole="listitem">
                <p>The <span class="Code" oldrole="parameter">.classifier.rule_id</span> macro contains the identifier of the message pattern that matched the message.</p>
            </li>
            <li oldrole="listitem">
                <p>The <span class="Code" oldrole="parameter">.classifier.context_id</span> macro contains the identifier of the context for messages that were correlated. For details on correlating messages, see <MadCap:xref href="patterndb-correlation.htm#patterndb-correlation"><span style="color: #04aada;" class="mcFormatColor">Correlating log messages using pattern databases</span></MadCap:xref>.</p>
            </li>
        </ul>
        <MadCap:keyword term="filtering:['on message class']">
        </MadCap:keyword>
        <MadCap:keyword term="filtering:['.classifier_class']">
        </MadCap:keyword>
        <div class="Example">
            <h6 oldrole="example">Example: Using classification results for filtering messages</h6>
            <p>To filter on a specific message class, create a filter that checks the <span class="Code" oldrole="parameter">.classifier_class</span> macro, and use this filter in a log statement.</p><pre class="Code" oldrole="synopsis">filter fi_class_violation {
                    match("violation"
                    value(".classifier.class")
                    type("string")
                    );
                    };</pre><pre class="Code" oldrole="synopsis">log {
                    source(s_all);
                    parser(pattern_db);
                    filter(fi_class_violation);
                    destination(di_class_violation);
                    };</pre>
            <p>Filtering on the <span class="Code" oldrole="parameter">unknown</span> class selects messages that did not match any rule of the pattern database. Routing these messages into a separate file allows you to periodically review new or unknown messages.</p>
            <p>To filter on messages matching a specific classification rule, create a filter that checks the <span class="Code" oldrole="parameter">.classifier.rule_id</span> macro. The unique identifier of the rule (for example <span class="Code" oldrole="userinput">e1e9c0d8-13bb-11de-8293-000c2922ed0a</span>) is the <span class="Code" oldrole="userinput">id</span> attribute of the rule in the XML database.</p><pre class="Code" oldrole="synopsis">filter fi_class_rule {
                    match("e1e9c0d8-13bb-11de-8293-000c2922ed0a"
                    value(".classifier.rule_id")
                    type("string")
                    );
                    };</pre>
        </div>
        <p>Pattern database rules can assign tags to messages. These tags can be used to select tagged messages using the <span class="Code" oldrole="parameter">tags()</span> filter function.</p>
        <MadCap:keyword term="tags()">
        </MadCap:keyword>
        <MadCap:snippetBlock src="../../shared/wnt/note-patterndb-class-tag.htm">
        </MadCap:snippetBlock>
        <p>The message-segments parsed by the pattern parsers can also be used as macros as well. To accomplish this, you have to add a name to the parser, and then you can use this name as a macro that refers to the parsed value of the message.</p>
        <div class="Example">
            <h6 oldrole="example">Example: Using pattern parsers as macros</h6>
            <p>For example, you want to parse messages of an application that look like <span class="Code" oldrole="userinput">"Transaction: &lt;type&gt;."</span>, where &lt;type&gt; is a string that has different values (for example refused, accepted, incomplete, and so on). To parse these messages, you can use the following pattern:</p><pre class="Code" oldrole="synopsis">'Transaction: @ESTRING::.@'</pre>
            <p>Here the @ESTRING@ parser parses the message until the next full stop character. To use the results in a filter or a filename template, include a name in the parser of the pattern, for example:</p><pre class="Code" oldrole="synopsis">'Transaction: @ESTRING:TRANSACTIONTYPE:.@'</pre>
            <p>After that, add a custom template to the log path that uses this template. For example, to select every <span class="Code" oldrole="userinput">accepted</span> transaction, use the following custom filter in the log path:</p><pre class="Code" oldrole="synopsis">match("accepted" value("TRANSACTIONTYPE"));</pre>
        </div>
        <table cellspacing="0" class="TableStyle-NoteTable_Blue_DoNotEdit" oldrole="note" style="width: 100%;mc-table-style: url('../../../Resources/TableStyles/NoteTable_Blue_DoNotEdit.css');">
            <col class="TableStyle-NoteTable_Blue_DoNotEdit-Column-Column1" style="width: 0.3in;">
            </col>
            <col class="TableStyle-NoteTable_Blue_DoNotEdit-Column-Column2">
            </col>
            <tbody>
                <tr class="TableStyle-NoteTable_Blue_DoNotEdit-Body-Body1">
                    <td class="TableStyle-NoteTable_Blue_DoNotEdit-BodyB-Column1-Body1">
                        <p>
                            <img src="../../../Resources/Images/Common/note.png" />
                        </p>
                    </td>
                    <td class="TableStyle-NoteTable_Blue_DoNotEdit-BodyA-Column2-Body1"><span class="AllNoteStyles">NOTE: </span>
                        <p>The above macros can be used in database columns and filename templates as well, if you create custom templates for the destination or logspace.</p>
                        <p>Use a consistent naming scheme for your macros, for example, <span class="Code" oldrole="userinput">APPLICATIONNAME_MACRONAME</span>.</p>
                    </td>
                </tr>
            </tbody>
        </table>
    </body>
</html>