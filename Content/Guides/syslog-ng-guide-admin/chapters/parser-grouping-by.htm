<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
    <head>
        <link href="../../../Resources/TableStyles/RuledTableWithHeading_DoNotEdit.css" rel="stylesheet" MadCap:stylesheetType="table" />
        <link href="../../../Resources/TableStyles/NoteTable_Yellow_DoNotEdit.css" rel="stylesheet" MadCap:stylesheetType="table" />
        <link href="../../../Resources/TableStyles/NoteTable_Blue_DoNotEdit.css" rel="stylesheet" MadCap:stylesheetType="table" />
    </head>
    <body name="grouping-by-parser" oldrole="section">
        <h1 name="grouping-by-parser"><a name="grouping-by-parser"></a>Correlating messages using the <span class="Code" oldrole="userinput">grouping-by()</span> parser</h1>
        <MadCap:keyword term="correlating messages">
        </MadCap:keyword>
        <MadCap:keyword term="correlate messages">
        </MadCap:keyword>
        <MadCap:keyword term="parsers:['correlating']">
        </MadCap:keyword>
        <MadCap:keyword term="parsers:['grouping-by()']">
        </MadCap:keyword>
        <p>The <MadCap:variable name="General.abbrev"></MadCap:variable> application can correlate log messages that match a set of filters. This works similarly to SQL GROUP BY statements. Alternatively, you can also correlate log messages using pattern databases. For details, see <MadCap:xref href="patterndb-correlation.htm#patterndb-correlation"><span style="color: #04aada;" class="mcFormatColor">Correlating log messages using pattern databases</span></MadCap:xref>.</p>
        <MadCap:snippetBlock src="../../shared/chunk/correlation-intro.htm">
        </MadCap:snippetBlock>
        <h6 oldrole="formalpara">How the grouping-by() parser works</h6><pre class="Code" oldrole="synopsis">
    +--------------------+
    |Incoming log message|
    +--------------------+
              |
              |
              |
              |
              V
    +-------------------------------------------+    No
    |Does it match key(), scope(), and where()? +----------&gt; Ignore message
    +-------------------------------------------+
              |
              |
              V
    Add message to context
              |
              |
              v                    No
    Is it a trigger() message or --------&gt; Wait until timeout() or a new message
    has the timeout() expired?
             +
             |
             |
             v                              No
    Does the context match having()? +-------------&gt; Close the context
            +                                         and do nothing
            |
            |
            v
    Inject the aggregate() log message and close the context
    </pre>
        <p>The <span class="Code" oldrole="parameter">grouping-by()</span> parser has three options that determine if a message is added to a context: <span class="Code" oldrole="parameter">scope()</span>, <span class="Code" oldrole="parameter">key()</span>, and <span class="Code" oldrole="parameter">where()</span>.</p>
        <ul oldrole="itemizedlist">
            <li oldrole="listitem">
                <p>The <span class="Code" oldrole="parameter">scope()</span> option acts as an early filter, selecting messages sent by the same process (<span class="Code" oldrole="userinput">${HOST}${PROGRAM}${PID}</span> is identical), application (<span class="Code" oldrole="userinput">${HOST}${PROGRAM}</span> is identical), or host.</p>
            </li>
            <li oldrole="listitem">
                <p>The <span class="Code" oldrole="parameter">key()</span> identifies the context the message belongs to. (The value of the key must be the same for every message of the context.)</p>
            </li>
            <li oldrole="listitem">
                <p>To use a filter to further limit the messages that are added to the context, you can use the <span class="Code" oldrole="parameter">where()</span> option.</p>
            </li>
        </ul>
        <p>The <span class="Code" oldrole="parameter">timeout()</span> option determines how long a context is stored, that is, how long <MadCap:variable name="General.abbrev"></MadCap:variable> waits for related messages to arrive. If the group has a specific log message that ends the context (for example, a logout message), you can specify it using the <span class="Code" oldrole="parameter">trigger()</span> option.</p>
        <p>When the context is closed, and the messages match the filter set in the <span class="Code" oldrole="parameter">having()</span> option (or the <span class="Code" oldrole="parameter">having()</span> option is not set), <MadCap:variable name="General.abbrev"></MadCap:variable> generates and sends the message set in the <span class="Code" oldrole="parameter">aggregate()</span> option.</p>
        <MadCap:snippetBlock src="../../shared/wnt/note-message-context.htm">
        </MadCap:snippetBlock>
        <div><h6 oldrole="formalpara">Declaration:</h6><pre class="Code" oldrole="synopsis">parser parser_name {
    grouping-by(
        key()
        having()
        aggregate()
        timeout()
    );
};</pre></div>
        <p>For the parser to work, you must set at least the following options: <span class="Code" oldrole="parameter">key()</span>, <span class="Code" oldrole="parameter">aggregate()</span>, and <span class="Code" oldrole="parameter">timeout()</span>.</p>
        <MadCap:snippetBlock src="../../shared/chunk/correlation-context-timeout.htm">
        </MadCap:snippetBlock>
        <div class="Example">
            <h6 MadCap:conditions="General.ose" oldrole="example">Example: Correlating Linux Audit logs</h6>
            <p>Linux audit logs tend to be broken into several log messages (generated as a list of lines). Usually, the related lines are close to each other in time, but multiple events can be logged at around the same time, which get mixed up in the output. The example below is the audit log for running <span class="Code" oldrole="command">ntpdate</span>:</p><pre class="Code" oldrole="synopsis">type=SYSCALL msg=audit(1440927434.124:40347): arch=c000003e syscall=59 success=yes exit=0 a0=7f121cef0b88 a1=7f121cef0c00 a2=7f121e690d98 a3=2 items=2 ppid=4312 pid=4347 auid=4294967295 uid=0 gid=0 euid=0 suid=0 fsuid=0 egid=0 sgid=0 fsgid=0 tty=(none) ses=4294967295 comm="ntpdate" exe="/usr/sbin/ntpdate" key=(null)
type=EXECVE msg=audit(1440927434.124:40347): argc=3 a0="/usr/sbin/ntpdate" a1="-s" a2="ntp.ubuntu.com"
type=CWD msg=audit(1440927434.124:40347):  cwd="/"
type=PATH msg=audit(1440927434.124:40347): item=0 name="/usr/sbin/ntpdate" inode=2006003 dev=08:01 mode=0100755 ouid=0 ogid=0 rdev=00:00 nametype=NORMAL
type=PATH msg=audit(1440927434.124:40347): item=1 name="/lib64/ld-linux-x86-64.so.2" inode=5243184 dev=08:01 mode=0100755 ouid=0 ogid=0 rdev=00:00 nametype=NORMAL
type=PROCTITLE msg=audit(1440927434.124:40347): proctitle=2F62696E2F7368002F7573722F7362696E2F6E7470646174652D64656269616E002D73</pre>
            <p>These lines are connected by their second field: <span class="Code" oldrole="userinput">msg=audit(1440927434.124:40347)</span>. You can parse such messages using the <a href="linux-audit-parser.htm">Linux Audit Parser of <MadCap:variable name="General.abbrev"></MadCap:variable></a>, and then use the parsed <span class="Code" oldrole="userinput">.auditd.msg</span> field to group the messages.</p><pre class="Code" oldrole="synopsis">parser auditd_groupingby {
    grouping-by(
        key(".auditd.msg")
        aggregate(
            value("MESSAGE" "$(format-json .auditd.*)")
            )
        timeout(10)
    );
};</pre>
        </div>
    </body>
</html>