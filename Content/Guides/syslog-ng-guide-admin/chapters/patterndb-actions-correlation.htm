<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
    <head>
        <meta name="description" content="" />
    </head>
    <body name="patterndb-actions-correlation">
        <h1 name="patterndb-actions-correlation">Actions and message correlation</h1>
        <MadCap:keyword term="actions:['message correlation']">
        </MadCap:keyword>
        <p>Certain features of generating messages can be used only if message correlation is used as well. For details on correlating messages, see <MadCap:xref href="patterndb-correlation.htm"><span style="color: #04aada;" class="mcFormatColor">Correlating log messages using pattern databases</span></MadCap:xref>.</p>
        <ul>
            <li>
                <p>The <MadCap:variable name="General.OSE"></MadCap:variable> application automatically fills the fields for the generated message based on the scope of the context, for example, the HOST and PROGRAM fields if the <span class="Code" oldrole="parameter">context-scope</span> is <span class="Code" oldrole="userinput">program</span>.</p>
            </li>
            <li>
                <p>When used together with message correlation, you can also refer to fields and values of earlier messages of the context by adding the <span class="Code" oldrole="userinput">@&lt;distance-of-referenced-message-from-the-current&gt;</span> suffix to the macro. For details, see <MadCap:xref href="referencing-previous-messages.htm"><span style="color: #04aada;" class="mcFormatColor">Referencing earlier messages of the context</span></MadCap:xref>.</p>
                <div class="Example">
                    <MadCap:snippetBlock src="../../shared/chunk/example-patterndb-referencing-earlier-values.htm">
                    </MadCap:snippetBlock>
                </div>
            </li>
            <li>
                <p>You can use the name-value pairs of other messages of the context. If you set the <span class="Code" oldrole="parameter">inherit-properties</span> attribute of the generated message to <span class="Code" oldrole="parameter">context</span>, <MadCap:variable name="General.OSE"></MadCap:variable> collects every name-value pair from each message stored in the context, and includes them in the generated message. This means that you can refer to a name-value pair without having to know which message of the context included it. If a name-value pair appears in multiple messages of the context, the value in the latest message will be used. To refer to an earlier value, use the <span class="Code" oldrole="userinput">@&lt;distance-of-referenced-message-from-the-current&gt;</span> suffix format.</p><pre>&lt;action&gt;
    &lt;message inherit-properties='context'&gt;</pre>
                <div class="Example"><a name="patterndb-inherit-properties"></a>
                    <h6 name="patterndb-inherit-properties">Example: Using the inherit-properties option</h6>
                    <p>For example, if <span class="Code" oldrole="parameter">inherit-properties</span> is set to <span class="Code" oldrole="userinput">context</span>, and you have a rule that collects SSH login and logout messages to the same context, you can use the following value to generate a message collecting the most important information form both messages, including the beginning and end date.</p><pre>&lt;value name="MESSAGE"&gt;An SSH session for ${SSH_USERNAME} from ${SSH_CLIENT_ADDRESS} closed. Session lasted from ${DATE}@2 to $DATE pid: $PID.&lt;/value&gt;</pre>
                    <p>The following is a detailed rule for this purpose.</p><pre>&lt;patterndb version='4' pub_date='2015-04-13'&gt;
    &lt;ruleset name='sshd' id='12345678'&gt;
        &lt;pattern&gt;sshd&lt;/pattern&gt;
            &lt;rules&gt;
                &lt;!-- The pattern database rule for the first log message --&gt;
                &lt;rule provider='me' id='12347598' class='system'
                    context-id="ssh-login-logout" context-timeout="86400"
                    context-scope="process"&gt;
                &lt;!-- Note the context-id that groups together the
                relevant messages, and the context-timeout value that
                determines how long a new message can be added to the
                context  --&gt;
                    &lt;patterns&gt;
                        &lt;pattern&gt;Accepted @ESTRING:SSH.AUTH_METHOD: @for @ESTRING:SSH_USERNAME: @from @ESTRING:SSH_CLIENT_ADDRESS: @port @ESTRING:: @@ANYSTRING:SSH_SERVICE@&lt;/pattern&gt;
                        &lt;!-- This is the actual pattern used to identify
                        the log message. The segments between the @
                        characters are parsers that recognize the variable
                        parts of the message - they can also be used as
                        macros.  --&gt;
                    &lt;/patterns&gt;
                &lt;/rule&gt;
                &lt;!-- The pattern database rule for the fourth log message --&gt;
                &lt;rule provider='me' id='12347599' class='system' context-id="ssh-login-logout" context-scope="process"&gt;
                    &lt;patterns&gt;
                         &lt;pattern&gt;pam_unix(sshd:session): session closed for user @ANYSTRING:SSH_USERNAME@&lt;/pattern&gt;
                    &lt;/patterns&gt;
                    &lt;actions&gt;
                        &lt;action&gt;
                            &lt;message inherit-properties='context'&gt;
                                &lt;values&gt;
                                    &lt;value name="MESSAGE"&gt;An SSH session for ${SSH_USERNAME} from ${SSH_CLIENT_ADDRESS} closed. Session lasted from ${DATE}@2 to $DATE pid: $PID.&lt;/value&gt;
                                    &lt;value name="TRIGGER"&gt;yes&lt;/value&gt;
                                    &lt;!-- This is the new log message
                                    that is generated when the logout
                                    message is received. The macros ending
                                    with @2 reference values of the
                                    previous message from the context. --&gt;
                                &lt;/values&gt;
                            &lt;/message&gt;
                        &lt;/action&gt;
                    &lt;/actions&gt;
                &lt;/rule&gt;
            &lt;/rules&gt;
    &lt;/ruleset&gt;
&lt;/patterndb&gt;</pre>
                </div>
            </li>
            <li>
                <p>It is possible to generate a message when the <span class="Code" oldrole="parameter">context-timeout</span> of the original message expires and no new message is added to the context during this time. To accomplish this, include the <span class="Code" oldrole="userinput">trigger="timeout"</span> attribute in the action element:</p><pre>&lt;action trigger="timeout"&gt;</pre>
                <div class="Example">
                    <h6 name="patterndb-timeout-action"><a name="patterndb-timeout-action"></a>Example: Sending alert when a client disappears</h6>
                    <p>The following example shows how to combine various features of <MadCap:variable name="General.OSE"></MadCap:variable> to send an email alert if a client stops sending messages.</p>
                    <ul>
                        <li>
                            <p>Configure your clients to send MARK messages periodically. It is enough to configure MARK messages for the destination that forwards your log messages to your <MadCap:variable name="General.OSE"></MadCap:variable> server (<span class="Code" oldrole="userinput">mark-mode(periodical)</span>).</p>
                        </li>
                        <li>
                            <p>On your <MadCap:variable name="General.OSE"></MadCap:variable> server, create a pattern database rule that matches on the incoming MARK messages. In the rule, set the <span class="Code" oldrole="parameter">context-scope</span> attribute to <span class="Code" oldrole="userinput">host</span>, and the <span class="Code" oldrole="parameter">context-timeout</span> attribute to a value that is higher than the <span class="Code" oldrole="parameter">mark-freq</span> value set on your clients (by default, <span class="Code" oldrole="userinput">mark-freq</span> is 1200 seconds, so set <span class="Code" oldrole="userinput">context-timeout</span> at least to 1500 seconds, but you might want to use a higher value, depending on your environment).</p>
                        </li>
                        <li>
                            <p>Add an action to this rule that sends you an email alert if the <span class="Code" oldrole="userinput">context-timeout</span> expires, and the server does not receive a new MARK message (<span class="Code" oldrole="userinput">&lt;action trigger="timeout"&gt;</span>).</p>
                        </li>
                        <li>
                            <p>On your <MadCap:variable name="General.OSE"></MadCap:variable> server, use the pattern database in the log path that handles incoming log messages.</p>
                        </li>
                    </ul>
                </div>
            </li>
        </ul>
    </body>
</html>