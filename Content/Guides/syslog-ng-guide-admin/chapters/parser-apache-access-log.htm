<?xml version="1.0" encoding="UTF-8"?>

<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd"><body condition="ose" name="apache-access-log-parser" oldrole="section">
<h1 condition="ose" name="apache-access-log-parser">The Apache Access Log Parser</h1>
<MadCap:keyword term="segmenting messages"></MadCap:keyword>
<MadCap:keyword term="Apache Access Log"></MadCap:keyword>
<MadCap:keyword term="apache"></MadCap:keyword>
<MadCap:keyword term="parsers:['apache-accesslog-parser']"></MadCap:keyword>
<MadCap:keyword term="parsers:['apache-access-log-parser']"></MadCap:keyword>
<p oldrole="para">The Apache Access Log Parser can parse the access log messages of the Apache HTTP Server. The <MadCap:variable name="General.abbrev"></MadCap:variable> application can separate these log messages to name-value pairs. For details on using value-pairs in <MadCap:variable name="General.abbrev"></MadCap:variable> see <MadCap:xref href="concepts-value-pairs.htm#concepts-value-pairs"></MadCap:xref>. The <span class="Code" oldrole="parameter">apache-accesslog-parser()</span> supports both the Common Log Format and the Combined Log Format of Apache (for details, see the <a href="https://httpd.apache.org/docs/2.4/logs.html#accesslog">Apache HTTP Server documentation</a>). The following is a sample log message:</p>
<pre class="Code" oldrole="synopsis">127.0.0.1 - frank [10/Oct/2000:13:55:36 -0700] "GET /apache_pb.gif HTTP/1.0" 200 2326</pre>
<p oldrole="para">The <MadCap:variable name="General.abbrev"></MadCap:variable> application extracts every field into name-value pairs, and adds the <span class="Code" oldrole="parameter">.apache.</span> prefix to the name of the field.</p>
<h6 oldrole="formalpara">Declaration:</h6>

<pre class="Code" oldrole="synopsis">parser parser_name {
    apache-accesslog-parser(
        prefix()
    );
};</pre>
<p oldrole="para">The parser extracts the following fields from the messages: <span class="Code" oldrole="userinput">clientip</span>, <span class="Code" oldrole="userinput">ident</span>, <span class="Code" oldrole="userinput">auth</span>, <span class="Code" oldrole="userinput">timestamp</span>, <span class="Code" oldrole="userinput">rawrequest</span>, <span class="Code" oldrole="userinput">response</span>, <span class="Code" oldrole="userinput">bytes</span>, <span class="Code" oldrole="userinput">referrer</span>, and <span class="Code" oldrole="userinput">agent</span>. The <span class="Code" oldrole="userinput">rawrequest</span> field is further segmented into the <span class="Code" oldrole="userinput">verb</span>, <span class="Code" oldrole="userinput">request</span>, and <span class="Code" oldrole="userinput">httpversion</span> fields. The <MadCap:variable name="General.abbrev"></MadCap:variable> <span class="Code" oldrole="parameter">apache-accesslog-parser()</span> parser uses the same naming convention as Logstash.</p>
<div class="Example">
<h6 oldrole="example">Example: Using the <span class="Code" oldrole="parameter">apache-accesslog-parser</span> parser</h6>
<p oldrole="para">In the following example, the source is a log file created by an Apache web server. The parser automatically inserts "<span class="Code" oldrole="userinput">.apache.</span>" prefix before all extracted name-value pairs. The destination is a file, that uses the <span class="Code" oldrole="parameter">format-json</span> template function. Every name-value pair that begins with a dot ("<span class="Code" oldrole="userinput">.</span>") character will be written to the file (<span class="Code" oldrole="userinput">dot-nv-pairs</span>). The log statement connects the source, the destination, and the parser.</p>
<pre class="Code" oldrole="synopsis">source s_apache {
    file(/var/log/access_log);
};

destination d_json {
    file("/tmp/test.json"
        template("$(format-json .apache.*)\n"));
};

log {
    source(s_apache);
    parser(apache-accesslog-parser())
    destination(d_json);
};</pre>
</div>
<p oldrole="para">To use this parser, the <span class="Code" oldrole="filename">scl.conf</span> file must be included in your <MadCap:variable name="General.abbrev"></MadCap:variable> configuration:</p>
<pre class="Code" oldrole="synopsis">@include "scl.conf"</pre>
<p oldrole="para">The <span class="Code" oldrole="parameter">apache-accesslog-parser()</span> is actually a reusable configuration snippet configured parse Apache access log messages. For details on using or writing such configuration snippets, see <MadCap:xref href="config-blocks.htm#config-blocks"></MadCap:xref>. You can find the source of this configuration snippet on <a href="https://github.com/balabit/syslog-ng/blob/master/scl/apache/apache.conf">GitHub</a>.</p>
<h2 name="apache-accesslog-options">Options of <span class="Code" oldrole="parameter">apache-accesslog-parser()</span> parsers</h2>
<p oldrole="para">The <span class="Code" oldrole="parameter">apache-accesslog-parser()</span> has the following options.</p>

<MadCap:snippetBlock src="../../shared/chunk/option-parser-prefix.htm"></MadCap:snippetBlock>
<MadCap:snippetBlock src="../../shared/chunk/para-macro-prefix-parser.htm"></MadCap:snippetBlock>
<p oldrole="para">By default, <span class="Code" oldrole="parameter">apache-accesslog-parser()</span> uses the <span class="Code" oldrole="userinput">.apache.</span> prefix. To modify it, use the following format:</p>
<pre class="Code" oldrole="synopsis">parser(apache-accesslog-parser(prefix(".myprefix"))</pre>

</body></html>
