<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
    <head>
        <meta name="description" content="" />
    </head>
    <body name="reference-patterndb-parsers" oldrole="section">
        <h1 name="reference-patterndb-parsers">Pattern parsers of <MadCap:variable name="General.abbrev"></MadCap:variable></h1>
        <p oldrole="para">The following parsers are available in <MadCap:variable name="General.abbrev"></MadCap:variable>.</p>
        <h6 name="patterndb-parser-anystring" oldrole="simplesect">@ANYSTRING@</h6>
        <MadCap:keyword term="@ANYSTRING@">
        </MadCap:keyword>
        <p oldrole="para">Parses everything to the end of the message, you can use it to collect everything that is not parsed specifically to a single macro. In that sense its behavior is similar to the <span class="Code" oldrole="parameter">greedy()</span> option of the CSV parser.</p>
        <h6 name="patterndb-parser-double" oldrole="simplesect">@DOUBLE@</h6>
        <p oldrole="para">An obsolete alias of the <span class="Code" oldrole="parameter">@FLOAT@</span> parser.</p>
        <h6 condition="ose" name="patterndb-parser-email" oldrole="simplesect">@EMAIL@</h6>
        <MadCap:keyword term="@EMAIL@">
        </MadCap:keyword>
        <p oldrole="para">This parser matches an e-mail address. The parameter is a set of characters to strip from the beginning and the end of the e-mail address. That way e-mail addresses enclosed between other characters can be matched easily (for example, <span class="Code" oldrole="parameter">&lt;user@example.com&gt;</span> or <span class="Code" oldrole="parameter">"user@example.com"</span>. Characters that are valid for a hostname are not stripped from the end of the hostname. This includes a trailing period if present.</p>
        <p oldrole="para">For example, the <span class="Code" oldrole="parameter">@EMAIL:email:"[&lt;]&gt;@</span> parser will match any of the following e-mail addresses: <span class="Code" oldrole="parameter">&lt;user@example.com&gt;</span>, <span class="Code" oldrole="parameter">[user@example.com]</span>, <span class="Code" oldrole="parameter">"user@example.com"</span>, and set the value of the <span class="Code" oldrole="parameter">email</span> macro to <span class="Code" oldrole="parameter">user@example.com</span>.</p>
        <h6 name="patterndb-parser-estring" oldrole="simplesect">@ESTRING@</h6>
        <MadCap:keyword term="@ESTRING@">
        </MadCap:keyword>
        <p oldrole="para">This parser has a required parameter that acts as the stopcharacter: the parser parses everything until it finds the stopcharacter. For example, to stop by the next <span class="Code" oldrole="userinput">"</span> (double quote) character, use <span class="Code" oldrole="userinput">@ESTRING::"@</span>. You can use the colon (<span class="Code" oldrole="userinput">:</span>) as stopcharacter as well, for example: <span class="Code" oldrole="userinput">@ESTRING:::@</span>. You can also specify a stopstring instead of a single character, for example, <span class="Code" oldrole="userinput">@ESTRING::stop_here.@</span>. The <span class="Code" oldrole="userinput">@</span> character cannot be a stopcharacter, nor can line-breaks or tabs.</p>
        <h6 name="patterndb-parser-float" oldrole="simplesect">@FLOAT@</h6>
        <MadCap:keyword term="@FLOAT@">
        </MadCap:keyword>
        <p oldrole="para">A floating-point number that may contain a dot (.) character. (Up to syslog-ng 3.1, the name of this parser was <span class="Code" oldrole="parameter">@DOUBLE@</span>.)</p>
        <h6 condition="ose" name="patterndb-parser-hostname" oldrole="simplesect">@HOSTNAME@</h6>
        <MadCap:keyword term="@HOSTNAME@">
        </MadCap:keyword>
        <p oldrole="para">Parses a generic hostname. The hostname may contain only alphanumeric characters (A-Z,a-z,0-9), hypen (-), or dot (.).</p>
        <h6 name="patterndb-parser-ipv4" oldrole="simplesect">@IPv4@</h6>
        <MadCap:keyword term="@IPv4">
        </MadCap:keyword>
        <p oldrole="para">Parses an IPv4 IP address (numbers separated with a maximum of 3 dots).</p>
        <h6 name="patterndb-parser-ipv6" oldrole="simplesect">@IPv6@</h6>
        <MadCap:keyword term="@IPv6@">
        </MadCap:keyword>
        <p oldrole="para">Parses any valid IPv6 IP address.</p>
        <h6 name="patterndb-parser-ipvany" oldrole="simplesect">@IPvANY@</h6>
        <MadCap:keyword term="@IPvANY@">
        </MadCap:keyword>
        <p oldrole="para">Parses any IP address.</p>
        <h6 condition="ose" name="patterndb-parser-lladdr" oldrole="simplesect">@LLADDR@</h6>
        <MadCap:keyword term="@LLADDR@">
        </MadCap:keyword>
        <p oldrole="para">Parses a Link Layer Address in the <span class="Code" oldrole="parameter">xx:xx:xx:...</span> form, where each xx is a 2 digit HEX number (an octet). The parameter specifies the maximum number of octets to match and defaults to 20. The MACADDR parser is a special wrapper using the LLADDR parser. For example, the following parser parses maximally 10 octets, and stores the results in the <span class="Code" oldrole="parameter">link-level-address</span> macro:</p><pre class="Code" oldrole="synopsis">@LLADDR:link-level-address:10@</pre>
        <h6 condition="ose" name="patterndb-parser-macaddr" oldrole="simplesect">@MACADDR@</h6>
        <MadCap:keyword term="@MACADDR@">
        </MadCap:keyword>
        <p oldrole="para">Parses the standard format of a MAC-48 address, consisting of is six groups of two hexadecimal digits, separated by colons. For example, <span class="Code" oldrole="parameter">00:50:fc:e3:cd:37</span>.</p>
        <h6 name="patterndb-parser-nlstring" oldrole="simplesect">@NLSTRING@</h6>
        <MadCap:keyword term="@NLSTRING@">
        </MadCap:keyword>
        <p oldrole="para">This parser parses everything until the next new-line character (more precisely, until the next Unix-style LF or Windows-style CRLF character). For single-line messages, NLSTRING is equivalent with ANYSTRING. For multi-line messages, NLSTRING parses to the end of the current line, while ANYSTRING parses to the end of the message. Using NLSTRING is useful when parsing multi-line messages, for example, Windows logs. For example, the following pattern parses information from Windows security auditing logs.</p><pre class="Code" oldrole="synopsis">&lt;pattern&gt;Balabit-PC\Balabit: Security Microsoft Windows security auditing.: [Success Audit] A new process has been created.

    Subject:
    Security ID: @LNSTRING:.winaudit.SubjectUserSid@
    Account Name: @LNSTRING:.winaudit.SubjectUserName@
    Account Domain: @LNSTRING:.winaudit.SubjectDomainName@
    Logon ID: @LNSTRING:.winaudit.SubjectLogonId@

    Process Information:
    New Process ID: @LNSTRING:.winaudit.NewProcessId@
    New Process Name: @LNSTRING:.winaudit.NewProcessName@
    Token Elevation Type: @LNSTRING:.winaudit.TokenElevationType@
    Creator Process ID: @LNSTRING:.winaudit.ProcessId@
    Process Command Line: @LNSTRING:.winaudit.CommandLine@

    Token Elevation Type indicates the type of token that was assigned to the new process in accordance with User Account Control policy.&lt;/pattern&gt;</pre>
        <h6 name="patterndb-parser-number" oldrole="simplesect">@NUMBER@</h6>
        <MadCap:keyword term="@NUMBER@">
        </MadCap:keyword>
        <p oldrole="para">A sequence of decimal (0-9) numbers (for example, 1, 0687, and so on). Note that if the number starts with the 0x characters, it is parsed as a hexadecimal number, but only if at least one valid character follows 0x. A leading hyphen (<span class="Code" oldrole="userinput"><MadCap:variable name="General.ndash"></MadCap:variable></span>) is accepted for non-hexadecimal numbers, but other separator characters (for example, dot or comma) are not. To parse floating-point numbers, use the @FLOAT@ parser.</p>
        <h6 condition="ose" name="patterndb-parser-pcre" oldrole="simplesect">@PCRE@</h6>
        <MadCap:keyword term="@PCRE@">
        </MadCap:keyword>
        <p oldrole="para">Use Perl-Compatible Regular Expressions (as implemented by the PCRE library), after the identification of the potential patterns has happened by the radix implementation.</p>
        <p oldrole="para">Syntax: <span class="Code" oldrole="parameter">@PCRE:name:regexp@</span></p>
        <h6 name="patterndb-parser-qstring" oldrole="simplesect">@QSTRING@</h6>
        <MadCap:keyword term="@QSTRING@">
        </MadCap:keyword>
        <p oldrole="para">Parse a string between the quote characters specified as parameter. Note that the quote character can be different at the beginning and the end of the quote, for example: <span class="Code" oldrole="userinput">@QSTRING::"@</span> parses everything between two quotation marks (<span class="Code" oldrole="userinput">"</span>), while <span class="Code" oldrole="userinput">@QSTRING:&amp;lt;&amp;gt;@</span> parses from an opening bracket to the closing bracket. The <span class="Code" oldrole="userinput">@</span> character cannot be a quote character, nor can line-breaks or tabs.</p>
        <h6 condition="ose" oldrole="simplesect">@SET@</h6>
        <MadCap:keyword term="@SET@">
        </MadCap:keyword>
        <p oldrole="para">Parse any combination of the specified characters until another character is found. For example, specifying a whitespace character parses any number of whitespaces, and can be used to process paddings (for example, log messages of the Squid application have whitespace padding after the username).</p>
        <p oldrole="para">For example, the <span class="Code" oldrole="parameter">@SET:: "@</span> parser will parse any combination of whitespaces and double-quotes.</p>
        <p oldrole="para">Available in <MadCap:conditionaltext MadCap:conditions="ose"><MadCap:variable name="General.abbrev"></MadCap:variable> 3.4</MadCap:conditionaltext> and later.</p>
        <h6 oldrole="simplesect">@STRING@</h6>
        <MadCap:keyword term="@STRING@">
        </MadCap:keyword>
        <p oldrole="para">A sequence of alphanumeric characters (0-9, A-z), not including any whitespace. Optionally, other accepted characters can be listed as parameters (for example, to parse a complete sentence, add the whitespace as parameter, like: <span class="Code" oldrole="userinput">@STRING:: @</span>). Note that the <span class="Code" oldrole="userinput">@</span> character cannot be a parameter, nor can line-breaks or tabs.</p>
    </body>
</html>