<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!-- FIXME options should be restructured to simplesects -->
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd"><body name="custom-sdata-fields" oldrole="section">
<h1 name="custom-sdata-fields" xmlns="http://docbook.org/ns/docbook">Creating custom SDATA fields</h1>
<MadCap:keyword term="setting message fields"></MadCap:keyword>
<MadCap:keyword term="creating SDATA fields"></MadCap:keyword>
<MadCap:keyword term="modifying SDATA"></MadCap:keyword>
<p oldrole="para">If you use RFC5424-formatted (IETF-syslog) messages, you can also create custom fields in the SDATA part of the message (For details on the SDATA message part, see <MadCap:xref href="#ietfsyslog-structureddata"></MadCap:xref>). According to RFC5424, the name of the field (its SD-ID) must not contain the <span class="Code" oldrole="userinput">@</span> character for reserved SD-IDs. Custom SDATA fields must be in the following format: <span class="Code" oldrole="userinput">.SDATA.group-name@&lt;private enterprise number&gt;.field-name</span>, for example, <span class="Code" oldrole="userinput">.SDATA.mySDATA-field-group@18372.4.mySDATA-field</span>. (18372.4 is the private enterprise number of &fullvendor;, the developer of &abbrev;.)</p>
<div class="Example">
<h6 oldrole="example">Example: Rewriting custom SDATA fields</h6>
<p oldrole="para">The following example sets the sequence ID field of the RFC5424-formatted (IETF-syslog) messages to a fixed value. This field is a predefined SDATA field with a reserved SD-ID, therefore its name does not contain the <span class="Code" oldrole="userinput">@</span> character.</p>
<pre class="Code" oldrole="synopsis">rewrite r_sd {
    set("55555" value(".SDATA.meta.sequenceId"));
};</pre>
<p oldrole="para">It is also possible to set the value of a field that does not exist yet, and create a new, custom name-value pair that is associated with the message. The following example creates the <span class="Code" oldrole="userinput">.SDATA.groupID.fieldID@18372.4</span> field and sets its value to <span class="Code" oldrole="userinput">yes</span>. If you use the <span class="Code" oldrole="userinput">${.SDATA.groupID.fieldID@18372.4}</span> macro in a template or SQL table, its value will be <span class="Code" oldrole="userinput">yes</span> for every message that was processed with this rewrite rule, and empty for every other message.</p>
<p oldrole="para">The next example creates a new SDATA field-group and field called <span class="Code" oldrole="userinput">custom</span> and <span class="Code" oldrole="userinput">sourceip</span>, respectively:</p>
<pre class="Code" oldrole="synopsis">rewrite r_rewrite_set {
    set("${SOURCEIP}" value(".SDATA.custom@18372.4.sourceip"));
};</pre>
<p oldrole="para">If you use the <span class="Code" oldrole="userinput">${.SDATA.custom@18372.4.sourceip}</span> macro in a template or SQL table, its value will be that of the <span class="Code" oldrole="userinput">SOURCEIP</span> macro (as seen on the machine where the SDATA field was created) for every message that was processed with this rewrite rule, and empty for every other message.</p>
<p oldrole="para">You can verify whether or not the format is correct by looking at the actual network traffic. The SDATA field-group will be called <span class="Code" oldrole="userinput">custom@18372.4</span>, and <span class="Code" oldrole="userinput">sourceip</span> will become a field within that group. If you decide to set up several fields, they will be listed in consecutive order within the field-group's SDATA block.</p>
</div>
</body></html>
