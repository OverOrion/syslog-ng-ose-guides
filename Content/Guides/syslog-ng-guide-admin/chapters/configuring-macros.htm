<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
    <head>
        <meta name="description" content="" />
    </head>
    <body name="configuring-macros">
        <h1 name="configuring-macros">Templates and macros</h1>
        <MadCap:keyword term="templates">
        </MadCap:keyword>
        <p>The <MadCap:variable name="General.OSE"></MadCap:variable> application allows you to define message templates, and reference them from every object that can use a template. Templates can include strings, macros (for example, date, the hostname, and so on), and template functions. For example, you can use templates to create standard message formats or filenames. For a list of macros available in <MadCap:variable name="General.product"></MadCap:variable>, see <MadCap:xref href="reference-macros.htm"><span style="color: #04aada;" class="mcFormatColor">Macros of [%=General.OSE%]</span></MadCap:xref>.<MadCap:conditionaltext MadCap:conditions="General.PE"> For the macros of the syslog-ng Agent for Windows application, see <a targetdoc="syslog-ng-windows-agent-guide-admin" targetptr="chapter-format" oldrole="olink"></a>.</MadCap:conditionaltext> Fields from the structured data (SD) part of messages using the new IETF-syslog standard can also be used as macros.</p>
        <div>
            <h6>Declaration:</h6>
            <MadCap:keyword term="templates:['defining']">
            </MadCap:keyword><pre>template &lt;template-name&gt; {
    template("&lt;template-expression&gt;") &lt;template-escape(yes)&gt;;
};</pre>
        </div>
        <p>Template objects have a single option called <span class="Code" oldrole="parameter">template-escape()</span>, which is disabled by default (<span class="Code" oldrole="userinput">template-escape(no)</span>). This behavior is useful when the messages are passed to an application that cannot handle escaped characters properly. Enabling template escaping (<span class="Code" oldrole="userinput">template-escape(yes)</span>) causes syslog-ng to escape the <span class="Code" oldrole="userinput">'</span>, <span class="Code" oldrole="userinput">"</span>, and backslash characters from the messages.</p>
        <p>If you do not want to enable the <span class="Code" oldrole="parameter">template-escape()</span> option (which is rarely needed), you can define the template without the enclosing braces.</p><pre>template &lt;template-name&gt; "&lt;template-expression&gt;";</pre>
        <p>You can also refer to an existing template from within a template. The result of the referred template will be pasted into the second template.</p><pre>template first-template "sample-text";
template second-template "The result of the first-template is: $(template first-template)";</pre>
        <p>If you want to use a template only once, you can define the template inline, for example:</p><pre>destination d_file {
    file ("/var/log/messages" template("${ISODATE} ${HOST} ${MESSAGE}\n") );
};</pre>
        <p>Macros can be included by prefixing the macro name with a <span class="Code" oldrole="userinput">$</span> sign, just like in Bourne compatible shells. Although using braces around macro names is not mandatory, and the <span class="Code" oldrole="userinput">"$MESSAGE"</span> and <span class="Code" oldrole="userinput">"${MESSAGE}"</span> formats are equivalent, using the <span class="Code" oldrole="userinput">"${MESSAGE}"</span> format is recommended for clarity.</p>
		<p>Macro names are case-sensitive, that is, <span class="Code" oldrole="userinput">"$message"</span> and <span class="Code" oldrole="userinput">"$MESSAGE"</span> are not the same.</p>
        <MadCap:keyword term="templates:['literal $']">
        </MadCap:keyword>
        <MadCap:keyword term="templates:['escaping']">
        </MadCap:keyword>
        <p>To use a literal <span class="Code" oldrole="userinput">$</span> character in a template, you have to escape it. In <MadCap:variable name="General.OSE"></MadCap:variable> versions <MadCap:conditionaltext MadCap:conditions="General.PE">4.0-4.2</MadCap:conditionaltext><MadCap:conditionaltext MadCap:conditions="General.OSE">3.4 and earlier</MadCap:conditionaltext>, use a backslash (<span class="Code" oldrole="userinput">\$</span>). In version <MadCap:conditionaltext MadCap:conditions="General.PE">5.0</MadCap:conditionaltext><MadCap:conditionaltext MadCap:conditions="General.OSE">3.5</MadCap:conditionaltext> and later, use <span class="Code" oldrole="userinput">$$</span>.</p>
        <MadCap:snippetBlock src="../../shared/wnt/note-escape-at.htm">
        </MadCap:snippetBlock>
        <MadCap:keyword term="macros:['default value']">
        </MadCap:keyword>
        <p>Default values for macros can also be specified by appending the <span class="Code" oldrole="userinput">:-</span> characters and the default value of the macro. If a message does not contain the field referred to by the macro, or it is empty, the default value will be used when expanding the macro. For example, if a message does not contain a hostname, the following macro can specify a default hostname.</p><pre>${HOST:-default_hostname}</pre>
        <p>By default, syslog-ng sends messages using the following template: <span class="Code" oldrole="userinput">${ISODATE} ${HOST} ${MSGHDR}${MESSAGE}\n</span>. (The <span class="Code" oldrole="userinput">${MSGHDR}${MESSAGE}</span> part is written together because the <span class="Code" oldrole="parameter">${MSGHDR}</span> macro includes a trailing whitespace.)</p>
        <div class="Example">
            <h6>Example: Using templates and macros</h6>
            <MadCap:keyword term="templates:['example']">
            </MadCap:keyword>
            <p>The following template (<span class="Code" oldrole="userinput">t_demo_filetemplate</span>) adds the date of the message and the name of the host sending the message to the beginning of the message text. The template is then used in a file destination: messages sent to this destination (<span class="Code" oldrole="userinput">d_file</span>) will use the message format defined in the template.</p><pre>template t_demo_filetemplate {
    template("${ISODATE} ${HOST} ${MESSAGE}\n");
};
destination d_file {
    file("/var/log/messages" template(t_demo_filetemplate));
};</pre>
            <p>If you do not want to enable the <span class="Code" oldrole="parameter">template-escape()</span> option (which is rarely needed), you can define the template without the enclosing braces. The following two templates are equivalent.</p><pre>template t_demo_template-with-braces {
    template("${ISODATE} ${HOST} ${MESSAGE}\n");
};
template t_demo_template-without-braces "${ISODATE} ${HOST} ${MESSAGE}\n";
</pre>
            <p>Templates can also be used inline, if they are used only at a single location. The following destination is equivalent with the previous example:</p><pre>destination d_file {
    file ("/var/log/messages" template("${ISODATE} ${HOST} ${MESSAGE}\n") );
};</pre>
            <MadCap:keyword term="macros:['in filenames']">
            </MadCap:keyword>
            <p>The following file destination uses macros to daily create separate logfiles for every client host.</p><pre>destination d_file {
        file("/var/log/${YEAR}.${MONTH}.${DAY}/${HOST}.log");
};</pre>
        </div>
        <div class="Note">
            <p class="Hyphenation"><span class="AllNoteStyles">NOTE:</span> 
			Macros can be used to format messages, and also in the name of destination files or database tables. However, they cannot be used in sources as wildcards, for example, to read messages from files or directories that include a date in their name.</p>
        </div>
    </body>
</html>