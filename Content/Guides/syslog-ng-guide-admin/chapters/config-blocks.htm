<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
    <body name="config-blocks" oldrole="section">
        <h1 name="config-blocks">Reusing configuration blocks</h1>
        <MadCap:keyword term="configuration snippets">
        </MadCap:keyword>
        <MadCap:keyword term="reusing snippets">
        </MadCap:keyword>
        <MadCap:keyword term="block">
        </MadCap:keyword>
        <p oldrole="para">To create a reusable configuration snippet and reuse parts of a configuration file, you have to define the block (for example, a source) once, and reference it later. (Such reusable blocks are sometimes called a Source Configuration Library, or SCL.) Any syslog-ng object can be a block. Use the following syntax to define a block:</p><pre class="Code" oldrole="synopsis">block type name() {&lt;contents of the block&gt;};</pre>
        <p oldrole="para">Type must be one of the following: <span class="Code" oldrole="parameter">destination</span>, <span class="Code" oldrole="parameter">filter</span>, <span class="Code" oldrole="parameter">log</span>, <span class="Code" oldrole="parameter">parser</span>, <span class="Code" oldrole="parameter">rewrite</span>, <span class="Code" oldrole="parameter">root</span>, <span class="Code" oldrole="parameter">source</span>. The <span class="Code" oldrole="parameter">root</span> blocks can be used in the "root" context of the configuration file, that is, outside any other statements.</p>
        <p oldrole="para">Blocks may be nested into each other, so for example a block can be built from other blocks. Blocks are somewhat similar to C++ templates.</p>
        <p oldrole="para">The type and name combination of each block must be unique, that is, two blocks can have the same name if their type is different.</p>
        <p oldrole="para">To use a block in your configuration file, you have to do two things:</p>
        <ul oldrole="itemizedlist">
            <li oldrole="listitem">
                <p oldrole="para">Include the file defining the block in the <span class="Code" oldrole="filename">syslog-ng.conf</span> file — or a file already included into <span class="Code" oldrole="filename">syslog-ng.conf</span>. Version <MadCap:conditionaltext MadCap:conditions="General.ose">3.7</MadCap:conditionaltext><MadCap:conditionaltext MadCap:conditions="General.pe">7.0</MadCap:conditionaltext> and newer automatically includes the <span class="Code" oldrole="filename">*.conf</span> files from the <span class="Code" oldrole="filename">&lt;directory-where-syslog-ng-is-installed&gt;/scl/*/</span> directories.</p>
            </li>
            <li oldrole="listitem">
                <p oldrole="para">Reference the name of the block in your configuration file. This will insert the block into your configuration. For example, to use a block called <span class="Code" oldrole="userinput">myblock</span>, include the following line in your configuration:</p><pre class="Code" oldrole="synopsis">myblock()</pre>
                <p oldrole="para">Blocks may have parameters, but even if they do not, the reference must include opening and closing parentheses like in the previous example.</p>
            </li>
        </ul>
        <p oldrole="para">The contents of the block will be inserted into the configuration when <MadCap:variable name="General.abbrev"></MadCap:variable> is started or reloaded.</p>
        <div class="Example">
            <h6 name="example-configuration-block" oldrole="example">Example: Reusing configuration blocks</h6>
            <p oldrole="para">Suppose you are running an application on your hosts that logs into the <span class="Code" oldrole="filename">/opt/var/myapplication.log</span> file. Create a file (for example, <span class="Code" oldrole="filename">myblocks.conf</span>) that stores a source describing this file and how it should be read:</p><pre class="Code" oldrole="synopsis">block source myappsource() {
        file("/opt/var/myapplication.log" follow-freq(1) default-facility(syslog)); };</pre>
            <p oldrole="para">Include this file in your main syslog-ng configuration file, reference the block, and use it in a logpath:</p><pre class="Code" oldrole="synopsis">@version: <MadCap:variable name="Version.techversion"></MadCap:variable>
@include "&lt;correct/path&gt;/myblocks.conf"
source s_myappsource { myappsource(); };
...
log { source(s_myappsource); destination(...); };</pre>
        </div>
        <p oldrole="para">To define a block that defines more than one object, use <span class="Code" oldrole="parameter">root</span> as the type of the block, and reference the block from the main part of the <MadCap:variable name="General.abbrev"></MadCap:variable> configuration file.</p>
        <div class="Example">
            <h6 name="example-configuration-block-root" oldrole="example">Example: Defining blocks with multiple elements</h6>
            <MadCap:keyword term="root">
            </MadCap:keyword>
            <MadCap:keyword term="root">
            </MadCap:keyword>
            <p oldrole="para">The following example defines a source, a destination, and a log path to connect them.</p><pre class="Code" oldrole="synopsis">block root mylogs() {
        source s_file { file("/var/log/mylogs.log" follow-freq(1)); };
        destination d_local { file("/var/log/messages"); };
        log { source(s_file); destination(d_local); };
};</pre>
        </div>
        <table cellspacing="0" class="TableStyle-NoteTable_Blue_DoNotEdit" oldrole="tip" style="width: 100%;mc-table-style: url('../../../Resources/TableStyles/NoteTable_Blue_DoNotEdit.css');">
            <col class="TableStyle-NoteTable_Blue_DoNotEdit-Column-Column1" style="width: 0.3in;">
            </col>
            <col class="TableStyle-NoteTable_Blue_DoNotEdit-Column-Column2">
            </col>
            <tbody>
                <tr class="TableStyle-NoteTable_Blue_DoNotEdit-Body-Body1">
                    <td class="TableStyle-NoteTable_Blue_DoNotEdit-BodyB-Column1-Body1">
                        <p>
                            <img src="../../../Resources/Images/Common/note.png" />
                        </p>
                    </td>
                    <td class="TableStyle-NoteTable_Blue_DoNotEdit-BodyA-Column2-Body1"><span class="AllNoteStyles">TIP: </span>
                        <p oldrole="para">Since the block is inserted into the <MadCap:variable name="General.abbrev"></MadCap:variable> configuration when <MadCap:variable name="General.abbrev"></MadCap:variable> is started, the block can be generated dynamically using an external script if needed. This is useful when you are running <MadCap:variable name="General.abbrev"></MadCap:variable> on different hosts and you want to keep the main configuration identical.</p>
                        <p oldrole="para">If you want to reuse more than a single configuration object, for example, a logpath and the definitions of its sources and destinations, use the include feature to reuse the entire snippet. For details, see <MadCap:xref href="including-config-files.htm#including-config-files"></MadCap:xref>.</p>
                    </td>
                </tr>
            </tbody>
        </table>
        <h2>Passing arguments to configuration blocks</h2>
        <MadCap:keyword term="block arguments">
        </MadCap:keyword>
        <MadCap:keyword term="configuration snippets:['block arguments']">
        </MadCap:keyword>
        <p oldrole="para">Configuration blocks can receive arguments as well. The parameters the block can receive must be specified when the block is defined, using the following syntax:</p><pre class="Code" oldrole="synopsis">block type block_name(argument1(&lt;default-value-of-the-argument&gt;) argument2(&lt;default-value-of-the-argument&gt;) argument3())</pre>
        <p oldrole="para">If an argument does not have a default value, use empty parentheses after the name of the argument. To refer the value of the argument in the block, use the name of the argument between backticks (for example, <span class="Code" oldrole="userinput">`argument1`</span>).</p>
        <div class="Example">
            <h6 oldrole="example">Example: Passing arguments to blocks</h6>
            <p oldrole="para">The following sample defines a file source block, which can receive the name of the file as a parameter. If no parameter is set, it reads messages from the <span class="Code" oldrole="filename">/var/log/messages</span> file.</p><pre class="Code" oldrole="synopsis">block source s_logfile (filename("messages")) {
  file("/var/log/`filename`" );
};

source s_example {
  s_logfile(filename("logfile.log"));
};</pre>
        </div>
        <MadCap:keyword term="block arguments:['dynamical']">
        </MadCap:keyword>
        <MadCap:keyword term="dynamical block arguments">
        </MadCap:keyword>
        <MadCap:keyword term="configuration snippets:['dynamical block arguments']">
        </MadCap:keyword>
        <p oldrole="para">If you reference the block with more arguments then specified in its definition, you can use these additional arguments as a single argument-list within the block. That way, you can use a variable number of optional arguments in your block. This can be useful when passing arguments to a template, or optional arguments to an underlying driver. To reference this argument-list, insert <span class="Code" oldrole="userinput">`__VARARGS__`</span> to the place in the block where you want to insert the argument-list. Note that you can use this only once in a block. The following definition extends the logfile block from the previous example, and passes the optional arguments (<span class="Code" oldrole="userinput">follow-freq(1) flags(no-parse)</span>) to the <span class="Code" oldrole="userinput">file()</span> source.</p><pre class="Code" oldrole="synopsis">block source s_logfile (filename("messages")) {
  file("/var/log/`filename`" `__VARARGS__`);
};

source s_example {
  s_logfile(filename("logfile.log") follow-freq(1) flags(no-parse));
};</pre>
        <div class="Example" MadCap:conditions="General.ose">
            <h6 oldrole="example">Example: Using arguments in blocks</h6>
            <p oldrole="para">The following example is the code of the <a href="configuring-source-pacct.htm"><span class="Code" oldrole="parameter">pacct()</span> source driver</a>, which is actually a block that can optionally receive two arguments.</p><pre class="Code" oldrole="synopsis">block source pacct(file("/var/log/account/pacct") follow-freq(1)) {
@module pacctformat
        file("`file`" follow-freq(`follow-freq`) format("pacct") tags(".pacct") `__VARARGS__`);
};</pre>
        </div>
    </body>
</html>
