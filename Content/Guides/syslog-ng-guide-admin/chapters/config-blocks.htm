<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
    <head>
        <meta name="description" content="" />
    </head>
    <body name="config-blocks">
        <h1 name="config-blocks"><a name="config-blocks"></a>Reusing configuration blocks</h1>
        <MadCap:keyword term="configuration snippets">
        </MadCap:keyword>
        <MadCap:keyword term="reusing snippets">
        </MadCap:keyword>
        <MadCap:keyword term="block">
        </MadCap:keyword>
        <p>To create a reusable configuration snippet and reuse parts of a configuration file, you have to define the block (for example, a source) once, and reference it later. (<a href="https://www.syslog-ng.com/community/b/blog/posts/creating-your-first-block-for-the-syslog-ng-configuration-library-scl">Such reusable blocks are sometimes called a Source Configuration Library, or SCL.</a>) Any syslog-ng object can be a block. Use the following syntax to define a block:</p><pre>block type name() {&lt;contents of the block&gt;};</pre>
        <p>Type must be one of the following: <span class="Code" oldrole="parameter">destination</span>, <span class="Code" oldrole="parameter">filter</span>, <span class="Code" oldrole="parameter">log</span>, <span class="Code" oldrole="parameter">options</span>, <span class="Code" oldrole="parameter">parser</span>, <span class="Code" oldrole="parameter">rewrite</span>, <span class="Code" oldrole="parameter">root</span>, <span class="Code" oldrole="parameter">source</span>. The <span class="Code" oldrole="parameter">root</span> blocks can be used in the "root" context of the configuration file, that is, outside any other statements.</p>
        <p>Note that <span class="Code" oldrole="parameter">options</span> can be used in blocks only in version <MadCap:conditionaltext MadCap:conditions="General.ose">3.22</MadCap:conditionaltext><MadCap:conditionaltext MadCap:conditions="General.pe">7.0.15</MadCap:conditionaltext> and later.</p>
        <p>Blocks may be nested into each other, so for example, a block can be built from other blocks. Blocks are somewhat similar to C++ templates.</p>
        <p>The type and name combination of each block must be unique, that is, two blocks can have the same name if their type is different.</p>
        <p>To use a block in your configuration file, you have to do two things:</p>
        <ul>
            <li>
                <p>Include the file defining the block in the <span class="Code">syslog-ng.conf</span> file — or a file already included into <span class="Code">syslog-ng.conf</span>. Version <MadCap:conditionaltext MadCap:conditions="General.ose">3.7</MadCap:conditionaltext> and newer automatically includes the <span class="Code">*.conf</span> files from the <span class="Code">&lt;directory-where-syslog-ng-is-installed&gt;/scl/*/</span> directories.</p>
            </li>
            <li>
                <p>Reference the name of the block in your configuration file. This will insert the block into your configuration. For example, to use a block called <span class="Code" oldrole="userinput">myblock</span>, include the following line in your configuration:</p><pre>myblock()</pre>
                <p>Blocks may have parameters, but even if they do not, the reference must include opening and closing parentheses like in the previous example.</p>
            </li>
        </ul>
        <p>The contents of the block will be inserted into the configuration when <MadCap:variable name="General.abbrev"></MadCap:variable> is started or reloaded.</p>
        <div class="Example">
            <h6 name="example-configuration-block"><a name="example-configuration-block"></a>Example: Reusing configuration blocks</h6>
            <p>Suppose you are running an application on your hosts that logs into the <span class="Code">/opt/var/myapplication.log</span> file. Create a file (for example, <span class="Code">myblocks.conf</span>) that stores a source describing this file and how it should be read:</p><pre>block source myappsource() {
        file("/opt/var/myapplication.log" follow-freq(1) default-facility(syslog)); };</pre>
            <p>Include this file in your main syslog-ng configuration file, reference the block, and use it in a logpath:</p><pre>@version: <MadCap:variable name="Version.techversion"></MadCap:variable>
@include "&lt;correct/path&gt;/myblocks.conf"
source s_myappsource { myappsource(); };
...
log { source(s_myappsource); destination(...); };</pre>
        </div>
        <p>To define a block that defines more than one object, use <span class="Code" oldrole="parameter">root</span> as the type of the block, and reference the block from the main part of the <MadCap:variable name="General.abbrev"></MadCap:variable> configuration file.</p>
        <div class="Example">
            <h6 name="example-configuration-block-root"><a name="example-configuration-block-root"></a>Example: Defining blocks with multiple elements</h6>
            <MadCap:keyword term="root">
            </MadCap:keyword>
            <p>The following example defines a source, a destination, and a log path to connect them.</p><pre>block root mylogs() {
    source s_file {
        file("/var/log/mylogs.log" follow-freq(1));
    };
    destination d_local {
        file("/var/log/messages");
    };
    log {
        source(s_file); destination(d_local);
    };
};</pre>
        </div>
		<div class="Note">
			<p class="Hyphenation">
			<span class="AllNoteStyles">TIP:</span> Since the block is inserted into the <MadCap:variable name="General.abbrev"></MadCap:variable> configuration when <MadCap:variable name="General.abbrev"></MadCap:variable> is started, the block can be generated dynamically using an external script if needed. This is useful when you are running <MadCap:variable name="General.abbrev"></MadCap:variable> on different hosts and you want to keep the main configuration identical.</p>
            <p>If you want to reuse more than a single configuration object, for example, a logpath and the definitions of its sources and destinations, use the include feature to reuse the entire snippet. For details, see <MadCap:xref href="including-config-files.htm#including-config-files"><span style="color: #04aada;" class="mcFormatColor">Including configuration files</span></MadCap:xref>.</p>
        </div>
        <div>
            <h6><a name="config-blocks-mandatory"></a>Mandatory parameters</h6>
            <p>You can express in block definitons that a parameter is mandatory by defining it with empty brackets <span class="Code" oldrole="userinput">()</span>. In this case, the parameter must be overridden in the reference block. Failing to do so will result in an error message and initialization failure.</p>
            <p>To make a parameter expand into nothing (for example, because it has no default value, like <span class="Code" oldrole="parameter">hook-commands()</span> or <span class="Code" oldrole="parameter">tls()</span>), insert a pair of double quote marks inside the empty brackets: <span class="Code" oldrole="userinput">("")</span></p>
            <div class="Example">
                <h6>Example: Mandatory parameters</h6>
                <p>The following example defines a TCP source that can receive the following parameters: the port where <MadCap:variable name="General.abbrev"></MadCap:variable> listens (<span class="Code" oldrole="parameter">localport</span>), and optionally source flags (<span class="Code" oldrole="parameter">flags</span>).</p><pre>block source my_tcp_source(localport() flags("")) {
    network(port(`localport`) transport(tcp) flags(`flags`));
};</pre>
                <p>Because <span class="Code" oldrole="parameter">localport</span> is defined with empty brackets <span class="Code" oldrole="userinput">()</span>, it is a mandatory parameter. However, the <span class="Code" oldrole="parameter">flags</span> parameter is not mandatory, because it is defined with an empty double quote bracket pair <span class="Code" oldrole="userinput">("")</span>. If you do not enter a specific value when referencing this parameter, the value will be an empty string. This means that in this case</p><pre>my_tcp_source(localport(8080))</pre>
                <p>will be expanded to:</p><pre>network(port(8080) transport(tcp) flags());</pre>
            </div>
        </div>
        <div>
            <h6><a name="config-blocks-passing-arguments"></a>Passing arguments to configuration blocks</h6>
            <MadCap:keyword term="block arguments">
            </MadCap:keyword>
            <MadCap:keyword term="configuration snippets:['block arguments']">
            </MadCap:keyword>
            <p>Configuration blocks can receive arguments as well. The parameters the block can receive must be specified when the block is defined, using the following syntax:</p><pre>block type block_name(argument1(&lt;default-value-of-the-argument&gt;) argument2(&lt;default-value-of-the-argument&gt;) argument3())</pre>
            <p>If an argument does not have a default value, use an empty double quote bracket pair <span class="Code" oldrole="userinput">("")</span> after the name of the argument. To refer the value of the argument in the block, use the name of the argument between backticks (for example, <span class="Code" oldrole="userinput">`argument1`</span>).</p>
            <div class="Example">
                <h6>Example: Passing arguments to blocks</h6>
                <p>The following sample defines a file source block, which can receive the name of the file as a parameter. If no parameter is set, it reads messages from the <span class="Code">/var/log/messages</span> file.</p><pre>block source s_logfile (filename("messages")) {
    file("/var/log/`filename`" );
};

source s_example {
    s_logfile(filename("logfile.log"));
};</pre>
            </div>
            <MadCap:keyword term="block arguments:['dynamical']">
            </MadCap:keyword>
            <MadCap:keyword term="dynamical block arguments">
            </MadCap:keyword>
            <MadCap:keyword term="configuration snippets:['dynamical block arguments']">
            </MadCap:keyword>
            <p>If you reference the block with more arguments then specified in its definition, you can use these additional arguments as a single argument-list within the block. That way, you can use a variable number of optional arguments in your block. This can be useful when passing arguments to a template, or optional arguments to an underlying driver.</p>
            <p>The three dots (<span class="Code" oldrole="userinput">…</span>) at the end of the argument list refer to any additional parameters. It tells <MadCap:variable name="General.abbrev"></MadCap:variable> that this macro accepts <span class="Code" oldrole="userinput">`__VARARGS__`</span>, therefore any name-value pair can be passed without validation. To reference this argument-list, insert <span class="Code" oldrole="userinput">`__VARARGS__`</span> to the place in the block where you want to insert the argument-list. Note that you can use this only once in a block.</p>
            <p>The following definition extends the logfile block from the previous example, and passes the optional arguments (<span class="Code" oldrole="userinput">follow-freq(1) flags(no-parse)</span>) to the <span class="Code" oldrole="userinput">file()</span> source.</p><pre>block source s_logfile(filename("messages") ...) {
    file("/var/log/`filename`" `__VARARGS__`);
};

source s_example {
    s_logfile(
        filename("logfile.log")
        follow-freq(1)
        flags(no-parse)
    );
};</pre>
            <div class="Example" MadCap:conditions="General.ose">
                <h6 condition="ose">Example: Using arguments in blocks</h6>
                <p>The following example is the code of the <a href="source-pacct.htm"><span class="Code" oldrole="parameter">pacct()</span> source driver</a>, which is actually a block that can optionally receive two arguments.</p><pre>block source pacct(file("/var/log/account/pacct") follow-freq(1) ...) {
    file("`file`" follow-freq(`follow-freq`) format("pacct") tags(".pacct") `__VARARGS__`);
};</pre>
            </div>
            <div class="Example" MadCap:conditions="General.ose">
                <h6 condition="ose">Example: Defining global options in blocks</h6>
                <p>The following example defines a block called <span class="Code" oldrole="userinput">setup-dns()</span> to set DNS-related settings at a single place.</p><pre>block options setup-dns(use-dns()) {
    keep-hostname(no);
    use-dns(`use-dns`);
    use-fqdn(`use-dns`);
dns-cache(`use-dns`);
};

options {
    setup-dns(use-dns(yes));
};</pre>
            </div>
        </div>
    </body>
</html>