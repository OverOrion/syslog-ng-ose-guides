<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd"><body name="grouping-by-parser-options" oldrole="section">
<h1 name="grouping-by-parser-options">Options of <span class="Code" oldrole="userinput">grouping-by</span> parsers</h1>
<p oldrole="para">The <span class="Code" oldrole="parameter">grouping-by</span> has the following options.</p>

<h6 name="grouping-by-parser-aggregate" oldrole="simplesect">aggregate()</h6>
<MadCap:keyword term="aggregate()"></MadCap:keyword>
<MadCap:keyword term="grouping-by():['aggregate()']"></MadCap:keyword>
<table cellspacing="0" class="RuledTableWithHeading_DoNotEdit" colsep="0" frame="topbot" rowsep="0" style="width: 100%;mc-table-style: url('../../../Resources/TableStyles/RuledTableWithHeading_DoNotEdit.css');">
<tbody>
<tr class="TableStyle-RuledTableWithHeading_DoNotEdit-Body-Body1">
<td class="TableStyle-RuledTableWithHeading_DoNotEdit-Body-Body1">Synopsis: 

                            </td>
<td class="TableStyle-RuledTableWithHeading_DoNotEdit-Body-Body1">aggregate()</td>
</tr>
</tbody>
<col class="TableStyle-RuledTableWithHeading_DoNotEdit-Column-Column1" style="width: 0.3in;"></col></table>
<p oldrole="para"><i oldrole="emphasis" role="bold">Description:</i> Specifies the message that <MadCap:variable name="General.abbrev"></MadCap:variable> generates when the context is closed. This option is mandatory.</p>
<p oldrole="para">Note that the <span class="Code" oldrole="parameter">aggregate()</span> option has access to every message of the context, and has the following options:</p>
<ul oldrole="itemizedlist">
<li oldrole="listitem">
<MadCap:keyword term="inherit-mode()"></MadCap:keyword>
<MadCap:snippetBlock src="../../shared/chunk/option-inherit-mode.htm"></MadCap:snippetBlock>
<p oldrole="para">The default value of <span class="Code" oldrole="parameter">inherit-mode()</span> is <span class="Code" oldrole="parameter">context</span>.</p>
<p oldrole="para">For details on the message context, see <MadCap:xref href="grouping-by-parser.htm#grouping-by-parser"></MadCap:xref>.</p>
</li>
<li oldrole="listitem">
<MadCap:keyword term="tags()"></MadCap:keyword>
<p oldrole="para"><i oldrole="emphasis">tags</i>: Adds the specified tag to the list of tags.</p>
</li>
<li oldrole="listitem">
<MadCap:keyword term="value()"></MadCap:keyword>
<p oldrole="para"><i oldrole="emphasis">value</i>: Adds a name-value pair to the generated message. You can include text, macros, template functions, and you can also reference every message of the context. For details on accessing other messages of the context, see <MadCap:xref href="parser-grouping-by.htm#referencing-previous-messages-grouping-by"></MadCap:xref>.</p>
</li>
</ul>


<h6 name="grouping-by-parser-having" oldrole="simplesect">having()</h6>
<MadCap:keyword term="having()"></MadCap:keyword>
<MadCap:keyword term="grouping-by():['having()']"></MadCap:keyword>
<table cellspacing="0" class="RuledTableWithHeading_DoNotEdit" colsep="0" frame="topbot" rowsep="0" style="width: 100%;mc-table-style: url('../../../Resources/TableStyles/RuledTableWithHeading_DoNotEdit.css');">
<tbody>
<tr class="TableStyle-RuledTableWithHeading_DoNotEdit-Body-Body1">
<td class="TableStyle-RuledTableWithHeading_DoNotEdit-Body-Body1">Synopsis: 

                            </td>
<td class="TableStyle-RuledTableWithHeading_DoNotEdit-Body-Body1">having()</td>
</tr>
</tbody>
<col class="TableStyle-RuledTableWithHeading_DoNotEdit-Column-Column1" style="width: 0.3in;"></col></table>
<p oldrole="para"><i oldrole="emphasis" role="bold">Description:</i> Specifies a filter: <MadCap:variable name="General.abbrev"></MadCap:variable> generates the aggregate message only if the result of the filter expression is true. Note that the <span class="Code" oldrole="parameter">having()</span> filter has access to every message of the context. For details on accessing other messages of the context, see <MadCap:xref href="parser-grouping-by.htm#referencing-previous-messages-grouping-by"></MadCap:xref>.</p>


<h6 name="grouping-by-parser-inject-mode" oldrole="simplesect">inject-mode()</h6>
<MadCap:keyword term="inject-mode()"></MadCap:keyword>
<MadCap:keyword term="grouping-by():['inject-mode()']"></MadCap:keyword>
<table cellspacing="0" class="RuledTableWithHeading_DoNotEdit" colsep="0" frame="topbot" rowsep="0" style="width: 100%;mc-table-style: url('../../../Resources/TableStyles/RuledTableWithHeading_DoNotEdit.css');">
<tbody>
<tr class="TableStyle-RuledTableWithHeading_DoNotEdit-Body-Body1">
<td class="TableStyle-RuledTableWithHeading_DoNotEdit-Body-Body1">Synopsis: 

                            </td>
<td class="TableStyle-RuledTableWithHeading_DoNotEdit-Body-Body1">inject-mode()</td>
</tr>
</tbody>
<col class="TableStyle-RuledTableWithHeading_DoNotEdit-Column-Column1" style="width: 0.3in;"></col></table>
<p oldrole="para"><i oldrole="emphasis" role="bold">Description:</i> By default, the aggregated message that <MadCap:variable name="General.abbrev"></MadCap:variable> generates is injected into the same place where the <span class="Code" oldrole="parameter">grouping-by()</span> statement is referenced in the log path. To post the generated message into the <span class="Code" oldrole="parameter">internal()</span> source instead, use the <span class="Code" oldrole="parameter">inject-mode()</span> option in the definition of the parser.</p>
<div class="Example">
<h6 oldrole="example">Example: Sending triggered messages to the <span class="Code" oldrole="parameter">internal()</span> source</h6>
<p oldrole="para">To send the generated messages to the <span class="Code" oldrole="parameter">internal</span> source, use the <span class="Code" oldrole="userinput">inject-mode("internal")</span> option:</p>
<pre class="Code" oldrole="synopsis">parser p_grouping-by {grouping-by(
    ...
    inject-mode("internal")
);};</pre>
<p oldrole="para">To inject the generated messages where the parser is referenced, use the <span class="Code" oldrole="userinput">inject-mode("pass-through")</span> option:</p>
<pre class="Code" oldrole="synopsis">parser p_grouping-by {grouping-by(
    ...
    inject-mode("pass-through")
);};</pre>
</div>
<p oldrole="para">You can configure the generated message in the <span class="Code" oldrole="parameter">aggregate()</span> option (see <MadCap:xref href="parser-grouping-by.htm#grouping-by-parser-aggregate"></MadCap:xref>). You can create an entire message, use macros and values extracted from the original message, and so on.</p>


<h6 name="grouping-by-parser-key" oldrole="simplesect">key()</h6>
<MadCap:keyword term="key()"></MadCap:keyword>
<MadCap:keyword term="grouping-by():['key()']"></MadCap:keyword>
<table cellspacing="0" class="RuledTableWithHeading_DoNotEdit" colsep="0" frame="topbot" rowsep="0" style="width: 100%;mc-table-style: url('../../../Resources/TableStyles/RuledTableWithHeading_DoNotEdit.css');">
<tbody>
<tr class="TableStyle-RuledTableWithHeading_DoNotEdit-Body-Body1">
<td class="TableStyle-RuledTableWithHeading_DoNotEdit-Body-Body1">Synopsis: 

                            </td>
<td class="TableStyle-RuledTableWithHeading_DoNotEdit-Body-Body1">key()</td>
</tr>
</tbody>
<col class="TableStyle-RuledTableWithHeading_DoNotEdit-Column-Column1" style="width: 0.3in;"></col></table>
<p oldrole="para"><i oldrole="emphasis" role="bold">Description:</i> Specifies the key (that is, the name of a name-value pair) that every message must have in order to be added to the context. The value of the key must be the same for every message of the context. For example, this can be a session-id parsed from firewall messages, and so on.</p>
<p oldrole="para">This is a mandatory option.</p>
<table cellspacing="0" class="TableStyle-NoteTable_Blue_DoNotEdit" oldrole="note" style="width: 100%;mc-table-style: url('../../../Resources/TableStyles/NoteTable_Blue_DoNotEdit.css');"><col class="TableStyle-NoteTable_Blue_DoNotEdit-Column-Column1" style="width: 0.3in;"></col><col class="TableStyle-NoteTable_Blue_DoNotEdit-Column-Column2"></col><tbody><tr class="TableStyle-NoteTable_Blue_DoNotEdit-Body-Body1"><td class="TableStyle-NoteTable_Blue_DoNotEdit-BodyB-Column1-Body1"><p><img src="../../../Resources/Images/Common/note.png"/></p></td><td class="TableStyle-NoteTable_Blue_DoNotEdit-BodyA-Column2-Body1"><span class="AllNoteStyles">NOTE: </span><p oldrole="para">Messages that do not have a key will all belong to the same context.</p></td></tr></tbody></table>


<h6 name="grouping-by-parser-scope" oldrole="simplesect">scope()</h6>
<MadCap:keyword term="scope()"></MadCap:keyword>
<MadCap:keyword term="grouping-by():['scope()']"></MadCap:keyword>
<table cellspacing="0" class="RuledTableWithHeading_DoNotEdit" colsep="0" frame="topbot" rowsep="0" style="width: 100%;mc-table-style: url('../../../Resources/TableStyles/RuledTableWithHeading_DoNotEdit.css');">
<tbody>
<tr class="TableStyle-RuledTableWithHeading_DoNotEdit-Body-Body1">
<td class="TableStyle-RuledTableWithHeading_DoNotEdit-Body-Body1">Synopsis: 

                            </td>
<td class="TableStyle-RuledTableWithHeading_DoNotEdit-Body-Body1">scope()</td>
</tr>
</tbody>
<col class="TableStyle-RuledTableWithHeading_DoNotEdit-Column-Column1" style="width: 0.3in;"></col></table>
<p oldrole="para"><i oldrole="emphasis" role="bold">Description:</i> Specifies which messages belong to the same context. The following values are available:</p>
<ul oldrole="itemizedlist">
<li oldrole="listitem">
<MadCap:keyword term="process — scope"></MadCap:keyword>
<p oldrole="para"><i oldrole="emphasis">process</i>: Only messages that are generated by the same process of a client belong to the same context, that is, messages that have identical ${HOST}, ${PROGRAM} and ${PID} values.</p>
</li>
<li oldrole="listitem">
<MadCap:keyword term="program — scope"></MadCap:keyword>
<p oldrole="para"><i oldrole="emphasis">program</i>: Messages that are generated by the same application of a client belong to the same context, that is, messages that have identical ${HOST} and ${PROGRAM} values.</p>
</li>
<li oldrole="listitem">
<MadCap:keyword term="host — scope"></MadCap:keyword>
<p oldrole="para"><i oldrole="emphasis">host</i>: Every message generated by a client belongs to the same context, only the ${HOST} value of the messages must be identical.</p>
</li>
<li oldrole="listitem">
<MadCap:keyword term="global — scope"></MadCap:keyword>
<p oldrole="para"><i oldrole="emphasis">global</i>: Every message belongs to the same context. This is the default value.</p>
</li>
</ul>


<h6 name="grouping-by-parser-timeout" oldrole="simplesect">timeout()</h6>
<MadCap:keyword term="timeout()"></MadCap:keyword>
<MadCap:keyword term="grouping-by():['timeout()']"></MadCap:keyword>
<table cellspacing="0" class="RuledTableWithHeading_DoNotEdit" colsep="0" frame="topbot" rowsep="0" style="width: 100%;mc-table-style: url('../../../Resources/TableStyles/RuledTableWithHeading_DoNotEdit.css');">
<tbody>
<tr class="TableStyle-RuledTableWithHeading_DoNotEdit-Body-Body1">
<td class="TableStyle-RuledTableWithHeading_DoNotEdit-Body-Body1">Synopsis: 

                            </td>
<td class="TableStyle-RuledTableWithHeading_DoNotEdit-Body-Body1">timeout([seconds])</td>
</tr>
</tbody>
<col class="TableStyle-RuledTableWithHeading_DoNotEdit-Column-Column1" style="width: 0.3in;"></col></table>
<p oldrole="para"><i oldrole="emphasis" role="bold">Description:</i> Specifies the maximum time to wait for all messages of the context to arrive. If no new message is added to the context during this period, the context is assumed to be complete and <MadCap:variable name="General.abbrev"></MadCap:variable> generates and sends the triggered message (specified in the <a href="parser-grouping-by.htm">aggregate()</a> option), and clears the context. If a new message is added to the context, the timeout period is restarted.</p>
<p oldrole="para">This option is mandatory, and its value must be equal to or greater than <span class="Code" oldrole="userinput">1</span>.</p>


<h6 name="grouping-by-parser-trigger" oldrole="simplesect">trigger()</h6>
<MadCap:keyword term="trigger()"></MadCap:keyword>
<MadCap:keyword term="grouping-by():['trigger()']"></MadCap:keyword>
<table cellspacing="0" class="RuledTableWithHeading_DoNotEdit" colsep="0" frame="topbot" rowsep="0" style="width: 100%;mc-table-style: url('../../../Resources/TableStyles/RuledTableWithHeading_DoNotEdit.css');">
<tbody>
<tr class="TableStyle-RuledTableWithHeading_DoNotEdit-Body-Body1">
<td class="TableStyle-RuledTableWithHeading_DoNotEdit-Body-Body1">Synopsis: 

                            </td>
<td class="TableStyle-RuledTableWithHeading_DoNotEdit-Body-Body1">trigger()</td>
</tr>
</tbody>
<col class="TableStyle-RuledTableWithHeading_DoNotEdit-Column-Column1" style="width: 0.3in;"></col></table>
<p oldrole="para"><i oldrole="emphasis" role="bold">Description:</i> A filter that specifies the final message of the context. If the filter matches the incoming message, <MadCap:variable name="General.abbrev"></MadCap:variable> generates and sends the triggered message (specified in the <a href="parser-grouping-by.htm">aggregate()</a> option), and clears the context.</p>


<h6 name="grouping-by-parser-where" oldrole="simplesect">where()</h6>
<MadCap:keyword term="where()"></MadCap:keyword>
<MadCap:keyword term="grouping-by():['where()']"></MadCap:keyword>
<table cellspacing="0" class="RuledTableWithHeading_DoNotEdit" colsep="0" frame="topbot" rowsep="0" style="width: 100%;mc-table-style: url('../../../Resources/TableStyles/RuledTableWithHeading_DoNotEdit.css');">
<tbody>
<tr class="TableStyle-RuledTableWithHeading_DoNotEdit-Body-Body1">
<td class="TableStyle-RuledTableWithHeading_DoNotEdit-Body-Body1">Synopsis: 

                            </td>
<td class="TableStyle-RuledTableWithHeading_DoNotEdit-Body-Body1">where()</td>
</tr>
</tbody>
<col class="TableStyle-RuledTableWithHeading_DoNotEdit-Column-Column1" style="width: 0.3in;"></col></table>
<p oldrole="para"><i oldrole="emphasis" role="bold">Description:</i> Specifies a filter condition. Messages not matching the filter will not be added to the context. Note that the <span class="Code" oldrole="parameter">where()</span> filter has access only to the current message.</p>

</body></html>
