<?xml version="1.0" encoding="UTF-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd"><body name="monitor-syslog-ng-statistics-metrics" oldrole="section">
<h1 name="monitor-syslog-ng-statistics-metrics">The <span class="Code" oldrole="parameter">monitoring()</span> source</h1>
<MadCap:keyword term="source drivers:[&lt;span class=&quot;Code&quot; oldrole=&quot;parameter&quot;&gt;monitoring()&lt;/span&gt;, ' driver']"></MadCap:keyword>
<MadCap:keyword term="source drivers:[&lt;span class=&quot;Code&quot; oldrole=&quot;parameter&quot;&gt;monitoring-welf()&lt;/span&gt;, ' driver']"></MadCap:keyword>
<MadCap:keyword term="statistics"></MadCap:keyword>
<MadCap:keyword term="log statistics"></MadCap:keyword>
<MadCap:keyword term="message statistics"></MadCap:keyword>
<MadCap:keyword term="message counters"></MadCap:keyword>
<p>The <span class="Code" oldrole="parameter">monitoring()</span> source allows you to select which statistics of <MadCap:variable name="General.abbrev"></MadCap:variable> you want to monitor. In addition, the statistics are available as structured name-value pairs, so you can format the output similarly to other log messages. That way, you can easily convert the statistics and metrics, for example, into JSON or WELF format. That way, you can send the statistics of your log messages into a monitoring solution<MadCap:conditionaltext MadCap:conditions="General.ose">, for example, into Riemann, Redis, or Graphite</MadCap:conditionaltext>.</p>
<p>The <span class="Code" oldrole="parameter">monitoring()</span> source queries the statistics (counters) that <MadCap:variable name="General.abbrev"></MadCap:variable> collects, formats them, and optionally resets the counters. The <span class="Code" oldrole="parameter">monitoring()</span> source emits only these messages, making it easy to route them to their appropriate destination. The <a href="reference-options.htm"><span class="Code" oldrole="parameter">stats-level()</span> global option</a> determines exactly which statistics <MadCap:variable name="General.abbrev"></MadCap:variable> collects.</p>
<h6 oldrole="formalpara">Declaration:</h6>

<pre class="Code" oldrole="synopsis">source s_monitor{
    monitoring(
        query("*")
    );};</pre>
<div class="Example">
<h6 name="example-source-monitor-json" oldrole="example"><a name="example-source-monitor-json"></a>Example: Save all statistics into a file in JSON format</h6>
<p>The following configuration increases the <span class="Code" oldrole="parameter">stats-level()</span> option to 3, and generates a JSON-formatted message every 10 seconds. The generated message contains every available statistics, and is saved into the <span class="Code" oldrole="filename">/var/log/syslog-ng-statistics.log</span> file.</p>
<pre class="Code" oldrole="synopsis">@version: <MadCap:variable name="Version.configversion"></MadCap:variable>
options{
    stats-level(3);
    keep-hostname(no);
};
source s_monitor{ monitoring(
    query("*")
    freq(10)
    message-template('$(format-json --scope nv_pairs)')
    );};
destination d_file {
    file("/var/log/syslog-ng-statistics.log");
};
log {
    source(s_monitor);
    destination(d_file);
};</pre>
<p>The generated message is similar to this one:</p>
<pre class="Code" oldrole="synopsis">[2017-04-03T14:00:31.786133] Outgoing message; message='Apr  3 14:00:31 example-hostname syslog-ng[12281]: {"src":{"severity":{"7":{"processed":"0"},"6":{"processed":"0"},"5":{"processed":"0"},"4":{"processed":"0"},"3":{"processed":"0"},"2":{"processed":"0"},"1":{"processed":"0"},"0":{"processed":"0"}},"monitoring":{"s_monitor#0":{"stamp":"0","processed":"0"}},"facility":{"other":{"processed":"0"},"9":{"processed":"0"},"8":{"processed":"0"},"7":{"processed":"0"},"6":{"processed":"0"},"5":{"processed":"0"},"4":{"processed":"0"},"3":{"processed":"0"},"23":{"processed":"0"},"22":{"processed":"0"},"21":{"processed":"0"},"20":{"processed":"0"},"2":{"processed":"0"},"19":{"processed":"0"},"18":{"processed":"0"},"17":{"processed":"0"},"16":{"processed":"0"},"15":{"processed":"0"},"14":{"processed":"0"},"13":{"processed":"0"},"12":{"processed":"0"},"11":{"processed":"0"},"10":{"processed":"0"},"1":{"processed":"0"},"0":{"processed":"0"}}},"source":{"s_monitor":{"processed":"0"}},"global":{"sdata_updates":{"processed":"0"},"payload_reallocs":{"processed":"2"},"msg_clones":{"processed":"0"}},"destination":{"d_file":{"processed":"0"}},"center":{"received":{"processed":"0"},"queued":{"processed":"0"}},"PROGRAM":"syslog-ng","PID":"12281"}\x0a'</pre>
<p>For reference, the JSON part in a readable format is:</p>
<pre class="Code" oldrole="synopsis">{
  "center" : {
      "queued" : { "processed" : "0" },
      "received" : { "processed" : "0" }
    },
  "destination" : { "d_file" : { "processed" : "0" } },
  "global" : {
      "msg_clones" : { "processed" : "0" },
      "payload_reallocs" : { "processed" : "2" },
      "sdata_updates" : { "processed" : "0" }
    },
  "PID" : "12281",
  "PROGRAM" : "syslog-ng",
  "source" : { "s_monitor" : { "processed" : "0" } },
  "src" : {
      "facility" : {
          "0" : { "processed" : "0" },
          "1" : { "processed" : "0" },
          "2" : { "processed" : "0" },
          "3" : { "processed" : "0" },
          "4" : { "processed" : "0" },
          "5" : { "processed" : "0" },
          "6" : { "processed" : "0" },
          "7" : { "processed" : "0" },
          "8" : { "processed" : "0" },
          "9" : { "processed" : "0" },
          "10" : { "processed" : "0" },
          "11" : { "processed" : "0" },
          "12" : { "processed" : "0" },
          "13" : { "processed" : "0" },
          "14" : { "processed" : "0" },
          "15" : { "processed" : "0" },
          "16" : { "processed" : "0" },
          "17" : { "processed" : "0" },
          "18" : { "processed" : "0" },
          "19" : { "processed" : "0" },
          "20" : { "processed" : "0" },
          "21" : { "processed" : "0" },
          "22" : { "processed" : "0" },
          "23" : { "processed" : "0" },
          "other" : { "processed" : "0" }
        },
      "monitoring" : { "s_monitor#0" : {
              "processed" : "0",
              "stamp" : "0"
            } },
      "severity" : {
          "0" : { "processed" : "0" },
          "1" : { "processed" : "0" },
          "2" : { "processed" : "0" },
          "3" : { "processed" : "0" },
          "4" : { "processed" : "0" },
          "5" : { "processed" : "0" },
          "6" : { "processed" : "0" },
          "7" : { "processed" : "0" }
        }
    }
}</pre>
</div>
<h6 name="reference-source-monitoring"><span class="Code" oldrole="parameter">monitoring()</span> source options</h6>
<p>The <span class="Code" oldrole="parameter">monitoring()</span> driver has the following options. Only the <span class="Code" oldrole="parameter">query()</span> option is required, other options are optional.</p>

<h6 oldrole="simplesect">clear-on-read()</h6>
<MadCap:keyword term="clear-on-read()"></MadCap:keyword>
<MadCap:keyword term="clear_on_read()"></MadCap:keyword>
<table cellspacing="0" class="RuledTableWithHeading_DoNotEdit" colsep="0" frame="topbot" rowsep="0" style="width: 100%;mc-table-style: url('../../../Resources/TableStyles/RuledTableWithHeading_DoNotEdit.css');">
<tbody>
<tr class="TableStyle-RuledTableWithHeading_DoNotEdit-Body-Body1">
<td class="TableStyle-RuledTableWithHeading_DoNotEdit-Body-Body1">Type:

                            </td>
<td class="TableStyle-RuledTableWithHeading_DoNotEdit-Body-Body1">boolean</td>
</tr>
<tr class="TableStyle-RuledTableWithHeading_DoNotEdit-Body-Body1">
<td class="TableStyle-RuledTableWithHeading_DoNotEdit-Body-Body1">Default:

                            </td>
<td class="TableStyle-RuledTableWithHeading_DoNotEdit-Body-Body1">no</td>
</tr>
</tbody>
<col class="TableStyle-RuledTableWithHeading_DoNotEdit-Column-Column1" style="width: 0.3in;"></col></table>
<p><i oldrole="emphasis" role="bold">Description</i>: Reset the counters after reading. Note that if a destination is not available, <MadCap:variable name="General.abbrev"></MadCap:variable> will not reset its counter even if <span class="Code" oldrole="parameter">clear-on-read()</span> is set to <span class="Code" oldrole="userinput">yes</span>.</p>
<p>If you use multiple monitoring source, and you use the <span class="Code" oldrole="parameter">clear-on-read()</span> parameter, make sure to adjust the queries appropriately. Overlapping queries that read and reset the same counters result in incorrect statistics.</p>


<h6 oldrole="simplesect">freq()</h6>
<MadCap:keyword term="freq()"></MadCap:keyword>
<table cellspacing="0" class="RuledTableWithHeading_DoNotEdit" colsep="0" frame="topbot" rowsep="0" style="width: 100%;mc-table-style: url('../../../Resources/TableStyles/RuledTableWithHeading_DoNotEdit.css');">
<tbody>
<tr class="TableStyle-RuledTableWithHeading_DoNotEdit-Body-Body1">
<td class="TableStyle-RuledTableWithHeading_DoNotEdit-Body-Body1">Type:

                            </td>
<td class="TableStyle-RuledTableWithHeading_DoNotEdit-Body-Body1">integer</td>
</tr>
<tr class="TableStyle-RuledTableWithHeading_DoNotEdit-Body-Body1">
<td class="TableStyle-RuledTableWithHeading_DoNotEdit-Body-Body1">Default:

                            </td>
<td class="TableStyle-RuledTableWithHeading_DoNotEdit-Body-Body1">600 [seconds]</td>
</tr>
</tbody>
<col class="TableStyle-RuledTableWithHeading_DoNotEdit-Column-Column1" style="width: 0.3in;"></col></table>
<p><i oldrole="emphasis" role="bold">Description</i>: Specifies how often does <MadCap:variable name="General.abbrev"></MadCap:variable> execute the query and send a statistics message.</p>


<h6 oldrole="simplesect">message-template()</h6>
<MadCap:keyword term="message-template()"></MadCap:keyword>
<MadCap:keyword term="message_template()"></MadCap:keyword>
<table cellspacing="0" class="RuledTableWithHeading_DoNotEdit" colsep="0" frame="topbot" rowsep="0" style="width: 100%;mc-table-style: url('../../../Resources/TableStyles/RuledTableWithHeading_DoNotEdit.css');">
<tbody>
<tr class="TableStyle-RuledTableWithHeading_DoNotEdit-Body-Body1">
<td class="TableStyle-RuledTableWithHeading_DoNotEdit-Body-Body1">Type:

                            </td>
<td class="TableStyle-RuledTableWithHeading_DoNotEdit-Body-Body1">string</td>
</tr>
<tr class="TableStyle-RuledTableWithHeading_DoNotEdit-Body-Body1">
<td class="TableStyle-RuledTableWithHeading_DoNotEdit-Body-Body1">Default:

                            </td>
<td class="TableStyle-RuledTableWithHeading_DoNotEdit-Body-Body1"> N/A </td>
</tr>
</tbody>
<col class="TableStyle-RuledTableWithHeading_DoNotEdit-Column-Column1" style="width: 0.3in;"></col></table>
<p><i oldrole="emphasis" role="bold">Description</i>: Specifies how the message containing the queried statistics is formatted. You can use macros and template functions in the format string. For example, you can format the message as a JSON object:</p>
<pre class="Code" oldrole="synopsis">source s_monitor{ monitoring(
    query("*")
    freq(10)
    message-template('$(format-json --scope nv_pairs)')
    );};</pre>
<p>Note that here you can only format the payload of the message (that is the, ${MESSAGE} part). You can format the headers or other parts of the outgoing message in the destination driver.</p>


<h6 oldrole="simplesect">query()</h6>
<MadCap:keyword term="query()"></MadCap:keyword>
<table cellspacing="0" class="RuledTableWithHeading_DoNotEdit" colsep="0" frame="topbot" rowsep="0" style="width: 100%;mc-table-style: url('../../../Resources/TableStyles/RuledTableWithHeading_DoNotEdit.css');">
<tbody>
<tr class="TableStyle-RuledTableWithHeading_DoNotEdit-Body-Body1">
<td class="TableStyle-RuledTableWithHeading_DoNotEdit-Body-Body1">Type:

                            </td>
<td class="TableStyle-RuledTableWithHeading_DoNotEdit-Body-Body1">string</td>
</tr>
<tr class="TableStyle-RuledTableWithHeading_DoNotEdit-Body-Body1">
<td class="TableStyle-RuledTableWithHeading_DoNotEdit-Body-Body1">Default:

                            </td>
<td class="TableStyle-RuledTableWithHeading_DoNotEdit-Body-Body1"> N/A </td>
</tr>
</tbody>
<col class="TableStyle-RuledTableWithHeading_DoNotEdit-Column-Column1" style="width: 0.3in;"></col></table>
<p><i oldrole="emphasis" role="bold">Description</i>: Specifies which statistical counters will be included in the messages. Note that the list of available counters depends on your <MadCap:variable name="General.abbrev"></MadCap:variable> configuration (mainly the configured sources and destinations) and on the <a href="reference-options.htm"><span class="Code" oldrole="parameter">stats-level()</span> global option</a>. The <span class="Code" oldrole="userinput">*</span> string includes every available counters. The syntax of the <span class="Code" oldrole="parameter">query</span> option is identical to the <span class="Code" oldrole="command">syslog-ng-ctl query get &lt;query&gt;</span> command.</p>
<pre class="Code" oldrole="synopsis">source s_monitor{ monitoring(
    query("*")
    );};</pre>
<p>For example, the <span class="Code" oldrole="userinput">"destination*"</span> query lists the configured destinations, and the metrics related to each destination. An example output:</p>
<pre class="Code" oldrole="synopsis">destination.java.d_elastic#0.java_dst(ElasticSearch,elasticsearch-syslog-ng-test,t7cde889529c034aea9ec_micek).stats.dropped: 0
destination.java.d_elastic#0.java_dst(ElasticSearch,elasticsearch-syslog-ng-test,t7cde889529c034aea9ec_micek).stats.processed: 0
destination.java.d_elastic#0.java_dst(ElasticSearch,elasticsearch-syslog-ng-test,t7cde889529c034aea9ec_micek).stats.stored: 0
destination.d_elastic.stats.processed: 0</pre>

<h6 name="source-monitoring-welf">The <span class="Code" oldrole="parameter">monitoring-welf()</span> source</h6>
<p>This source is actually preconfigured <span class="Code" oldrole="parameter">monitoring()</span> source that generates statistics messages in WELF format. Starting with <MadCap:conditionaltext MadCap:conditions="General.pe"><MadCap:variable name="General.abbrev"></MadCap:variable> version 7.0.2</MadCap:conditionaltext>, <MadCap:variable name="General.abbrev"></MadCap:variable> uses this driver for new installations to generate statistics. By default, a message is sent every 10 minutes (600 seconds).</p>
<pre class="Code" oldrole="synopsis">@version: <MadCap:variable name="Version.configversion"></MadCap:variable>
@include 'scl.conf'
options {
    stats_level(3);
};
source s_monitoring_welf {
    monitoring-welf(freq(10) query('*'));
};
destination d_file {
    file("/tmp/output.txt");
};
log {
    source(s_monitoring_welf);
    destination(d_file);
};</pre>
<p>The output is similar to the following:</p>
<pre class="Code" oldrole="synopsis">Apr  3 14:03:26 example-host syslog-ng[12363]: PID=12363 PROGRAM=syslog-ng center.queued.processed=0 center.received.processed=0 destination.d_file.processed=0 global.msg_clones.processed=0 global.payload_reallocs.processed=2 global.sdata_updates.processed=0 source.s_monitoring_welf.processed=0 src.facility.0.processed=0 src.facility.1.processed=0 src.facility.10.processed=0 src.facility.11.processed=0 src.facility.12.processed=0 src.facility.13.processed=0 src.facility.14.processed=0 src.facility.15.processed=0 src.facility.16.processed=0 src.facility.17.processed=0 src.facility.18.processed=0 src.facility.19.processed=0 src.facility.2.processed=0 src.facility.20.processed=0 src.facility.21.processed=0 src.facility.22.processed=0 src.facility.23.processed=0 src.facility.3.processed=0 src.facility.4.processed=0 src.facility.5.processed=0 src.facility.6.processed=0 src.facility.7.processed=0 src.facility.8.processed=0 src.facility.9.processed=0 src.facility.other.processed=0 src.monitoring.s_monitoring_welf#0.processed=0 src.monitoring.s_monitoring_welf#0.stamp=0 src.severity.0.processed=0 src.severity.1.processed=0 src.severity.2.processed=0 src.severity.3.processed=0 src.severity.4.processed=0 src.severity.5.processed=0 src.severity.6.processed=0 src.severity.7.processed=0\x0a'</pre>
</body></html>