<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
    <head>
        <meta name="description" content="" />
    </head>
    <body name="destination-snmp">
        <h1><a name="destination-snmp"></a>snmp: Sending SNMP traps</h1>
        <MadCap:keyword term="destination drivers:['snmp']">
        </MadCap:keyword>
        <p>The <span class="Code" oldrole="parameter">snmp()</span> driver sends SNMP traps using the Simple Network Management Protocol version 2c or version 3. Incoming log messages can be converted to SNMP traps, as the fields of the SNMP messages can be customized using <MadCap:variable name="General.OSE"></MadCap:variable> macros.</p>
        <p>The <span class="Code" oldrole="parameter">snmp()</span> driver is available in <MadCap:variable name="General.OSE"></MadCap:variable> version <MadCap:conditionaltext MadCap:conditions="General.PE">7.0.15</MadCap:conditionaltext><MadCap:conditionaltext MadCap:conditions="General.ose">3.22</MadCap:conditionaltext> and later.</p>
        <div>
			<div class="Note">
				<p class="Hyphenation"><span class="AllNoteStyles">NOTE:</span> 
				The <span class="Code" oldrole="parameter">snmp</span> destination driver currently supports sending SNMP traps only using the UDP transport protocol.</p>
            </div>
        </div>
        <p>The <span class="Code" oldrole="parameter">snmp()</span> driver requires the <span class="Code" oldrole="parameter">host()</span>, <span class="Code" oldrole="parameter">trap-obj()</span>, and <span class="Code" oldrole="parameter">snmp-obj()</span> options to be set, as well as the <span class="Code" oldrole="parameter">engine-id()</span> and <span class="Code" oldrole="parameter">version()</span> options when using the SNMPv3 protocol. For the list of available optional parameters, see <MadCap:xref href="reference-destination-snmp.htm"><span style="color: #04aada;" class="mcFormatColor">more</span></MadCap:xref>.</p>
        <div>
            <h6>Declaration:</h6><pre>destination d_snmp {snmp(host() trap-obj() snmp-obj() ...);};</pre>
        </div>
        <div>
            <table cellspacing="0" class="TableStyle-NoteTable_Yellow_DoNotEdit" style="width: 100%;mc-table-style: url('../../../Resources/TableStyles/NoteTable_Yellow_DoNotEdit.css');">
                <col class="TableStyle-NoteTable_Yellow_DoNotEdit-Column-Column1" style="width: 0.3in;">
                </col>
                <col class="TableStyle-NoteTable_Yellow_DoNotEdit-Column-Column2">
                </col>
                <tbody>
                    <tr class="TableStyle-NoteTable_Yellow_DoNotEdit-Body-Body1">
                        <td class="TableStyle-NoteTable_Yellow_DoNotEdit-BodyB-Column1-Body1">
                            <p>
                                <img src="../../../Resources/Images/Common/caution.png" />
                            </p>
                        </td>
                        <td class="TableStyle-NoteTable_Yellow_DoNotEdit-BodyA-Column2-Body1"><span class="Yellow">Caution: </span>
                            <p>If <MadCap:variable name="General.OSE"></MadCap:variable> cannot resolve the destination hostname during startup, it will try to resolve the hostname again when the next message to be sent as an SNMP trap is received. However, if this name resolution fails, the trap will be dropped.</p>
                        </td>
                    </tr>
                </tbody>
            </table>
        </div>
        <div>
			<div class="Note">
				<p class="Hyphenation"><span class="AllNoteStyles">NOTE:</span> 
				The <span class="Code" oldrole="parameter">snmp()</span> destination driver does not generate MARK signals itself, but can receive and forward MARK signals.</p>
            </div>
        </div>
        <div class="example">
            <h6><a name="example-destination-snmp"></a>Example: Using the snmp() destination driver</h6>
            <p>The following example defines an SNMP destination that uses the SNMPv2c protocol.</p><pre>destination d_snmpv2c{
    snmp(
        version('v2c')
        host('192.168.1.1')
        trap-obj('.1.3.6.1.6.3.1.1.4.1.0', 'Objectid', '.1.3.6.1.4.1.18372.3.1.1.1.2.1')
        snmp-obj('.1.3.6.1.4.1.18372.3.1.1.1.1.1.0', 'Octetstring', 'Test SNMP trap')
        snmp-obj('.1.3.6.1.4.1.18372.3.1.1.1.1.2.0', 'Octetstring', 'admin')
        snmp-obj('.1.3.6.1.4.1.18372.3.1.1.1.1.3.0', 'Ipaddress', '192.168.1.1')
        );
};</pre>
            <p>The following example defines an SNMP destination that uses the SNMPv3 protocol and uses macros to fill the values of the SNMP objects.</p><pre>destination d_snmpv3{
    snmp(
        version('v3')
        host('192.168.1.1')
        port(162)
        engine-id('0xdeadbeefde')
        auth-username('myusername')
        auth-password('password')
        enc-algorithm('AES')
        enc-password('password')
        trap-obj('.1.3.6.1.6.3.1.1.4.1.0', 'Objectid', '.1.3.6.1.4.1.18372.3.1.1.1.2.1')
        snmp-obj('.1.3.6.1.4.1.18372.3.1.1.1.1.1', 'Octetstring', '${MESSAGE}')
        snmp-obj('.1.3.6.1.4.1.18372.3.1.1.1.1.2', 'Octetstring', 'admin')
        snmp-obj('.1.3.6.1.4.1.18372.3.1.1.1.1.3', 'Ipaddress', '${SOURCEIP}')
        );
};</pre>
        </div>
    </body>
</html>