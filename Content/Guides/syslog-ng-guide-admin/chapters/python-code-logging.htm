<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
    <head>
        <meta name="description" content="" />
    </head>
    <body name="python-code-logging" oldrole="section">
        <h1 name="python-code-logging">Logging from your Python code</h1>
        <p>You can extend and customize <MadCap:variable name="General.abbrev"></MadCap:variable> easily by writing <a href="python-destination.htm">destinations</a>, <a href="python-parser.htm">parsers</a>, <a href="python-destination.htm#template-function-python">template functions</a>, and <a href="python-source.htm">sources</a> in Python.</p>
        <p>To debug and troubleshoot your Python code, <MadCap:variable name="General.abbrev"></MadCap:variable> allows you to use the <span class="Code">logger()</span> method to send log messages to the <a href="configuring-sources-internal.htm"><span class="Code">internal()</span></a> source of <MadCap:variable name="General.abbrev"></MadCap:variable>. That way the diagnostic messages of your Python code are treated the same way as other such log messages of <MadCap:variable name="General.abbrev"></MadCap:variable>. This has the following benefits:</p>
        <ul>
            <li>
                <p>The <span class="Code">logger()</span> method respects the log level settings of <MadCap:variable name="General.abbrev"></MadCap:variable>. You can write error, warning, info, debug, and trace level messages.</p>
            </li>
            <li>
                <p>You can follow what your Python code is doing even if <MadCap:variable name="General.abbrev"></MadCap:variable> is running as a daemon in the background.</p>
            </li>
        </ul>
        <p>Logging to the <span class="Code">internal()</span> source is available in <MadCap:variable name="General.abbrev"></MadCap:variable> version <MadCap:conditionaltext MadCap:conditions="General.ose">3.20</MadCap:conditionaltext><MadCap:conditionaltext MadCap:conditions="General.pe">7.0.14</MadCap:conditionaltext> and later.</p>
        <p class="Procedure">To send log messages to the internal() source from Python</p>
        <ol>
            <li>
                <p>Add the following import to your Python code:</p><pre class="Code">import syslogng</pre>
            </li>
            <li>
                <p>Create a logger object:</p><pre class="Code">logger = syslogng.Logger()</pre>
            </li>
            <li>
                <p>Use the logger object in your Python code, for example:</p><pre class="Code">logger.info("This is a sample log message send from the Python code.")</pre>
                <p>You can use the following log levels: <span class="Code">logger.error</span>, <span class="Code">logger.warning</span>, <span class="Code">logger.info</span>, <span class="Code">logger.debug</span>, <span class="Code">logger.trace</span></p>
            </li>
            <li>
                <p>Make sure that your <MadCap:variable name="General.abbrev"></MadCap:variable> configuration includes the <span class="Code">internal()</span> source, for example:</p><pre class="Code">source s_internal { internal(); };
destination d_internal { file("/var/log/internal.txt"); };
log {source(s_internal); destination(d_internal); };
</pre>
            </li>
        </ol>
    </body>
</html>