<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd"><body name="reference-logflags" oldrole="section">
<h1 name="reference-logflags" xmlns="http://docbook.org/ns/docbook">Log path flags</h1>
<p oldrole="para">Flags influence the behavior of syslog-ng, and the way it processes messages. The following flags may be used in the log paths, as described in <MadCap:xref href="logpath.htm#logpath"></MadCap:xref>.</p>
<MadCap:snippetBlock src="logflags.htm"></MadCap:snippetBlock>
<table cellspacing="0" class="TableStyle-NoteTable_Yellow_DoNotEdit" oldrole="warning" style="width: 100%;mc-table-style: url('../../../Resources/TableStyles/NoteTable_Yellow_DoNotEdit.css');"><col class="TableStyle-NoteTable_Yellow_DoNotEdit-Column-Column1" style="width: 0.3in;"></col><col class="TableStyle-NoteTable_Yellow_DoNotEdit-Column-Column2"></col><tbody><tr class="TableStyle-NoteTable_Yellow_DoNotEdit-Body-Body1"><td class="TableStyle-NoteTable_Yellow_DoNotEdit-BodyB-Column1-Body1"><p><img src="../../../Resources/Images/Common/caution.png"/></p></td><td class="TableStyle-NoteTable_Yellow_DoNotEdit-BodyA-Column2-Body1"><span class="Yellow">Caution: </span><p oldrole="para">The <span class="Code" oldrole="parameter">final</span>, <span class="Code" oldrole="parameter">fallback</span>, and <span class="Code" oldrole="parameter">catchall</span> flags apply only for the top-level log paths, they have no effect on embedded log paths.</p></td></tr></tbody></table>
<div class="Example">
<h6 name="example-logpath-flags" oldrole="example">Example: Using log path flags</h6>
<!--<para>The following log path processes every message received to the
                    <parameter>s_localhost</parameter> source that was not processed by earlier log
                    paths. As syslog-ng processes log paths in the order they appear in the
                    configuration file, place such log paths at the end of the file. A typical situation
                    is to use filters to select the most important messages and send them to specific
                    destinations, and process the remaining messages with a fallback log path.</para>
                    <synopsis>.
                    .
                    .
                    log { source(s_localhost); destination(d_tcp); flags(fallback); };</synopsis>-->
<p oldrole="para">Let's suppose that you have two hosts (<span class="Code" oldrole="userinput">myhost_A</span> and <span class="Code" oldrole="userinput">myhost_B</span>) that run two applications each (<span class="Code" oldrole="userinput">application_A</span> and <span class="Code" oldrole="userinput">application_B</span>), and you collect the log messages to a central syslog-ng server. On the server, you create two log paths:</p>
<ul oldrole="itemizedlist">
<li oldrole="listitem">
<p oldrole="para">one that processes only the messages sent by <span class="Code" oldrole="userinput">myhost_A</span>, and</p>
</li>
<li oldrole="listitem">
<p oldrole="para">one that processes only the messages sent by <span class="Code" oldrole="userinput">application_A</span>.</p>
</li>
</ul>
<p oldrole="para">This means that messages sent by <span class="Code" oldrole="userinput">application_A</span> running on <span class="Code" oldrole="userinput">myhost_A</span> will be processed by both log paths, and the messages of <span class="Code" oldrole="userinput">application_B</span> running on <span class="Code" oldrole="userinput">myhost_B</span> will not be processed at all.</p>
<ul oldrole="itemizedlist">
<li oldrole="listitem">
<p oldrole="para">If you add the <span class="Code" oldrole="parameter">final</span> flag to the first log path, then only this log path will process the messages of <span class="Code" oldrole="userinput">myhost_A</span>, so the second log path will receive only the messages of <span class="Code" oldrole="userinput">application_A</span> running on <span class="Code" oldrole="userinput">myhost_B</span>.</p>
</li>
<li oldrole="listitem">
<p oldrole="para">If you create a third log path that includes the <span class="Code" oldrole="parameter">fallback</span> flag, it will process the messages not processed by the first two log paths, in this case, the messages of <span class="Code" oldrole="userinput">application_B</span> running on <span class="Code" oldrole="userinput">myhost_B</span>.</p>
</li>
<li oldrole="listitem">
<p oldrole="para">Adding a fourth log path with the <span class="Code" oldrole="parameter">catchall</span> flag would process every message received by the syslog-ng server.</p>
<pre class="Code" oldrole="synopsis">log { source(s_localhost); destination(d_file); flags(catchall); };</pre>
</li>
</ul>
<p oldrole="para">The following example shows a scenario that can result in message loss. Do NOT use such a configuration, unless you know exactly what you are doing. The problem is if a message matches the filters in the first part of the first log path, &abbrev; treats the message as 'processed'. Since the first log path includes the <span class="Code" oldrole="parameter">final</span> flag, &abbrev; will not pass the message to the second log path (the one with the <span class="Code" oldrole="parameter">fallback</span> flag). As a result, &abbrev; drops messages that do not match the filter of the embedded log path.</p>
<pre class="Code" oldrole="synopsis"># Do not use such a configuration, unless you know exactly what you are doing.
log {
    source(s_network);
    # Filters in the external log path.
    # If a message matches this filter, it is treated as 'processed'
    filter(f_program);
    filter(f_message);
    log {
        # Filter in the embedded log path.
        # If a message does not match this filter, it is lost, it will not be processed by the 'fallback' log path
        filter(f_host);
        destination(d_file1);
    };
    flags(final);
};

log {
    source(s_network);
    destination(d_file2);
    flags(fallback);
};</pre>
</div>
<div class="Example">
<h6 oldrole="example">Example: Using the <span class="Code" oldrole="parameter">drop-unmatched</span> flag</h6>
<p oldrole="para">In the following example, if a log message arrives whose <span class="Code" oldrole="userinput">$MSG</span> part does not contain the string <span class="Code" oldrole="userinput">foo</span>, then &abbrev; will discard the message and will not check compliance with the second <span class="Code" oldrole="userinput">if</span> condition.</p>
<pre class="Code" oldrole="synopsis">...
if {
    filter { message('foo') };
    <i oldrole="emphasis" role="bold">flags(drop-unmatched)</i>
};
if {
    filter { message('bar') };
};
...</pre>
<p oldrole="para">(Without the <span class="Code" oldrole="parameter">drop-unmatched</span> flag, &abbrev; would check if the message complies with the second <span class="Code" oldrole="userinput">if</span> condition, that is, whether or not the message contains the string <span class="Code" oldrole="userinput">bar</span> .)</p>
</div>
</body></html>
