<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
    <head>
        <meta name="description" content="" />
    </head>
    <body name="regular-expressions">
        <h1 name="regular-expressions"><a name="regular-expressions"></a>Regular expressions</h1>
        <MadCap:keyword term="regular expressions">
        </MadCap:keyword>
        <MadCap:keyword term="type()">
        </MadCap:keyword>
        <p>Filters and substitution rewrite rules can use regular expressions. In regular expressions, the characters <span class="Code" oldrole="userinput">()[].*?+^$|\</span> are used as special symbols. Depending on how you want to use these characters and which quotation mark you use, these characters must be used differently, as summarized below.</p>
        <ul>
            <li>
                <p>Strings between single quotes (<span class="Code" oldrole="userinput">'string'</span>) are treated literally and are not interpreted at all, you do not have to escape special characters. For example, the output of <span class="Code" oldrole="userinput">'\x41'</span> is <span class="Code" oldrole="userinput">\x41</span> (characters as follows: backslash, <span class="Code" oldrole="userinput">x</span>(letter), <span class="Code" oldrole="userinput">4</span>(number), <span class="Code" oldrole="userinput">1</span>(number)). This makes writing and reading regular expressions much more simple: it is recommended to use single quotes when writing regular expressions.</p>
            </li>
            <li>
                <p>When enclosing strings between double-quotes (<span class="Code" oldrole="userinput">"string"</span>), the string is interpreted and you have to escape special characters, that is, to precede them with a backslash (<span class="Code" oldrole="userinput">\</span>) character if they are meant literally. for example, the output of the <span class="Code" oldrole="userinput">"\x41"</span> is simply the letter <span class="Code" oldrole="userinput">a</span>. Therefore special characters like <span class="Code" oldrole="userinput">\</span>(backslash) or <span class="Code" oldrole="userinput">"</span>(quotation mark) must be escaped (<span class="Code" oldrole="userinput">\\</span> and <span class="Code" oldrole="userinput">\"</span>). The following expressions are interpreted: <span class="Code" oldrole="userinput">\a</span>, <span class="Code" oldrole="userinput">\n</span>, <span class="Code" oldrole="userinput">\r</span>, <span class="Code" oldrole="userinput">\t</span>, <span class="Code" oldrole="userinput">\v</span>. For example, the <span class="Code" oldrole="userinput">\$40</span> expression matches the <span class="Code" oldrole="userinput">$40</span> string. Backslashes have to be escaped as well if they are meant literally, for example, the <span class="Code" oldrole="userinput">\\d</span> expression matches the <span class="Code" oldrole="userinput">\d</span> string.</p>
                <div cellspacing="0" class="Note" oldrole="tip" style="width: 100%;"><span class="AllNoteStyles">TIP: </span>
                    <p>If you use single quotes, you do not need to escape the backslash, for example, <span class="Code" oldrole="userinput">match("\\.")</span> is equivalent to <span class="Code" oldrole="userinput">match('\.')</span>.</p>
                </div>
            </li>
            <li>
                <p>Enclosing alphanumeric strings between double-quotes (<span class="Code" oldrole="userinput">"string"</span>) is not necessary, you can just omit the double-quotes. for example, when writing filters, <span class="Code" oldrole="userinput">match("sometext")</span> and <span class="Code" oldrole="userinput">match(sometext)</span> will both match for the <span class="Code" oldrole="userinput">sometext</span> string.</p>
               
				<div class="Note">
					<p class="Hyphenation"><span class="AllNoteStyles">NOTE:</span> Only strings containing alphanumerical characters can be used without quotes or double quotes. If the string contains whitespace or any special characters (<span class="Code" oldrole="userinput">()[].*?+^$|\</span> or <span class="Code" oldrole="userinput">;:#</span>), you must use quotes or double quotes.</p>
                    <p>When using the <span class="Code" oldrole="userinput">;:#</span> characters, you must use quotes or double quotes, but escaping them is not required.</p>
                </div>
            </li>
        </ul>
        <MadCap:keyword term="regular expressions:['case-insensitive']">
        </MadCap:keyword>
        <MadCap:keyword term="regular expressions:['escaping']">
        </MadCap:keyword>
        <MadCap:keyword term="escaping special characters">
        </MadCap:keyword>
        <p>By default, all regular expressions are case sensitive. To disable the case sensitivity of the expression, add the <span class="Code" oldrole="userinput">flags(ignore-case)</span> option to the regular expression.</p><pre>filter demo_regexp_insensitive {
    host("system" flags(ignore-case));
};</pre>
        <div class="Note">
            <p class="Hyphenation"><span class="AllNoteStyles">NOTE:</span>Adding the <span class="Code" oldrole="userinput">flags(ignore-case)</span> option to glob patterns does not disable case sensitivity.</p>
        </div>
        <p>The regular expressions can use up to 255 regexp matches (<span class="Code" oldrole="userinput">${1} ... ${255}</span>), but only from the last filter and only if the <span class="Code" oldrole="userinput">flags("store-matches")</span> flag was set for the filter. For case-insensitive searches, use the <span class="Code" oldrole="userinput">flags("ignore-case")</span> option.</p>
    </body>
</html>