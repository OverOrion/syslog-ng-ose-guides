<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
    <head>
        <link href="../../../Resources/TableStyles/NoteTable_Yellow_DoNotEdit.css" rel="stylesheet" MadCap:stylesheetType="table" />
        <meta name="description" content="" />
    </head>
    <body name="python-destination">
        <h1 name="python-destination">python: writing custom Python destinations</h1>
        <MadCap:keyword term="python destination">
        </MadCap:keyword>
        <MadCap:keyword term="custom python destination">
        </MadCap:keyword>
        <MadCap:keyword term="destination:['python']">
        </MadCap:keyword>
        <p>The Python destination allows you to write your own destination in Python. You can import external Python modules to process the messages, and send them to other services or servers. Since many services have a Python library, the Python destination makes integrating <MadCap:variable name="General.OSE" /> very easy and quick.</p>
        <MadCap:snippetBlock src="../../shared/chunk/python-blocks.htm">
        </MadCap:snippetBlock>
        <MadCap:snippetBlock src="../../shared/wnt/note-python-persist-name.flsnp">
        </MadCap:snippetBlock>
        <div>
            <h6>Declaration:</h6>
            <p>Python destinations consist of two parts. The first is a <MadCap:variable name="General.OSE"></MadCap:variable> destination object that you define in your <MadCap:variable name="General.OSE"></MadCap:variable> configuration and use in the log path. This object references a Python class, which is the second part of the Python destination. The Python class processes the log messages it receives, and can do virtually anything that you can code in Python. You can either embed the Python class into your <MadCap:variable name="General.OSE" /> configuration file, or <a href="python-code-external-file.htm">store it in an external Python file</a>.</p><pre>destination &lt;name_of_the_python_destination&gt;{
    python(
        class("&lt;name_of_the_python_class_executed_by_the_destination&gt;")
    );
};

python {
class &lt;name_of_the_python_class_executed_by_the_destination&gt;(object):

    def open(self):
        """Open a connection to the target service

        Should return False if opening fails"""
        return True

    def close(self):
        """Close the connection to the target service"""
        pass

    def is_opened(self):
        """Check if the connection to the target is able to receive messages"""
        return True

    def init(self, options):
        """This method is called at initialization time

        Should return false if initialization fails"""
        return True

    def deinit(self):
        """This method is called at deinitialization time"""
        pass

    def send(self, msg):
        """Send a message to the target service

        It should return True to indicate success. False will suspend the
        destination for a period specified by the time-reopen() option."""
        return True

    def flush(self):
        """Flush the queued messages"""
        pass
};</pre>
            <div class="Note">
                <p class="Hyphenation"><span class="AllNoteStyles">NOTE:</span> From version 3.27, <MadCap:variable name="General.OSE" /> supports the arrow syntax in declaration. For more information, see <a href="reference-destination-python.htm#python-options"><span style="color: #04aada;" class="mcFormatColor">the options() of the python() destination</span></a>.</p>
            </div>
        </div>
        <div>
            <h6 name="python-destination-methods"><a name="python-destination-methods"></a>Methods of the python() destination</h6>
            <MadCap:snippetBlock src="../../shared/chunk/python-method-init.htm">
            </MadCap:snippetBlock>
            <div>
                <h6><a name="python-destination-method-is-opened"></a><span class="Code" oldrole="parameter">is_opened(self)</span> method (optional)</h6>
                <p>Checks if the connection to the target is able to receive messages, and should return True if it is. For details, see <MadCap:xref href="#python-destination-error-handling"><span style="color: #04aada;" class="mcFormatColor">more</span></MadCap:xref>.</p>
            </div>
            <div>
                <h6><a name="python-destination-method-open"></a><span class="Code" oldrole="parameter">open(self)</span> method (optional)</h6>
                <p>The <span class="Code" oldrole="parameter">open(self)</span> method opens the resources required for the destination, for example, it initiates a connection to the target service. It is called after <span class="Code" oldrole="parameter">init()</span> when <MadCap:variable name="General.OSE"></MadCap:variable> is started or reloaded. If <span class="Code" oldrole="parameter">send()</span> returns with an error, <MadCap:variable name="General.OSE"></MadCap:variable> calls <span class="Code" oldrole="parameter">close()</span> and <span class="Code" oldrole="parameter">open()</span> before trying to send again.</p>
                <MadCap:snippetBlock src="../../shared/chunk/python-method-open-time-reopen.flsnp">
                </MadCap:snippetBlock>
            </div>
            <div>
                <h6><a name="python-destination-method-send"></a><span class="Code" oldrole="parameter">send(self, message)</span> method (mandatory)</h6>
                <p>The <span class="Code" oldrole="parameter">send</span> method sends a message to the target service. It should return True to indicate success, or <span class="Code">self.QUEUED</span> when using batch mode. For other possible return values, see the description of the <a href="#python-destination-method-flush"><span class="Code">flush()</span> method</a>. Note that for batch mode, the <span class="Code">flush()</span> method must be implemented as well.</p>
                <p>This is the only mandatory method of the destination.</p>
                <p>If a message cannot be delivered after the number of times set in <span class="Code" oldrole="parameter">retries()</span> (by default: 3), <MadCap:variable name="General.OSE"></MadCap:variable> drops the message and continues with the next message. For details, see <MadCap:xref href="#python-destination-error-handling"><span style="color: #04aada;" class="mcFormatColor">more</span></MadCap:xref>.</p>
                <p>The method can return True, False, or one of the following constants:</p>
                <ul>
                    <li>
                        <p><span class="Code">self.DROP</span>: The message is dropped immediately.</p>
                    </li>
                    <li>
                        <p><span class="Code">self.ERROR</span>: Corresponds to boolean False. The message is put back to the queue, and sending the message is attempted (up to the number of the <span class="Code">retries()</span> option). The destination is suspended for <span class="Code">time-reopen()</span> seconds.</p>
                    </li>
                    <li>
                        <p><span class="Code">self.SUCCESS</span>: Corresponds to boolean True. The message was sent successfully.</p>
                    </li>
                    <li>
                        <p><span class="Code">self.QUEUED</span>: The <span class="Code">send()</span> method should return this value when using batch mode, if it has successfully added the message to the batch. Message acknowledgment of batches is controlled by the <span class="Code">flush()</span> method.</p>
                    </li>
                    <li>
                        <p><span class="Code">self.NOT_CONNECTED</span>: The message is put back to the queue, and the destination is suspended. The <span class="Code">open()</span> method will be called, and the sending the messages will be continued with the same message/batch.</p>
                    </li>
                    <li>
                        <p><span class="Code">self.RETRY</span>: The message is put back to the queue, and sending the message is attempted (up to the number of the <span class="Code">retries()</span> option). If sending the message has failed <span class="Code">retries()</span> times, <span class="Code">self.NOT_CONNECTED</span> is returned.</p>
                    </li>
                </ul>
            </div>
            <div>
                <h6><a name="python-destination-method-flush"></a><span class="Code" oldrole="parameter">flush(self)</span> method (optional)</h6>
                <MadCap:keyword term="batch mode">
                </MadCap:keyword>
                <p>Send the messages in a batch. You can use this method to implement batch-mode message sending instead of sending messages one-by-one. When using batch mode, the <span class="Code" oldrole="parameter">send()</span> method adds the messages to a batch (for example, a list), and the <span class="Code" oldrole="parameter">flush()</span> method sends the messages as configured in the <span class="Code" oldrole="parameter">batch-bytes()</span>, <span class="Code" oldrole="parameter">batch-lines()</span>, or <span class="Code" oldrole="parameter">batch-timeout()</span> options.</p>
                <p>The method can return True, False, or one of the following constants:</p>
                <ul>
                    <li>
                        <p><span class="Code">self.DROP</span>: The messages cannot be sent and the entire batch is dropped immediately.</p>
                    </li>
                    <li>
                        <p><span class="Code">self.ERROR</span>: Corresponds to boolean False. The message is put back to the queue, and sending the message is attempted (up to the number of the <span class="Code">retries()</span> option). The destination is suspended for  <span class="Code">time-reopen()</span> seconds.</p>
                    </li>
                    <li>
                        <p><span class="Code">self.SUCCESS</span>: Corresponds to boolean True. The message was sent successfully.</p>
                    </li>
                    <li>
                        <p><span class="Code">self.NOT_CONNECTED</span>: The message is put back to the queue, and the destination is suspended. The <span class="Code">open()</span> method will be called, and the sending the messages will be continued with the same message/batch.</p>
                    </li>
                    <li>
                        <p><span class="Code">self.RETRY</span>: The message is put back to the queue, and sending the message is attempted (up to the number of the <span class="Code">retries()</span> option). If sending the message has failed <span class="Code">retries()</span> times, <span class="Code">self.NOT_CONNECTED</span> is returned.</p>
                    </li>
                </ul>
            </div>
            <div>
                <h6><a name="python-destination-method-close"></a><span class="Code" oldrole="parameter">close(self)</span> method (optional)</h6>
                <p>Close the connection to the target service. Usually it is called right before <span class="Code" oldrole="parameter">deinit()</span> when stopping or reloading <MadCap:variable name="General.OSE"></MadCap:variable>. It is also called when <span class="Code" oldrole="parameter">send()</span> fails.</p>
            </div>
            <MadCap:snippetBlock src="../../shared/chunk/python-method-deinit.htm">
            </MadCap:snippetBlock>
        </div>
        <div>
            <h6 name="python-destination-error-handling"><a name="python-destination-error-handling"></a>Error handling in the python() destination</h6>
            <p>The Python destination handles errors as follows.</p>
            <ol>
                <li>
                    <p>Currently <MadCap:variable name="General.OSE" /> ignores every error from the <span class="Code" oldrole="parameter">open</span> method until the first log message arrives to the Python destination. If the fist message has arrived and there was an error in the <span class="Code" oldrole="parameter">open</span> method, <MadCap:variable name="General.OSE" /> starts calling the <span class="Code" oldrole="parameter">open</span> method every <span class="Code" oldrole="parameter">time-reopen()</span> second, until opening the destination succeeds.</p>
                </li>
                <li>
                    <p>If the <span class="Code" oldrole="parameter">open</span> method returns without error, <MadCap:variable name="General.OSE" /> calls the <span class="Code" oldrole="parameter">send</span> method to send the first message.</p>
                </li>
                <li>
                    <p>If the <span class="Code" oldrole="parameter">send</span> method returns with an error, <MadCap:variable name="General.OSE" /> calls the <span class="Code" oldrole="parameter">is_opened</span> method.</p>
                    <ul>
                        <li>
                            <p>If the <span class="Code" oldrole="parameter">is_opened</span> method returns an error, <MadCap:variable name="General.OSE" /> starts calling the <span class="Code" oldrole="parameter">open</span> method every <span class="Code" oldrole="parameter">time-reopen()</span> second, until opening the destination succeeds.</p>
                        </li>
                        <li>
                            <p>Otherwise, <MadCap:variable name="General.OSE" /> calls the <span class="Code" oldrole="parameter">send</span> method again.</p>
                        </li>
                    </ul>
                </li>
                <li>
                    <p>If the <span class="Code" oldrole="parameter">send</span> method has returned with an error <span class="Code" oldrole="parameter">retries()</span> times and the <span class="Code" oldrole="parameter">is_opened</span> method has not returned any errors, <MadCap:variable name="General.OSE" /> drops the message and attempts to process the next message.</p>
                </li>
            </ol>
        </div>
        <div class="Example">
            <h6 name="python-destination-example"><a name="python-destination-example"></a>Example: Write logs into a file</h6>
            <p>The purpose of this example is only to demonstrate the basics of the Python destination, if you really want to write log messages into text files, use the <a href="configuring-destinations-file.htm">file destination</a> instead.</p>
            <p>The following sample code writes the body of log messages into the <span class="Code">/tmp/example.txt</span> file. Only the <span class="Code" oldrole="parameter">send()</span> method is implemented, meaning that <MadCap:variable name="General.OSE" /> opens and closes the file for every message.</p><pre>destination d_python_to_file {
    python(
        class("TextDestination")
    );
};
log {
    source(src);
    destination(d_python_to_file);
};
python {
class TextDestination(object):
    def send(self, msg):
        self.outfile = open("/tmp/example.txt", "a")
        self.outfile.write("MESSAGE = %s\n" % msg["MESSAGE"])
        self.outfile.flush()
        self.outfile.close();
        return True
};</pre>
            <p>The following code is similar to the previous example, but it opens and closes the file using the <span class="Code" oldrole="parameter">open()</span> and <span class="Code" oldrole="parameter">close()</span> methods.</p><pre>destination d_python_to_file {
    python(
        class("TextDestination")
    );
};
log {
    source(src);
    destination(d_python_to_file);
};
python {
class TextDestination(object):
    def open(self):
        try:
            self.outfile = open("/tmp/example.txt", "a")
            return True
        except:
            return False

    def send(self, msg):
        self.outfile.write("MESSAGE = %s\n" % msg["MESSAGE"])
        self.outfile.flush()
        return True

    def close(self):
        try:
            self.outfile.flush()
            self.outfile.close();
            return True
        except:
            return False
};</pre>
            <p>For a more detailed example about sending log messages to an MQTT (Message Queuing Telemetry Transport) server, see the <a href="https://www.syslog-ng.com/community/b/blog/posts/writing-python-destination-in-syslog-ng-how-to-send-log-messages-to-mqtt">Writing Python destination in syslog-ng: how to send log messages to MQTT blog post</a>.</p>
        </div>
        <div class="Example">
            <h6 name="python-destination-batch-mode-example"><a name="python-destination-batch-mode-example"></a>Example: Print logs in batch mode</h6>
            <MadCap:keyword term="batch mode">
            </MadCap:keyword>
            <p>The following is a simple destination that uses the <span class="Code">flush()</span> method to print the messages in batch mode.</p><pre>class MyDestination(object):
    def init(self, options):
        self.bulk = list()
        return True

    def send(self, msg):
         self.bulk.append(msg["MSG"].decode())
         return self.QUEUED

    def flush(self):
        print("flushing: " + ",".join(self.bulk))
        self.bulk = list()
        return self.SUCCESS</pre>
        </div>
        <p>For the list of available optional parameters, see <MadCap:xref href="reference-destination-python.htm"><span style="color: #04aada;" class="mcFormatColor">python() destination options</span></MadCap:xref>.</p>
    </body>
</html>