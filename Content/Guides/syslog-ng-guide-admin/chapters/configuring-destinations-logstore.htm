<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
    <head>
        <link href="../../../Resources/TableStyles/NoteTable_Blue_DoNotEdit.css" rel="stylesheet" MadCap:stylesheetType="table" />
        <link href="../../../Resources/TableStyles/NoteTable_Yellow_DoNotEdit.css" rel="stylesheet" MadCap:stylesheetType="table" />
    </head>
    <body condition="pe" name="configuring-destinations-logstore" oldrole="section">
        <h1 condition="pe" name="configuring-destinations-logstore"><a name="configuring-destinations-logstore"></a><span class="Code" oldrole="parameter">logstore</span>: Storing messages in encrypted files</h1>
        <MadCap:keyword term="logstore">
        </MadCap:keyword>
        <MadCap:keyword term="encrypting log messages:['on the hard disk']">
        </MadCap:keyword>
        <MadCap:keyword term="encrypting log files">
        </MadCap:keyword>
        <MadCap:keyword term="signing log files">
        </MadCap:keyword>
        <MadCap:keyword term="file encryption">
        </MadCap:keyword>
        <MadCap:keyword term="Timestamping Authority">
        </MadCap:keyword>
        <MadCap:keyword term="TSA">
        </MadCap:keyword>
        <MadCap:keyword term="destination drivers:[&lt;span class=&quot;Code&quot; oldrole=&quot;parameter&quot;&gt;logstore()&lt;/span&gt;, ' driver']">
        </MadCap:keyword>
        <p oldrole="para">The <MadCap:variable name="General.abbrev"></MadCap:variable> application can store log messages securely in encrypted, compressed and timestamped binary files. Timestamps can be requested from an external Timestamping Authority (TSA).</p>
        <p oldrole="para">Logstore files consist of individual chunks, every chunk can be encrypted, compressed, and timestamped separately. Chunks contain compressed log messages and header information needed for retrieving messages from the logstore file.</p>
        <p oldrole="para">The <MadCap:variable name="General.abbrev"></MadCap:variable> application generates an SHA-1 hash for every chunk to verify the integrity of the chunk. The hashes of the chunks are chained together to prevent injecting chunks into the logstore file. The <MadCap:variable name="General.abbrev"></MadCap:variable> application can encrypt the logstore using various algorithms, using the <span class="Code" oldrole="userinput">aes128</span> encryption algorithm in CBC mode and the <span class="Code" oldrole="userinput">hmac-sha1</span> hashing (HMAC) algorithm as default. For other algorithms, see <MadCap:xref href="reference-destination-logstore.htm#destination-logstore-options-cipher"><span style="color: #04aada;" class="mcFormatColor">cipher()</span></MadCap:xref> and <MadCap:xref href="reference-destination-logstore.htm#destination-logstore-options-digest"><span style="color: #04aada;" class="mcFormatColor">digest()</span></MadCap:xref>.</p>
        <p oldrole="para">The destination filename may include macros which get expanded when the message is written, thus a simple <span class="Code" oldrole="parameter">logstore()</span> driver may create several files. For more information on available macros see <MadCap:xref href="reference-macros.htm#reference-macros"><span style="color: #04aada;" class="mcFormatColor">Macros of [%=General.abbrev%]</span></MadCap:xref>.</p>
        <p oldrole="para">If the expanded filename refers to a directory which does not exist, it will be created depending on the <span class="Code" oldrole="parameter">create-dirs()</span> setting (both global and a per destination option).</p>
        <p oldrole="para">The <span class="Code" oldrole="parameter">logstore()</span> has a single required parameter that specifies the filename that stores the log messages. For the list of available optional parameters, see <MadCap:xref href="reference-destination-logstore.htm#reference-destination-logstore"><span style="color: #04aada;" class="mcFormatColor">logstore() destination options</span></MadCap:xref>.</p>
        <table cellspacing="0" class="TableStyle-NoteTable_Yellow_DoNotEdit" oldrole="warning" style="width: 100%;mc-table-style: url('../../../Resources/TableStyles/NoteTable_Yellow_DoNotEdit.css');">
            <col class="TableStyle-NoteTable_Yellow_DoNotEdit-Column-Column1" style="width: 0.3in;">
            </col>
            <col class="TableStyle-NoteTable_Yellow_DoNotEdit-Column-Column2">
            </col>
            <tbody>
                <tr class="TableStyle-NoteTable_Yellow_DoNotEdit-Body-Body1">
                    <td class="TableStyle-NoteTable_Yellow_DoNotEdit-BodyB-Column1-Body1">
                        <p>
                            <img src="../../../Resources/Images/Common/caution.png" />
                        </p>
                    </td>
                    <td class="TableStyle-NoteTable_Yellow_DoNotEdit-BodyA-Column2-Body1"><span class="Yellow">Caution: </span>
                        <MadCap:snippetBlock src="../../shared/wnt/warning-nfs.htm">
                        </MadCap:snippetBlock>
                    </td>
                </tr>
            </tbody>
        </table>
        <div>
            <h6 oldrole="formalpara">Declaration:</h6><pre class="Code" oldrole="synopsis">logstore(filename options());</pre>
        </div>
        <div class="Example">
            <h6 name="example-destination-logstore" oldrole="example"><a name="example-destination-logstore"></a>Example: Using the logstore() driver</h6>
            <p oldrole="para">A simple example saving and compressing log messages.</p><pre class="Code" oldrole="synopsis">destination d_logstore { logstore("/var/log/messages.lgs" compress(5) ); };</pre>
            <p oldrole="para">A more detailed example that encrypts messages, modifies the parameters for closing chunks, and sets file privileges.</p><pre class="Code" oldrole="synopsis">destination d_logstore {
    logstore("/var/log/messages-logstore.lgs"
        encrypt-certificate("/opt/syslog-ng/etc/syslog-ng/keys/10-100-20-40/public-certificate-of-the-server.pem")
        owner("balabit")
        group("balabit")
        perm(0777)
    );
};</pre>
            <p oldrole="para">The URL to the Timestamping Authority and if needed, the OID of the timestamping policy can be set as global options, or also per logstore destination. The following example specifies the URL and the OID as global options:</p><pre class="Code" oldrole="synopsis">options {
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;timestamp-url("http://10.50.50.50:8080/");
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;timestamp-policy("0.4.0.2023.1.1");
};</pre>
        </div>
        <table cellspacing="0" class="TableStyle-NoteTable_Blue_DoNotEdit" oldrole="note" style="width: 100%;mc-table-style: url('../../../Resources/TableStyles/NoteTable_Blue_DoNotEdit.css');">
            <col class="TableStyle-NoteTable_Blue_DoNotEdit-Column-Column1" style="width: 0.3in;">
            </col>
            <col class="TableStyle-NoteTable_Blue_DoNotEdit-Column-Column2">
            </col>
            <tbody>
                <tr class="TableStyle-NoteTable_Blue_DoNotEdit-Body-Body1">
                    <td class="TableStyle-NoteTable_Blue_DoNotEdit-BodyB-Column1-Body1">
                        <p>
                            <img src="../../../Resources/Images/Common/note.png" />
                        </p>
                    </td>
                    <td class="TableStyle-NoteTable_Blue_DoNotEdit-BodyA-Column2-Body1"><span class="AllNoteStyles">NOTE: </span>
                        <p oldrole="para">When using the <span class="Code" oldrole="parameter">logstore()</span> destination, update the configuration of your log rotation program to rotate these files. Otherwise, the log files can become very large.</p>
                    </td>
                </tr>
            </tbody>
        </table>
        <table cellspacing="0" class="TableStyle-NoteTable_Yellow_DoNotEdit" oldrole="warning" style="width: 100%;mc-table-style: url('../../../Resources/TableStyles/NoteTable_Yellow_DoNotEdit.css');">
            <col class="TableStyle-NoteTable_Yellow_DoNotEdit-Column-Column1" style="width: 0.3in;">
            </col>
            <col class="TableStyle-NoteTable_Yellow_DoNotEdit-Column-Column2">
            </col>
            <tbody>
                <tr class="TableStyle-NoteTable_Yellow_DoNotEdit-Body-Body1">
                    <td class="TableStyle-NoteTable_Yellow_DoNotEdit-BodyB-Column1-Body1">
                        <p>
                            <img src="../../../Resources/Images/Common/caution.png" />
                        </p>
                    </td>
                    <td class="TableStyle-NoteTable_Yellow_DoNotEdit-BodyA-Column2-Body1"><span class="Yellow">Caution: </span>
                        <p oldrole="para">Since the state of each created file must be tracked by syslog-ng, it consumes some memory for each file. If no new messages are written to a file within 60 seconds (controlled by the <span class="Code" oldrole="parameter">time-reap()</span> global option), it is closed, and its state is freed.</p>
                        <p oldrole="para">Exploiting this, a DoS attack can be mounted against the system. If the number of possible destination files and its needed memory is more than the amount available on the syslog-ng server.</p>
                        <p oldrole="para">The most suspicious macro is <span class="Code" oldrole="parameter">${PROGRAM}</span>, where the number of possible variations is rather high. Do not use the <span class="Code" oldrole="parameter">${PROGRAM}</span> macro in insecure environments.</p>
                    </td>
                </tr>
            </tbody>
        </table>
    </body>
</html>