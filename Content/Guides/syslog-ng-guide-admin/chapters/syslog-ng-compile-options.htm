<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" MadCap:conditions="General.ose">
    <head>
        <meta name="description" content="" />
    </head>
    <body condition="ose" name="syslog-ng-compile-options">
        <h1 condition="ose" name="syslog-ng-compile-options">Compiling options of <MadCap:variable name="General.OSE"></MadCap:variable></h1>
        <p>When compiling <MadCap:variable name="General.OSE"></MadCap:variable> from source, you can use the following compiling options.</p>
        <ul>
            <li>
                <p><i>--enable-all-modules</i> This option will turn on or off all modules and most features when enabled, unless a feature is explicitly disabled, or not detected automatically. Currently, this means that you must explicitly enable the <span class="Code" oldrole="parameter">pacct()</span> source, since it is not detected automatically (all other modules are compiled automatically if the required libraries are available).</p>
                <p>This also means that the Sun Streams source is enabled on every platform, not only on Solaris, causing a compile error. Use <span class="Code" oldrole="userinput">--enable-all-modules</span> together with <span class="Code" oldrole="userinput">--disable-sun-streams</span>.</p>
            </li>
            <li>
                <p><i>--disable-http</i> Disable support for the <span class="Code" oldrole="parameter">http()</span> destination that is based on <i>libcurl</i>.</p>
            </li>
            <li>
                <p><i>--disable-python</i> Disable support for Python-based modules.</p>
            </li>
            <li>
                <p><i>--disable-json</i> Disable JSON support. It also disables <span class="Code" oldrole="parameter">json-parser</span>, and the <span class="Code" oldrole="parameter">format-cim</span> and <span class="Code" oldrole="parameter">format-json</span> template functions. Also, it disables JSON support even if the <span class="Code" oldrole="parameter">json-c</span> library is installed and detected (see <i>--enable-json</i>).</p>
            </li>
            <li>
                <p><i>--disable-smtp</i> Disable SMTP support. By default, SMTP support is enabled if the libesmtp library is detected.</p>
            </li>
            <li>
                <p><i>--disable-snmp</i> Disable SNMP support. By default, SNMP support is enabled if the libsnmp-dev library is detected.</p>
                <MadCap:keyword term="destinations:['snmp()']">
                </MadCap:keyword>
                <MadCap:keyword term="snmp():['compiling']">
                </MadCap:keyword>
            </li>
            <li>
                <p><i>--enable-amqp</i> Enable the amqp destination (enabled by default). The source of the RabbitMQ client is included in the source code package of <MadCap:variable name="General.OSE"></MadCap:variable>. To use an external client instead, use the <span class="Code" oldrole="parameter">--with-librabbitmq-client=system</span> compiling option. For details on using this destination, see <MadCap:xref href="configuring-destinations-amqp.htm"><span style="color: #04aada;" class="mcFormatColor">amqp: Publishing messages using AMQP</span></MadCap:xref>.</p>
                <MadCap:keyword term="destinations:['amqp()']">
                </MadCap:keyword>
                <MadCap:keyword term="amqp():['compiling']">
                </MadCap:keyword>
            </li>
            <li>
                <p><i>--enable-debug</i> Include debug information.</p>
            </li>
            <li>
                <p><i>--enable-dynamic-linking</i> Compile syslog-ng as a completely dynamic binary. If not specified syslog-ng uses mixed linking (<span class="Code" oldrole="parameter">--enable-mixed-linking</span>): it links dynamically to system libraries and statically to everything else.</p>
            </li>
            <li>
                <p><i>--enable-geoip</i> Enable GEOIP support, required for the <span class="Code" oldrole="parameter">geoip2</span> template function and the <span class="Code" oldrole="parameter">geoip2-parser</span> (enabled automatically if the <span class="Code" oldrole="parameter">libmaxminddb</span> library is detected).</p>
                <MadCap:keyword term="geoip:['compiling']">
                </MadCap:keyword>
            </li>
            <li>
                <p><i>--enable-ipv6</i> Enable IPv6 support.</p>
            </li>
            <li>
                <p><i>--enable-java</i> Enable support for Java-based modules. For other requirements, see the description of the Java-based module (for example, <MadCap:xref href="destination-elasticsearch2-prerequisites.htm"><span style="color: #04aada;" class="mcFormatColor">Prerequisites</span></MadCap:xref>) that you want to use.</p>
            </li>
            <li>
                <p><i>--enable-java-modules</i> Compile the Gradle projects of every Java module available in <span class="Code">modules/java-modules</span>.</p>
            </li>
            <li>
                <p><i>--enable-json</i> Enables JSON support (by default, it uses the <span class="Code" oldrole="parameter">json-c</span> library included in the source code package of <MadCap:variable name="General.OSE"></MadCap:variable>). JSON support is required for <span class="Code" oldrole="parameter">json-parser</span>, and the <span class="Code" oldrole="parameter">format-cim</span> and <span class="Code" oldrole="parameter">format-json</span> template functions.</p>
                <MadCap:keyword term="json-parser:['compiling']">
                </MadCap:keyword>
                <MadCap:keyword term="format-json:['compiling']">
                </MadCap:keyword>
                <MadCap:keyword term="format-cim:['compiling']">
                </MadCap:keyword>
            </li>
            <li>
                <p><i>--enable-linux-caps</i> Enable support for capabilities on Linux. For details, see <MadCap:xref href="../../../manpages/syslog-ng.8.html"><span style="color: #04aada;" class="mcFormatColor">The syslog-ng manual page</span></MadCap:xref>.</p>
            </li>
            <li>
                <p><i>--enable-mongodb</i> Enable the mongodb destination (enabled by default). To use <span class="code">mongodb()</span>, an external MongoDB client is needed. For further details on using this destination, see <MadCap:xref href="configuring-destinations-mongodb.htm"><span style="color: #04aada;" class="mcFormatColor">mongodb: Storing messages in a MongoDB database</span></MadCap:xref>.</p>
                <MadCap:keyword term="destinations:['mongodb()']">
                </MadCap:keyword>
                <MadCap:keyword term="mongodb():['compiling']">
                </MadCap:keyword>
            </li>
            <li>
                <p><i>--enable-pacct</i> Enable using the <span class="Code" oldrole="parameter">pacct()</span> driver to collect process-accounting logs on Linux systems.</p>
                <MadCap:keyword term="sources:['pacct()']">
                </MadCap:keyword>
                <MadCap:keyword term="pacct():['compiling']">
                </MadCap:keyword>
            </li>
            <li>
                <p><i>--enable-python</i> Enable support for Python-based modules.</p>
            </li>
            <li>
                <p><i>--enable-redis</i> Enable the redis destination (enabled by default). The source of the libhiredis client (0.11 or newer) must be available. To specify the location of the library, use the <span class="Code" oldrole="userinput">--with-libhiredis=&lt;path-to-libhiredis&gt;</span> compiling option. For details on using this destination, see <MadCap:xref href="configuring-destinations-redis.htm"><span style="color: #04aada;" class="mcFormatColor">redis: Storing name-value pairs in Redis</span></MadCap:xref>.</p>
                <MadCap:keyword term="destinations:['redis()']">
                </MadCap:keyword>
                <MadCap:keyword term="redis():['compiling']">
                </MadCap:keyword>
            </li>
            <li>
                <p><i>--enable-riemann</i> Enable the riemann destination (enabled by default). The source of the libriemann client must be available. For details on using this destination, see <MadCap:xref href="configuring-destinations-riemann.htm"><span style="color: #04aada;" class="mcFormatColor">riemann: Monitoring your data with Riemann</span></MadCap:xref>.</p>
                <MadCap:keyword term="destinations:['riemann()']">
                </MadCap:keyword>
                <MadCap:keyword term="riemann():['compiling']">
                </MadCap:keyword>
            </li>
            <li>
                <p><i>--enable-snmp-dest</i> Enable SNMP support even if not detected (autodetected by default).</p>
                <MadCap:keyword term="destinations:['snmp()']">
                </MadCap:keyword>
                <MadCap:keyword term="snmp():['compiling']">
                </MadCap:keyword>
            </li>
            <li>
                <p><i>--enable-spoof-source</i> Enable spoof_source feature (disabled by default).</p>
            </li>
            <li>
                <p><i>--enable-sql</i> Enables the sql() destination (enabled automatically if the <span class="Code" oldrole="parameter">libdbi</span> library version 0.9 or newer is installed and detected).</p>
                <MadCap:keyword term="destinations:['sql()']">
                </MadCap:keyword>
                <MadCap:keyword term="sql():['compiling']">
                </MadCap:keyword>
            </li>
            <li>
                <p><i>--enable-ssl</i> Enable SSL support, required for encrypted message transfer, as well as template functions that calculate hashes and UUIDs (enabled automatically if the <span class="Code" oldrole="parameter">libopenssl</span> library is detected).</p>
                <MadCap:keyword term="ssl support:['compiling']">
                </MadCap:keyword>
            </li>
            <li>
                <p><i>--enable-sun-door</i> Enable Sun door support even if not detected (autodetected by default).</p>
            </li>
            <li>
                <p><i>--enable-sun-streams</i> Enable Sun STREAMS support even if not detected (autodetected by default).</p>
            </li>
            <li>
                <p><i>--enable-systemd</i> Enable systemd support on Linux platforms (autodetected by default) (enabled automatically if the <span class="Code" oldrole="parameter">libsystemd-daemon</span> library is detected).</p>
                <MadCap:keyword term="systemd:['compiling']">
                </MadCap:keyword>
            </li>
            <li>
                <p><i>--enable-tcp-wrapper</i> Enable using <i>/etc/hosts.deny</i> and <i>/etc/hosts.allow</i> for TCP access (enabled automatically if the <span class="Code" oldrole="parameter">libwrap</span> libraries are detected).</p>
            </li>
            <li>
                <p><i>--with-embedded-crypto</i> If this option is set, the crypto library is linked directly into libsyslog-ng: the sources of libsyslog-ng-crypto will be appended to the libsyslog-ng sources, and -crypto is not built.</p>
            </li>
            <li>
                <p><i>--with-ivykis</i> Specifies which ivykis implementation to use (default value: internal). The source of ivykis is included in the source code package of <MadCap:variable name="General.OSE"></MadCap:variable> and is used by default. To use an external implementation instead, use the <span class="Code" oldrole="parameter">--with-ivykis=system</span> compiling option.</p>
            </li>
            <li>
                <p><i>--with-libcurl</i> Specifies the path to the libcurl library. For details on using this destination, see <MadCap:xref href="configuring-destinations-http-nonjava.htm"><span style="color: #04aada;" class="mcFormatColor">http: Posting messages over HTTP without Java</span></MadCap:xref>.</p>
                <MadCap:keyword term="destinations:['http()']">
                </MadCap:keyword>
                <MadCap:keyword term="http():['compiling']">
                </MadCap:keyword>
            </li>
            <li>
                <p><i>--with-libhiredis</i> Specifies the path to the libhiredis library (0.11 or newer). For details on using this destination, see <MadCap:xref href="configuring-destinations-redis.htm"><span style="color: #04aada;" class="mcFormatColor">redis: Storing name-value pairs in Redis</span></MadCap:xref>.</p>
                <MadCap:keyword term="destinations:['redis()']">
                </MadCap:keyword>
                <MadCap:keyword term="redis():['compiling']">
                </MadCap:keyword>
            </li>
            <li>
                <p><i>--with-librabbitmq-client</i> Specifies which RabbitMQ client to use (default value: internal). The source of the rabbitmq client is included in the source code package of <MadCap:variable name="General.OSE"></MadCap:variable> and is used by default. To use an external client instead, use the <span class="Code" oldrole="parameter">--with-librabbitmq-client=system</span> compiling option. For details on using this destination, see <MadCap:xref href="configuring-destinations-amqp.htm"><span style="color: #04aada;" class="mcFormatColor">amqp: Publishing messages using AMQP</span></MadCap:xref>.</p>
                <MadCap:keyword term="destinations:['amqp()']">
                </MadCap:keyword>
                <MadCap:keyword term="amqp():['compiling']">
                </MadCap:keyword>
            </li>
            <li>
                <p><i>--with-module-dir</i> Specifies a single directory where the <MadCap:variable name="General.OSE"></MadCap:variable> Makefile will install the modules.</p>
            </li>
            <li>
                <p><i>--module-install-dir</i> Specifies <MadCap:variable name="General.OSE"></MadCap:variable>'s module installation directory (normally <span class="Code">$prefix/lib/syslog-ng</span>). All Java-based SCLs use this option.</p>
            </li>
            <li>
                <p><i>--with-module-path</i> Specifies a colon-separated (:) list of directories, where the <MadCap:variable name="General.OSE"></MadCap:variable> binary will search for modules.</p>
            </li>
            <li>
                <p><i>--with-net-snmp</i> Specifies the path to the libsnmp-dev library, required for the <span class="Code" oldrole="parameter">snmp()</span> destination.</p>
                <MadCap:keyword term="destinations:['snmp()']">
                </MadCap:keyword>
                <MadCap:keyword term="snmp():['compiling']">
                </MadCap:keyword>
            </li>
            <li>
                <p><i>--with-python</i> Specifies which Python version to use, for example, <span class="Code" oldrole="userinput">--with-python=2.7</span></p>
            </li>
            <li>
                <p><i>--with-timezone-dir</i> Specifies the directory where syslog-ng looks for the timezone files to resolve the <span class="Code" oldrole="parameter">time-zone()</span> and <span class="Code" oldrole="parameter">local-time-zone()</span> options. If not specified, the <span class="Code">/opt/syslog-ng/share/zoneinfo/</span> and <span class="Code">/usr/share/zoneinfo/</span> directories are checked, respectively. Note that HP-UX uses a unique file format (<span class="Code" oldrole="parameter">tztab</span>) to describe the timezone information, but that format is currently not supported in syslog-ng. As a workaround, copy the zoneinfo files from another, non-HP-UX system to the <span class="Code">/opt/syslog-ng/share/zoneinfo/</span> directory of your HP-UX system.</p>
            </li>
            <li>
                <p><i>--without-compile-date</i> Removes the compilation date from the binary. For example, as openSUSE checks if recompilation changes the binary to detect if dependent packages need to be rebuilt or not, and including the date changes the binary every time.</p>
            </li>
        </ul>
    </body>
</html>