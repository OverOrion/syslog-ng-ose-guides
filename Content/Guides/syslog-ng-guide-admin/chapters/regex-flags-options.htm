<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
    <head>
        <meta name="description" content="" />
    </head>
    <body name="regex-flag-options" oldrole="section">
        <h1 name="regex-flag-options">The flags() options of regular expressions</h1>
        <p>Similarly to the <span class="Code" oldrole="parameter">type()</span> options, the <span class="Code" oldrole="parameter">flags()</span> options are also optional within regular expressions. </p>
        <p>The following list describes each <span class="Code" oldrole="parameter">type()</span> option's <span class="Code" oldrole="parameter">flags()</span> options.</p>
        <div>
            <h6>PCRE</h6>
            <p>Starting with <MadCap:variable name="General.abbrev"></MadCap:variable> version 3.1, PCRE expressions are supported on every platform. If the <span class="Code" oldrole="parameter">type()</span> parameter is not specified, syslog-ng uses PCRE regular expressions by default.</p>
            <p>PCRE-style regular expressions have the following <span class="Code" oldrole="parameter">flags()</span> options:</p>
            <div>
                <h6 oldrole="formalpara"><a name="disable_jit"></a>disable-jit:</h6>
                <MadCap:keyword term="disable-jit">
                </MadCap:keyword>
                <p>Switches off the <a href="https://www.pcre.org/current/doc/html/pcre2jit.html">just-in-time compilation function for PCRE regular expressions</a>.</p>
            </div>
            <div>
                <h6 oldrole="formalpara">global:</h6>
                <MadCap:keyword term="global">
                </MadCap:keyword>
                <p>Usable only in rewrite rules: match for every occurrence of the expression, not only the first one.</p>
            </div>
            <div>
                <h6 oldrole="formalpara">ignore-case:</h6>
                <MadCap:keyword term="ignore-case">
                </MadCap:keyword>
                <p>Disable case-sensitivity.</p>
            </div>
            <div>
                <h6 oldrole="formalpara">newline:</h6>
                <MadCap:keyword term="newline">
                </MadCap:keyword>
                <p>When set, it changes the newline definition used in PCRE regular expressions to accept either of the following:</p>
                <ul>
                    <li>a single carriage-return</li>
                    <li>linefeed</li>
                    <li>the sequence carriage-return and linefeed (<span class="Code">'\r'</span>, <span class="Code">'\n'</span> and <span class="Code">'\r\n'</span>, respectively)</li>
                </ul>
                <p>This newline definition is used when the circumflex and dollar patterns (<span class="Code">'^'</span> and <span class="Code">'$'</span>) are matched against an input. By default, PCRE interprets the linefeed character as indicating the end of a line. It does not affect the <span class="Code">'\r'</span>, <span class="Code">'\n'</span> or <span class="Code">'\R'</span> characters used in patterns.</p>
            </div>
            <div>
                <h6 oldrole="formalpara">store-matches:</h6>
                <MadCap:keyword term="store-matches">
                </MadCap:keyword>
                <p>Store the matches of the regular expression into the <span class="Code" oldrole="userinput">$0, ... $255</span> variables. The <span class="Code" oldrole="userinput">$0</span> stores the entire match, <span class="Code" oldrole="userinput">$1</span> is the first group of the match (parentheses), and so on. Named matches (also called named subpatterns), for example, <span class="Code" oldrole="userinput">(?&lt;name&gt;...)</span>, are stored as well. Matches from the last filter expression can be referenced in regular expressions.</p>
            </div>
            <div>
                <h6 oldrole="formalpara">unicode:</h6>
                <MadCap:keyword term="unicode">
                </MadCap:keyword>
                <p>Use Unicode support for UTF-8 matches: UTF-8 character sequences are handled as single characters.</p>
            </div>
            <div>
                <h6 oldrole="formalpara">utf8:</h6>
                <MadCap:keyword term="utf8">
                </MadCap:keyword>
                <p>An alias for the <span class="Code" oldrole="parameter">unicode</span> flag.</p>
                <div class="Example">
                    <h6 name="example-regexp-pcre" oldrole="example"><a name="example-regexp-pcre"></a>Example: Using PCRE regular expressions</h6><pre class="Code" oldrole="synopsis">rewrite r_rewrite_subst {
    subst("a*", "?", value("MESSAGE") flags("utf8" "global"));&#160;&#160;
};</pre>
                </div>
            </div>
            <div>
                <h6>Literal string searches</h6>
                <p>Literal string searches have the following <span class="Code" oldrole="parameter">flags()</span> options:</p>
                <div>
                    <h6 oldrole="formalpara">global:</h6>
                    <MadCap:keyword term="global">
                    </MadCap:keyword>
                    <p>Usable only in rewrite rules: match for every occurrence of the expression, not only the first one.</p>
                </div>
                <div>
                    <h6 oldrole="formalpara">ignore-case:</h6>
                    <MadCap:keyword term="ignore-case">
                    </MadCap:keyword>
                    <p>Disable case-sensitivity.</p>
                </div>
                <div>
                    <h6 oldrole="formalpara">store-matches:</h6>
                    <MadCap:keyword term="store-matches">
                    </MadCap:keyword>
                    <p>Store the matches of the regular expression into the <span class="Code" oldrole="userinput">$0, ... $255</span> variables. The <span class="Code" oldrole="userinput">$0</span> stores the entire match, <span class="Code" oldrole="userinput">$1</span> is the first group of the match (parentheses), and so on. Named matches (also called named subpatterns), for example, <span class="Code" oldrole="userinput">(?&lt;name&gt;...)</span>, are stored as well. Matches from the last filter expression can be referenced in regular expressions.</p>
                </div>
                <div>
                    <h6 oldrole="formalpara">substring:</h6>
                    <MadCap:keyword term="global">
                    </MadCap:keyword>
                    <p>Search expressions are matched against the beginning of the input, which means they have to be identical from the first character up to their shortest common length. Search expressions with different initial characters will not match, even though they may contain the whole character length of the input.</p>
                    <p>For example, for the input <span>'exam'</span>, the following search expressions will match:</p>
                    <ul>
                        <li>exam</li>
                        <li>example</li>
                        <li>examine</li>
                    </ul>
                    <p>However, the following search expression will not match the input:</p>
                    <ul>
                        <li>hexameter</li>
                    </ul>
                </div>
                <div>
                    <h6 oldrole="formalpara">prefix:</h6>
                    <MadCap:keyword term="global">
                    </MadCap:keyword>
                    <p>The given literal string will match when the pattern is found within the input. Unlike in the case of the <span>substring</span> <span>flags()</span> option, the pattern does not have to be identical with the given literal string.</p>
                </div>
            </div>
            <div>
                <h6>Glob patterns without regular expression support</h6>
                <p>There are no supported <span class="Code">flags()</span> options for glob patterns without regular expression support.</p>
            </div>
        </div>
    </body>
</html>