<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
    <head>
        <meta name="description" content="" />
    </head>
    <body name="syslog-ng-patterndb-using-parsers" oldrole="section">
        <h1 name="syslog-ng-patterndb-using-parsers">Using pattern parsers</h1>
        <MadCap:keyword term="pattern database:['creating parsers']">
        </MadCap:keyword>
        <MadCap:keyword term="artificial ignorance:['message classification']">
        </MadCap:keyword>
        <MadCap:keyword term="parsing messages">
        </MadCap:keyword>
        <p oldrole="para">Pattern parsers attempt to parse a part of the message using rules specific to the type of the parser. Parsers are enclosed between @ characters. The syntax of parsers is the following:</p>
        <ul oldrole="itemizedlist">
            <li oldrole="listitem">
                <p oldrole="para">a beginning <span class="Code" oldrole="userinput">@</span> character,</p>
            </li>
            <li oldrole="listitem">
                <p oldrole="para">the type of the parser written in capitals,</p>
            </li>
            <li oldrole="listitem">
                <p oldrole="para">optionally a name,</p>
            </li>
            <li oldrole="listitem">
                <p oldrole="para">parameters of the parser, if any, and</p>
            </li>
            <li oldrole="listitem">
                <p oldrole="para">a closing <span class="Code" oldrole="userinput">@</span> character.</p>
            </li>
        </ul>
        <h6 oldrole="example">Example: Pattern parser syntax</h6>
        <p oldrole="para">A simple parser:</p><pre class="Code" oldrole="synopsis">@STRING@</pre>
        <p oldrole="para">A named parser:</p><pre class="Code" oldrole="synopsis">@STRING:myparser_name@</pre>
        <p oldrole="para">A named parser with a parameter:</p><pre class="Code" oldrole="synopsis">@STRING:myparser_name:*@</pre>
        <p oldrole="para">A parser with a parameter, but without a name:</p><pre class="Code" oldrole="synopsis">@STRING::*@</pre>
        <p oldrole="para">Patterns and literals can be mixed together. For example, to parse a message that begins with the <span class="Code" oldrole="userinput">Host: </span> string followed by an IP address (for example, <span class="Code" oldrole="userinput">Host: 192.168.1.1</span>), the following pattern can be used: <span class="Code" oldrole="userinput">Host:@IPv4@</span>.</p>
        <table cellspacing="0" class="TableStyle-NoteTable_Blue_DoNotEdit" oldrole="note" style="width: 100%;mc-table-style: url('../../Resources/TableStyles/NoteTable_Blue_DoNotEdit.css');">
            <col class="TableStyle-NoteTable_Blue_DoNotEdit-Column-Column1" style="width: 0.3in;">
            </col>
            <col class="TableStyle-NoteTable_Blue_DoNotEdit-Column-Column2">
            </col>
            <tbody>
                <tr class="TableStyle-NoteTable_Blue_DoNotEdit-Body-Body1">
                    <td class="TableStyle-NoteTable_Blue_DoNotEdit-BodyB-Column1-Body1">
                        <p>
                            <img src="../../Resources/Images/Common/note.png" />
                        </p>
                    </td>
                    <td class="TableStyle-NoteTable_Blue_DoNotEdit-BodyA-Column2-Body1"><span class="AllNoteStyles">NOTE: </span>
                        <p oldrole="para">Note that using parsers is a CPU-intensive operation. Use the ESTRING and QSTRING parsers whenever possible, as these can be processed much faster than the other parsers.</p>
                    </td>
                </tr>
            </tbody>
        </table>
        <h6 oldrole="example">Example: Using the STRING and ESTRING parsers</h6>
        <p oldrole="para">For example, look at the following message: <span class="Code" oldrole="userinput">user=joe96 group=somegroup</span>.</p>
        <ul oldrole="itemizedlist">
            <li oldrole="listitem">
                <p oldrole="para"><span class="Code" oldrole="userinput">@STRING:mytext:@</span> parses only to the first non-alphanumeric character (<span class="Code" oldrole="userinput">=</span>), parsing only <span class="Code" oldrole="userinput">user</span>, so the value of the ${mytext} macro will be <span class="Code" oldrole="userinput">user</span></p>
            </li>
            <li oldrole="listitem">
                <p oldrole="para"><span class="Code" oldrole="userinput">@STRING:mytext:=@</span> parses the equation mark as well, and proceeds to the next non-alphanumeric character (the whitespace), resulting in <span class="Code" oldrole="userinput">user=joe96</span></p>
            </li>
            <li oldrole="listitem">
                <p oldrole="para"><span class="Code" oldrole="userinput">@STRING:mytext:= @</span> will parse the whitespace as well, and proceed to the next non-alphanumeric non-equation mark non-whitespace character, resulting in <span class="Code" oldrole="userinput">user=joe96 group=somegroup</span></p>
            </li>
        </ul>
        <p oldrole="para">Of course, usually it is better to parse the different values separately, like this: <span class="Code" oldrole="userinput">"user=@STRING:user@ group=@STRING:group@"</span>.</p>
        <p oldrole="para">If the username or the group may contain non-alphanumeric characters, you can either include these in the second parameter of the parser (as shown at the beginning of this example), or use an ESTRING parser to parse the message till the next whitespace: <span class="Code" oldrole="userinput">"user=@ESTRING:user: @group=@ESTRING:group: @"</span>.</p>
    </body>
</html>