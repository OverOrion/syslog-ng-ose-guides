<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
    <head>
        <meta name="description" content="" />
    </head>
    <body name="embedded-objects">
        <h1 name="embedded-objects">Using channels in configuration objects</h1>
        <MadCap:keyword term="channels">
        </MadCap:keyword>
        <MadCap:keyword term="channel">
        </MadCap:keyword>
        <p>Starting with <MadCap:variable name="General.OSE"></MadCap:variable><MadCap:conditionaltext MadCap:conditions="General.OSE">3.4</MadCap:conditionaltext>, every configuration object is a log expression. Every configuration object is essentially a configuration block, and can include multiple objects. To reference the block, only the top-level object must be referenced. That way you can use embedded log statements, junctions and in-line object definitions within source, destination, filter, rewrite and parser definitions. For example, a source can include a rewrite rule to modify the messages received by the source, and that combination can be used as a simple source in a log statement. This feature allows you to preprocess the log messages very close to the source itself.</p>
        <p>To embed multiple objects into a configuration object, use the following syntax. Note that you must enclose the configuration block between braces instead of parenthesis.</p><pre>&lt;type-of-top-level-object&gt; &lt;name-of-top-level-object&gt; {
    channel {
        &lt;configuration-objects&gt;
    };
};</pre>
        <div class="Example">
            <h6 name="example-channels"><a name="example-channels"></a>Example: Using channels</h6>
            <p>For example, to process a log file in a specific way, you can define the required processing rules (parsers and rewrite expressions) and combine them in a single object:</p><pre>source s_apache {
    channel {
        source {
			file("/var/log/apache/error.log");
        };
        parser(p_apache_parser);
    };
};
log {
    source(s_apache); ...
};</pre>
            <p>The <span class="Code" oldrole="parameter">s_apache</span> source uses a file source (the error log of an Apache webserver) and references a specific parser to process the messages of the error log. The log statement references only the <span class="Code" oldrole="parameter">s_apache</span> source, and any other object in the log statement can already use the results of the <span class="Code" oldrole="parameter">p_apache_parser</span>parser.</p>
        </div>
		<div class="Note">
			<p class="Hyphenation"><span class="AllNoteStyles">NOTE:</span> 
			You must start the object definition with a <span class="Code" oldrole="parameter">channel</span> even if you will use a <span class="Code" oldrole="parameter">junction</span>, for example:</p><pre>parser demo-parser() {
    channel {
        junction {
            channel { ... };
            channel { ... };
        };
    };
};</pre>
            <p>If you want to embed configuration objects into sources or destinations, always use channels, otherwise the source or destination will not behave as expected. For example, the following configuration is good:</p><pre>source s_filtered_hosts {
    channel{
        source {
            pipe("/dev/pipe");
            syslog(ip(192.168.0.1) transport("tcp"));
            syslog(ip(127.0.0.1) transport("tcp"));
        };
        filter {
            netmask(10.0.0.0/16);
        };
    };
};</pre>
        </div>
    </body>
</html>