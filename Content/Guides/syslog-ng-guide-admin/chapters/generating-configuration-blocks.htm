<?xml version="1.0" encoding="UTF-8"?>

<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd"><body name="generating-configuration-blocks" oldrole="procedure">
<h1 name="generating-configuration-blocks">Generating configuration blocks from a script</h1>
<MadCap:keyword term="dynamic configuration"></MadCap:keyword>
<MadCap:keyword term="confgen"></MadCap:keyword>
<MadCap:keyword term="configuration files:['dynamic elements']"></MadCap:keyword>
<h6 oldrole="formalpara">Purpose:</h6>

<p oldrole="para">The &abbrev; application can automatically execute scripts when it is started, and can include the output of such script in the configuration file. To create and use a script that generates a part of the &abbrev; configuration file (actually, a configuration block), complete the following steps. The steps include examples for collecting Apache access log files (<span class="Code" oldrole="filename">access.log</span>) from subdirectories, but you can create any script that creates a valid &abbrev; configuration snippet.</p>
<h6 oldrole="formalpara">Steps:</h6>

<ol oldrole="procedure"><li oldrole="step">
<p oldrole="para">Navigate to the directory where you have installed &abbrev; (for example, <span class="Code" oldrole="userinput">/opt/syslog-ng/share/include/scl/</span>), and create a new directory, for example, <span class="Code" oldrole="userinput">apache-access-logs</span>. The name of the directory will be used in the &abbrev; configuration file as well, so use a descriptive name.</p>
</li><li oldrole="step">
<p oldrole="para">Create a file called <span class="Code" oldrole="filename">plugin.conf</span> in this new directory.</p>
</li><li oldrole="step">
<p oldrole="para">Edit the <span class="Code" oldrole="filename">plugin.conf</span> file and add the following line:</p>
<pre class="Code" oldrole="synopsis">@module confgen context(source) name(&lt;directory-name&gt;) exec("`scl-root`/&lt;directory-name&gt;/&lt;my-script&gt;")</pre>
<p oldrole="para">Replace <span class="Code" oldrole="userinput">&lt;directory-name&gt;</span> with the name of the directory (for example, <span class="Code" oldrole="userinput">apache-access-logs</span>), and <span class="Code" oldrole="userinput">&lt;my-script&gt;</span> with the filename of your script (for example, <span class="Code" oldrole="userinput">apache-access-logs.sh</span>). You can reference the script in your &abbrev; configuration file as a configuration block using the value <span class="Code" oldrole="parameter">name</span> option.</p>
<p oldrole="para">The <span class="Code" oldrole="parameter">context</span> option determines the type of the configuration snippet that the script generates, and must be one of the following: <span class="Code" oldrole="parameter">destination</span>, <span class="Code" oldrole="parameter">filter</span>, <span class="Code" oldrole="parameter">log</span>, <span class="Code" oldrole="parameter">parser</span>, <span class="Code" oldrole="parameter">rewrite</span>, <span class="Code" oldrole="parameter">root</span>, <span class="Code" oldrole="parameter">source</span>. The <span class="Code" oldrole="parameter">root</span> blocks can be used in the "root" context of the configuration file, that is, outside any other statements. In the example, <span class="Code" oldrole="userinput">context(source)</span> means that the output of the script will be used within a source statement.</p>
</li><li oldrole="step">
<p oldrole="para">Write a script that generates the output you need, and formats it to a configuration snippet that &abbrev; can use. The filename of the script must match with the filename used in <span class="Code" oldrole="filename">plugin.conf</span>, for example, <span class="Code" oldrole="userinput">apache-access-logs.sh</span>.</p>
<p oldrole="para">The following example checks the <span class="Code" oldrole="filename">/var/log/apache2/</span> directory and its subdirectories, and creates a source driver for every directory that contains an <span class="Code" oldrole="filename">access.log</span> file.</p>
<pre class="Code" oldrole="synopsis">#!/bin/bash
for i in `find /var/log/apache2/ -type d`; do
    echo "file(\"$i/access.log\" flags(no-parse) program_override(\"apache2\"));";
done;</pre>
<p oldrole="para">The script generates an output similar to this one, where <span class="Code" oldrole="userinput">service*</span> is the actual name of a subdirectory:</p>
<pre class="Code" oldrole="synopsis">file("/var/log/apache2/service1/access.log" flags(no-parse) program_override("apache2"));
file("/var/log/apache2/service2/access.log" flags(no-parse) program_override("apache2"));
</pre>
</li><li oldrole="step">
<p oldrole="para">Include the <span class="Code" oldrole="filename">plugin.conf</span> file in the <span class="Code" oldrole="filename">syslog-ng.conf</span> file &mdash; or a file already included into <span class="Code" oldrole="filename">syslog-ng.conf</span>. Version <MadCap:conditionaltext MadCap:conditions="ose">3.7</MadCap:conditionaltext><MadCap:conditionaltext MadCap:conditions="pe">7.0</MadCap:conditionaltext> and newer automatically includes the <span class="Code" oldrole="filename">*.conf</span> files from the <span class="Code" oldrole="filename">&lt;directory-where-syslog-ng-is-installed&gt;/scl/*/</span> directories. For details on including configuration files, see <MadCap:xref href="including-config-files.htm#including-config-files"></MadCap:xref>.</p>
</li><li oldrole="step">
<p oldrole="para">Add the block you defined in the <span class="Code" oldrole="filename">plugin.conf</span> file to your &abbrev; configuration file. You can reference the block using the value of the <span class="Code" oldrole="parameter">name</span> option from the <span class="Code" oldrole="filename">plugin.conf</span> file, followed by parentheses, for example, <span class="Code" oldrole="userinput">apache-access-logs()</span>. Make sure to use the block in the appropriate context of the configuration file, for example, within a source statement if the value of the <span class="Code" oldrole="parameter">context</span> option in the <span class="Code" oldrole="filename">plugin.conf</span> file is source.</p>
<pre class="Code" oldrole="synopsis">@include "scl.conf"
...
source s_apache {
    file("/var/log/apache2/access.log" flags(no-parse) program_override("apache2"));
    file("/var/log/apache2/error.log" flags(no-parse) program_override("apache2"));
    file("/var/log/apache2/ssl.log" flags(no-parse) program_override("apache2"));
    apache-access-logs();
};

log { source(s_apache); destination(d_central); };
...</pre>
</li><li oldrole="step">
<p oldrole="para">Check if your modified &abbrev; configuration file is syntactically correct using the <b oldrole="command">syslog-ng --syntax-only</b> command.</p>
</li><li oldrole="step">
<p oldrole="para">If your modified configuration is syntactically correct, load the new configuration file using the <b oldrole="command">syslog-ng-ctl reload</b> command.</p>
</li></ol></body></html>
