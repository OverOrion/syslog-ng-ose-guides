<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd"><body name="concepts-embedded-logpaths" oldrole="section">
<h1 name="concepts-embedded-logpaths">Embedded log statements</h1>
<MadCap:keyword term="embedded log statements"></MadCap:keyword>
<MadCap:keyword term="log pipes:['embedded log statements']"></MadCap:keyword>
<MadCap:keyword term="log statements:['embedded']"></MadCap:keyword>
<p oldrole="para">Starting from version 3.0, syslog-ng can handle embedded log statements (also called log pipes). Embedded log statements are useful for creating complex, multi-level log paths with several destinations and use filters, parsers, and rewrite rules.</p>
<p oldrole="para">For example, if you want to filter your incoming messages based on the facility parameter, and then use further filters to send messages arriving from different hosts to different destinations, you would use embedded log statements.</p>
<p class="CaptionFigure">Embedded log statement</p>
<p><img class="Image" fileref="&imgroot;/syslog-ng-embedded-log-statement-2.png" format="PNG" MadCap:mediastyle="@media print { width: auto; height: auto; }" oldrole="figure" src="../../Resources/Images_Notlocalized/syslog-ng-pe-guide-admin/syslog-ng-embedded-log-statement-2.png" style="height: auto; width: auto;"/></p>
<p oldrole="para">Embedded log statements include sources — and usually filters, parsers, rewrite rules, or destinations — and other log statements that can include filters, parsers, rewrite rules, and destinations. The following rules apply to embedded log statements:</p>
<ul oldrole="itemizedlist">
<li oldrole="listitem">
<p oldrole="para">Only the beginning (also called top-level) log statement can include sources.</p>
</li>
<li oldrole="listitem">
<p oldrole="para">Embedded log statements can include multiple log statements on the same level (that is, a top-level log statement can include two or more log statements).</p>
</li>
<li oldrole="listitem">
<p oldrole="para">Embedded log statements can include several levels of log statements (that is, a top-level log statement can include a log statement that includes another log statement, and so on).</p>
</li>
<li oldrole="listitem">
<p oldrole="para">After an embedded log statement, you can write either another log statement, or the <span class="Code" oldrole="parameter">flags()</span> option of the original log statement. You cannot use filters or other configuration objects. This also means that flags (except for the <span class="Code" oldrole="parameter">flow-control</span> flag) apply to the entire log statement, you cannot use them only for the embedded log statement.</p>
</li>
<li oldrole="listitem">
<p oldrole="para">Embedded log statements that are on the same level receive the same messages from the higher-level log statement. For example, if the top-level log statement includes a filter, the lower-level log statements receive only the messages that pass the filter.</p>
</li>
</ul>
<p class="CaptionFigure">Embedded log statements</p>
<p><img class="Image" fileref="&imgroot;/syslog-ng-embedded-log-statement.png" format="PNG" MadCap:mediastyle="@media print { width: auto; height: auto; }" oldrole="figure" src="../../Resources/Images_Notlocalized/syslog-ng-pe-guide-admin/syslog-ng-embedded-log-statement.png" style="height: auto; width: auto;"/></p>
<p oldrole="para">Embedded log filters can be used to optimize the processing of log messages, for example, to re-use the results of filtering and rewriting operations.</p>
<h2>Using embedded log statements</h2>
<p oldrole="para">Embedded log statements (for details, see <MadCap:xref href="concepts-embedded-logpaths.htm#concepts-embedded-logpaths"></MadCap:xref>) re-use the results of processing messages (for example the results of filtering or rewriting) to create complex log paths. Embedded log statements use the same syntax as regular log statements, but they cannot contain additional sources. To define embedded log statements, use the following syntax:</p>
<pre class="Code" name="log-path-synopsis-embedded" oldrole="synopsis">log {
    source(s1); source(s2); ...

    optional_element(filter1|parser1|rewrite1);
    optional_element(filter2|parser2|rewrite2);
    ...
    destination(d1); destination(d2); ...

    #embedded log statement
    log {
        optional_element(filter1|parser1|rewrite1);
        optional_element(filter2|parser2|rewrite2);
        ...
        destination(d1); destination(d2); ...

        #another embedded log statement
        log {
            optional_element(filter1|parser1|rewrite1);
            optional_element(filter2|parser2|rewrite2);
            ...
            destination(d1); destination(d2); ...
        };
    };
    #set flags after the embedded log statements
    flags(flag1[, flag2...]);
};</pre>
<div class="Example">
<h6 name="example-logpath-embedded" oldrole="example">Example: Using embedded log paths</h6>
<p oldrole="para">The following log path sends every message to the configured destinations: both the <span class="Code" oldrole="userinput">d_file1</span> and the <span class="Code" oldrole="userinput">d_file2</span> destinations receive every message of the source.</p>
<pre class="Code" oldrole="synopsis">log { source(s_localhost); destination(d_file1); destination(d_file2); };</pre>
<p oldrole="para">The next example is equivalent with the one above, but uses an embedded log statement.</p>
<pre class="Code" oldrole="synopsis">log { source(s_localhost); destination(d_file1);
    log { destination(d_file2); };
};</pre>
<p oldrole="para">The following example uses two filters:</p>
<ul oldrole="itemizedlist">
<li oldrole="listitem">
<p oldrole="para">messages coming from the host <span class="Code" oldrole="userinput">192.168.1.1</span> are sent to the <span class="Code" oldrole="userinput">d_file1</span> destination, and</p>
</li>
<li oldrole="listitem">
<p oldrole="para">messages coming from the host <span class="Code" oldrole="userinput">192.168.1.1</span> and containing the string <span class="Code" oldrole="userinput">example</span> are sent to the <span class="Code" oldrole="userinput">d_file2</span> destination.</p>
</li>
</ul>
<pre class="Code" oldrole="synopsis">log { source(s_localhost); filter { host(192.168.1.1); }; destination(d_file1);
    log { message("example"); destination(d_file2); };
};</pre>
<p oldrole="para">The following example collects logs from multiple source groups and uses the <span class="Code" oldrole="parameter">source()</span> filter in the embedded log statement to select messages of the <span class="Code" oldrole="userinput">s_network</span> source group.</p>
<pre class="Code" oldrole="synopsis">log { source(s_localhost);  filter { source(s_network); }; destination(d_file1);
    log {  filter { source(s_network); }; destination(d_file2); };
};</pre>
</div>
</body></html>
