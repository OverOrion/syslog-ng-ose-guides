<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
    <head>
        <link href="../../../Resources/TableStyles/NoteTable_Yellow_DoNotEdit.css" rel="stylesheet" MadCap:stylesheetType="table" />
        <meta name="description" content="" />
    </head>
    <body name="python-source" oldrole="section">
        <h1 name="python-source">python: writing server-style Python sources</h1>
        <MadCap:keyword term="python source">
        </MadCap:keyword>
        <MadCap:keyword term="custom python source">
        </MadCap:keyword>
        <MadCap:keyword term="source:['python']">
        </MadCap:keyword>
        <MadCap:snippetBlock src="../../shared/chunk/python-source-intro.htm">
        </MadCap:snippetBlock>
        <p>This section describes server-style sources. For details on fetcher-style sources, see <MadCap:xref href="python-fetcher-source.htm"></MadCap:xref>.</p>
        <MadCap:snippetBlock src="../../shared/chunk/python-blocks.htm">
        </MadCap:snippetBlock>
        <div>
            <h6 oldrole="formalpara">Declaration:</h6>
            <MadCap:snippetBlock src="../../shared/chunk/python-source-declaration.htm">
            </MadCap:snippetBlock>
            <pre class="Code" oldrole="synopsis">source &lt;name_of_the_python_source&gt;{
    python(
        class("&lt;name_of_the_python_class_executed_by_the_source&gt;")
        options(
            "option1" "value1",
            "option2" "value2"
        )
    );
};

python {
from syslogng import LogSource
from syslogng import LogMessage

class &lt;name_of_the_python_class_executed_by_the_source&gt;(LogSource):
    def init(self, options): # optional
        print("init")
        print(options)
        self.exit = False
        return True

    def deinit(self): # optional
        print("deinit")

    def run(self): # mandatory
        print("run")
        while not self.exit:
            # Must create a message
            msg = LogMessage("this is a log message")
            self.post_message(msg)

    def request_exit(self): # mandatory
        print("exit")
        self.exit = True
};</pre>
        </div>
        <div>
            <h2 name="python-source-methods" oldrole="simplesect"><a name="python-source-methods"></a>Methods of the python() source</h2>
            <p>Server-style Python sources must be inherited from the <span class="Code" oldrole="parameter">syslogng.LogSource</span> class, and must implement at least the <span class="Code" oldrole="parameter">run</span> and <span class="Code" oldrole="parameter">request_exit</span> methods. Multiple inheritance is allowed, but only for pure Python super classes.</p>
            <p>You can implement your own event loop, or integrate the event loop of an external framework or library, for example, <a href="https://kafka-python.readthedocs.io/en/master/apidoc/KafkaConsumer.html">KafkaConsumer</a>, <a href="http://flask.pocoo.org/">Flask</a>, <a href="https://twistedmatrix.com/trac/">Twisted engine</a>, and so on.</p>
            <p>To post messages, call <span class="Code" oldrole="parameter">LogSource::post_message()</span> method in the <span class="Code" oldrole="parameter">run</span> method.</p>
            <MadCap:snippetBlock src="../../shared/chunk/python-method-init.htm">
            </MadCap:snippetBlock>
            <div>
                <h6 oldrole="formalpara"><span class="Code" oldrole="parameter">run(self)</span> method (mandatory)</h6>
                <p oldrole="para">Use the <span class="Code" oldrole="parameter">run</span> method to implement an event loop, or start a server framework or library. Create <span class="Code" oldrole="parameter">LogMessage</span> instances in this method, and pass them to the log paths by calling <span class="Code" oldrole="parameter">LogSource::post_message()</span>.</p>
                <p>Currently, <span class="Code" oldrole="parameter">run</span> stops permanently if an unhandled exception happens.</p>
                <p>For details on parsing and posting messages, see <MadCap:xref href="python-source-logmessage.htm"></MadCap:xref>.</p>
            </div>
            <div>
                <h6 oldrole="formalpara"><span class="Code" oldrole="parameter">request_exit(self)</span> method (mandatory)</h6>
                <p>The <MadCap:variable name="General.abbrev"></MadCap:variable> application calls this method when <MadCap:variable name="General.abbrev"></MadCap:variable> is shut down or restarted. The <span class="Code" oldrole="parameter">request_exit</span> method must shut down the event loop or framework, so the <span class="Code" oldrole="parameter">run</span> method can return gracefully. If you use blocking operations within the <span class="Code" oldrole="parameter">run()</span> method, use <span class="Code" oldrole="parameter">request_exit()</span> to interrupt those operations and set an exit flag, otherwise <MadCap:variable name="General.abbrev"></MadCap:variable> is not able to stop. Note that <MadCap:variable name="General.abbrev"></MadCap:variable> calls the <span class="Code" oldrole="parameter">request_exit</span> method from a thread different from the source thread.</p>
            </div>
            <MadCap:snippetBlock src="../../shared/chunk/python-method-deinit.htm">
            </MadCap:snippetBlock>
        </div>
        <p>For the list of available optional parameters, see <MadCap:xref href="reference-source-python.htm"></MadCap:xref>.</p>
    </body>
</html>
