<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
    <head><title>Limitations of the XML parser</title>
    </head>
    <body>
        <h1>Limitations of the XML parsers</h1>
        <p>The XML parser comes with certain limitations.</p>
        <div>
            <h6 oldrole="formalpara">Using the list-handling functionality with vector-like structures</h6>
            <p oldrole="formalpara">The XML parser uses  the list-handling functionality to handle lists in the XML. The list-handling functionality has limitations when handling name-value pairs or quoting in SDATA as described below. Note that you can <a href="#disable">disable</a> the  list-handling functionality if needed. </p>
            <MadCap:snippetBlock src="../../shared/chunk/xml-parser-listhandling-example.htm">
            </MadCap:snippetBlock>
            <h6>Using the list-handling functionality with name-value pairs</h6>
            <p>As every value in name-value pairs can be quoted, <MadCap:variable name="CommonVariables.CompanyNameShort" /> recommends that you access name-values as lists as follows:</p>
            <ul>
                <li>Use <a href="reference-template-functions.htm#template-function-list"><span style="color: #04aada;" class="mcFormatColor"><a href="reference-template-functions.htm#template-function-list">list-related</a></span></a> template functions  on the list created by the XML parser. </li>
                <li>
                    <p>Use <a href="specifying-data-types.htm">type-hinting</a> using the format-json template function as shown in the example below:</p><pre>template("$(format-json --scope dot-nv-pairs LIST=list(${.xml.Event.EventData.Data}))\n")</pre>
                </li>
            </ul>
            <h6>Using the list-handling functionality with SDATA</h6>
            <p>According to RFC5424, SDATA parameter values  must be quoted with double-quote ('"') characters.
If the value contains double-quotes, they must be escaped with a backslash (\) character.</p>
            <p>Due to the  list-handling functionality of the XML parser, parsed XML text contents are also quoted using double-quote ('"') characters.
As parsed XML text content are part of the message, they are quoted when used as SDATA parameter values.</p>
            <p>Using the following structure as an example:</p><pre class="Code" oldrole="synopsis" xml:space="preserve">&lt;Event&gt;
&lt;Data&gt;42&lt;/Data&gt;
&lt;Data&gt;Testing testing&lt;/Data&gt;
&lt;/Event&gt;</pre>
            <p>The expected name-value pair is as follows:</p><pre class="Code" oldrole="synopsis">Event.Data = 42,"Testing testing"</pre>
            <p oldrole="para">In SDATA,&#160;this is quoted as shown below:</p><pre class="Code" oldrole="synopsis">[Event Data="42,\"Testing testing\""]</pre>
            <h6 oldrole="para"><a name="disable"></a>Disabling the list-handling functionality</h6>
            <p oldrole="para">To disable the list-handling functionality, use the <span class="Code">create_lists(yes/no)</span> option as shown below. The default value is set to <span class="Code">yes</span>.</p><pre class="Code" oldrole="synopsis" xml:space="preserve">parser p_xml {
    xml(create_lists(no));
};</pre>
            <MadCap:snippetBlock src="../../shared/chunk/xml-parser-listhandling-disable.htm">
            </MadCap:snippetBlock>
        </div>
        <div>
            <h6 oldrole="formalpara">CDATA</h6>
            <p oldrole="para">The XML parser does not support CDATA. CDATA inside the XML input is ignored. This is true for the processing instructions as well.</p>
        </div>
        <div>
            <h6 oldrole="formalpara">Inherited limitations</h6>
            <p oldrole="para">The XML parser is based on the glib XML subset parser, called <a href="https://developer.gnome.org/glib/stable/glib-Simple-XML-Subset-Parser.html">"GMarkup" parser</a>, which is not a full-scale XML parser. It is intended to parse a simple markup format that is a subset of XML. Some limitations are inherited:</p>
            <ul oldrole="itemizedlist">
                <li oldrole="listitem">
                    <p>Do not use the XML parser if you expect to interoperate with applications generating full-scale XML. Instead, use it for application data files, configuration files, log files, and so on, where you know your application will be the only one writing the file.</p>
                </li>
                <li oldrole="listitem">
                    <p>The XML parser is not guaranteed to display an error message in the case of invalid XML. It may accept invalid XML. However, it does not accept XML input that is not well-formed (a condition that is weaker than requiring XML to be valid).</p>
                </li>
            </ul>
        </div>
        <div>
            <h6 oldrole="formalpara">No support for long keys</h6>
            <p oldrole="para">If the key is longer than 255 characters, syslog-ng drops the entry and an error log is emitted. There is no chunking or any other way of recovering data, not even partial data. The entry will be replaced by an empty string.</p>
        </div>
    </body>
</html>