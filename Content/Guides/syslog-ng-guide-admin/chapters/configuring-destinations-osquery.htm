<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
    <head>
        <meta name="description" content="" />
    </head>
    <body name="configuring-destinations-osquery">
        <h1 name="configuring-destinations-osquery">osquery: Sending log messages to osquery's syslog table</h1>
        <p>The <span class="Code" oldrole="parameter">osquery()</span> driver sends log messages to osquery's syslog table.</p>
        <p>The syslog table contains logs forwarded over a named pipe from syslog-ng. When an osquery process that supports the syslog table starts up, it creates (and properly sets permissions for) a named pipe for syslog-ng to write to.</p>
        <div class="Example">
            <h6>Example: Using the osquery() destination driver</h6>
            <p>Run osqueryi:</p><pre>osqueryi --enable_syslog
         --disable-events=false</pre>
            <p>To store the database on disk:</p><pre>osqueryi --enable_syslog
         --disable-events=false
         <i style="font-style: normal;">--database_path=/tmp/osquery.db</i></pre>
            <p>To set up a custom named pipe:</p><pre>osqueryi --enable_syslog
         --disable-events=false
         --database_path=/tmp/osquery.db
         <i style="font-style: normal;">--syslog_pipe_path=/tmp/osq.pipe</i></pre>
            <p>Example configuration:</p><pre>@version: 3.12
@include "scl.conf"

source s_net {
  network(port(5514));
};

destination d_osquery {
  # custom pipe path:
  #osquery(pipe("/tmp/osq.pipe"));

  # backup outgoing logs:
  #osquery(file("/var/log/osquery_inserts.log" template(t_osquery)));

  # defaults
  osquery();
};

log {
 source(s_net);
 destination(d_osquery);
 flags(flow-control);
};</pre>
        </div>
    </body>
</html>