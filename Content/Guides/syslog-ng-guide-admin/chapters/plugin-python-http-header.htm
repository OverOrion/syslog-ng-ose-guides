<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
    <head>
        <link href="../../../Resources/TableStyles/NoteTable_Yellow_DoNotEdit.css" rel="stylesheet" MadCap:stylesheetType="table" />
        <meta name="description" content="" />
    </head>
    <body name="plugin-python-http-header">
        <h1 name="plugin-python-http-header"><a name="plugin-python-http-header"></a>The Python HTTP header plugin</h1>
        <p>This section describes the <MadCap:variable name="General.product" /> (<MadCap:variable name="General.abbrev" />) application's Python HTTP header plugin.</p>
        <p>For more information about modules in <MadCap:variable name="General.abbrev" />, see <MadCap:xref href="modules.htm"><span style="color: #04aada;" class="mcFormatColor">Modules in [%=General.product%] ([%=General.OSE%])</span></MadCap:xref>.</p>
        <div>
            <h6>The Python HTTP header plugin</h6>
            <p>The <MadCap:variable name="General.abbrev" /> application supports adding custom headers to HTTP requests using the Python programming language.</p>
        </div>
        <div>
            <h6>Prerequisites</h6>
            <div class="Note">
                <p class="Hyphenation"><span class="AllNoteStyles">NOTE:</span> Before you use the <span class="Code">python-http-header</span> plugin, make sure that your <MadCap:variable name="General.abbrev" /> appliance was compiled with Python support. If you installed <MadCap:variable name="General.abbrev" /> from a package, make sure that the subpackage containing Python support is also installed.</p>
            </div>
        </div>
        <div>
            <h6>Configuration</h6><pre>destination d_http {
  http(
    python_http_header(
      class("&lt;class-name&gt;")
      options("options-key1", "option-value1")
      options("options-key2", "option-value2")
      mark-errors-as-critical(no))
    url("http://127.0.0.1:8888")
  );
};</pre>
            <p><b>Options used in the configuration</b>
            </p>
            <ul>
                <li><span class="Code">class</span>: Mandatory option. It refers to the user's Python class that implements the <span class="Code">python-http-header</span> interface. It can be <span class="Code">mymodule.MyClass</span> if the <span class="Code">class MyClass</span> is put into a <span class="Code">mymodule.py</span> module, or  simply <span class="Code">MyClass</span> if the user's code is provided inline in the configuration, using the <span class="Code">python { ... };</span> keyword.<div class="Note"><p class="Hyphenation"><span class="AllNoteStyles">NOTE:</span> If you put the class implementation into its own module, it should be put into a standard location, or made available with the <span class="Code">PYTHONPATH</span> environment variable.</p></div></li>
                <li><span class="Code">options("key" "value")</span>: Optional option. Multiple options can be specified at the same time. The <MadCap:variable name="General.abbrev" /> application will build a Python dictionary, which will be available in the <span class="Code">__init__</span> method.</li>
                <li><span class="Code">mark-errors-as-critical(yes|no)</span>: Optional option. Its default value is <span class="Code">yes</span>. In case there is a Python error, this parameter decides if the HTTP  destination will still try to send the request with the failed headers, or disconnect instead.</li>
            </ul>
        </div>
        <div>
            <h6>Defining the python-http-header() interface</h6>
            <p>You can define the Python interface with the following:</p><pre>class TestCounter():
  def __init__(self, options):
    self.key = options["value"]

  def get_headers(self, body, headers):
    return ["header1: value1", "header2: value2"]

  def on_http_response_received(self, http_code):
    print("HTTP response code received: {}".format(http_code))</pre>
            <p>By default, when the <span class="Code">signal_http_header_request</span> is emitted by the HTTP module, the connected slot automatically executes the Python code. </p>
            <div class="Note">
                <p class="Hyphenation"><span class="AllNoteStyles">NOTE:</span> If the plugin fails, the HTTP module does not send the HTTP request without the header items by default. If you want the HTTP module to try sending the request without the header items, disable the <span class="Code">mark-errors-as-critical</span> function.</p>
            </div>
            <div>
                <p><b>Methods used in the configuration</b>
                </p>
                <ul>
                    <li><span class="Code">__init__(self, options)</span>: Optional method. The options specified in the <MadCap:variable name="General.abbrev" /> configuration can be stored in the instance using this method.
                    </li>
                    <li><span class="Code">get_headers(self, body, headers)</span>: Mandatory method. Returns a list of strings of form [<span class="Code">"header: value"</span>, ...]. The returned headers will be set for the outgoing HTTP request. The body contains the body of the HTTP request. The headers contain the current headers that the HTTP destination has already added to the request.
                    </li>
                    <li><span class="Code">on_http_response_received(self, http_code)</span>: Optional method. If specified, <MadCap:variable name="General.abbrev" /> inserts the <span class="Code">http_code</span> of the previous response. This can be used to handle error (for example, for recreating auth headers, or dropping cache).
                    </li>
                </ul>
            </div>
        </div>
        <div>
            <div class="Example">
                <h6>Example configuration for using the Python HTTP header plugin</h6>
                <p>The following example can be copy-pasted and used as a template for using the Python HTTP header plugin in your configuration.</p><pre>python {
from syslogng import Logger
					
logger = Logger()
					
class TestCounter():
    def __init__(self, options):
        self.header = options["header"]
        self.counter = int(options["counter"])
        logger.debug(f"TestCounter class instantiated; options={options}")
					
    def get_headers(self, body, headers):
        logger.debug(f"get_headers() called, received body={body}, headers={headers}")
					
        response = ["{}: {}".format(self.header, self.counter)]
        self.counter += 1
        return response
					
    def on_http_response_received(self, http_code):
        self.counter += http_code
        logger.debug("HTTP response code received: {}".format(http_code))
					
    def __del__(self):
        logger.debug("Deleting TestCounter class instance")
};
					
source s_network {
  network(port(5555));
};
					
destination d_http {
    http(
        python_http_header(
            class("TestCounter")
            options("header", "X-Test-Python-Counter")
            options("counter", 11)
            # this means that syslog-ng will keep trying to send the http request even when this module fails
            mark-errors-as-critical(no)
        )
        url("http://127.0.0.1:8888")
    );
};
					
log {
    source(s_network);
    destination(d_http);
    flags(flow-control);
};</pre>
            </div>
        </div>
        <MadCap:keyword term="plugin-python-http-header">
        </MadCap:keyword>
        <MadCap:snippetBlock src="../../shared/wnt/w-http-header-py-supp.flsnp">
        </MadCap:snippetBlock>
    </body>
</html>