<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
    <head>
        <link href="../../../Resources/TableStyles/NoteTable_Yellow_DoNotEdit.css" rel="stylesheet" MadCap:stylesheetType="table" />
        <meta name="description" content="" />
    </head>
    <body name="python-source">
        <h1 name="python-fetcher-source">python-fetcher: writing fetcher-style Python sources</h1>
        <MadCap:keyword term="python source">
        </MadCap:keyword>
        <MadCap:keyword term="custom python source">
        </MadCap:keyword>
        <MadCap:keyword term="source:['python-fetcher']">
        </MadCap:keyword>
        <MadCap:snippetBlock src="../../shared/chunk/python-source-intro.htm">
        </MadCap:snippetBlock>
        <p>This section describes fetcher-style sources. For details on server-style sources, see <MadCap:xref href="python-source.htm"><span style="color: #04aada;" class="mcFormatColor">more</span></MadCap:xref>.</p>
        <MadCap:snippetBlock src="../../shared/chunk/python-blocks.htm">
        </MadCap:snippetBlock>
        <div>
            <h6>Declaration:</h6>
            <MadCap:snippetBlock src="../../shared/chunk/python-source-declaration.htm">
            </MadCap:snippetBlock><pre>source &lt;name_of_the_python_source&gt;{
    python-fetcher(
        class("&lt;name_of_the_python_class_executed_by_the_source&gt;")
    );
};

python {
from syslogng import LogFetcher
from syslogng import LogMessage

class &lt;name_of_the_python_class_executed_by_the_source&gt;(LogFetcher):
    def init(self, options): # optional
        print("init")
        print(options)
        return True

    def deinit(self): # optional
        print("deinit")

    def open(self): # optional
        print("open")
        return True

    def fetch(self): # mandatory
        print("fetch")
        # return LogFetcher.FETCH_ERROR,
        # return LogFetcher.FETCH_NOT_CONNECTED,
        # return LogFetcher.FETCH_TRY_AGAIN,
        # return LogFetcher.FETCH_NO_DATA,
        return LogFetcher.FETCH_SUCCESS, msg

    def request_exit(self):
        print("request_exit")
    &#160; &#160; # If your fetching method is blocking, do something to break it
    &#160; &#160; # For example, if it reads a socket: socket.shutdown()

    def close(self): # optional
        print("close")
};</pre>
        </div>
        <div>
            <h6 name="python-source-methods"><a name="python-source-methods"></a>Methods of the python-fetcher() source</h6>
            <p>Fetcher-style Python sources must be inherited from the <span class="Code" oldrole="parameter">syslogng.LogFetcher</span> class, and must implement at least the <span class="Code" oldrole="parameter">fetch</span> method. Multiple inheritance is allowed, but only for pure Python super classes.</p>
            <p>For fetcher-style Python sources, <MadCap:variable name="General.OSE" /> handles the event loop and the scheduling automatically. You can use simple blocking server/client libraries to receive or fetch logs.</p>
            <p>You can retrieve messages using the <span class="Code" oldrole="parameter">fetch()</span> method.</p>
            <MadCap:snippetBlock src="../../shared/chunk/python-method-init.htm">
            </MadCap:snippetBlock>
            <div>
                <h6>open(self) method (optional)</h6>
                <p>The <span class="Code" oldrole="parameter">open(self)</span> method opens the resources required for the source, for example, it initiates a connection to the target service. It is called after <span class="Code" oldrole="parameter">init()</span> when <MadCap:variable name="General.OSE"></MadCap:variable> is started or reloaded. If <span class="Code" oldrole="parameter">fetch()</span> returns with an error, <MadCap:variable name="General.OSE"></MadCap:variable> calls the <span class="Code" oldrole="parameter">close()</span> and <span class="Code" oldrole="parameter">open()</span> methods before trying to fetch a new message.</p>
                <MadCap:snippetBlock src="../../shared/chunk/python-method-open-time-reopen.flsnp">
                </MadCap:snippetBlock>
            </div>
            <div>
                <h6>fetch(self) method (mandatory)</h6>
                <p>Use the <span class="Code" oldrole="parameter">fetch</span> method to fetch messages and pass them to the log paths.</p>
                <p>For details on parsing messages, see <MadCap:xref href="python-source-logmessage.htm"><span style="color: #04aada;" class="mcFormatColor">more</span></MadCap:xref>.</p>
                <p>The <span class="Code" oldrole="parameter">fetch</span> method must return one of the following values:</p>
                <ul>
                    <li>
                        <p><span class="Code" oldrole="parameter">LogFetcher.FETCH_ERROR</span>: Fetching new messages failed, <MadCap:variable name="General.OSE" /> calls the <span class="Code" oldrole="parameter">close</span> and <span class="Code" oldrole="parameter">open</span> methods.</p>
                    </li>
                    <li>
                        <p><span class="Code" oldrole="parameter">LogFetcher.FETCH_NO_DATA</span>: There was not any data available. The source waits before calling the fetch method again. The wait time is equal to <span class="Code">time-reopen()</span> by default, but you can override it by setting the <span class="Code">fetch-no-data-delay()</span> option in the source.</p>
                    </li>
                    <li>
                        <p><span class="Code" oldrole="parameter">LogFetcher.FETCH_NOT_CONNECTED</span>: Could not access the source, <MadCap:variable name="General.OSE" /> calls the <span class="Code" oldrole="parameter">open</span> method.</p>
                    </li>
                    <li>
                        <p><span class="Code" oldrole="parameter">LogFetcher.FETCH_SUCCESS, msg</span>: Post the message returned as the second argument.</p>
                    </li>
                    <li>
                        <p><span class="Code" oldrole="parameter">LogFetcher.FETCH_TRY_AGAIN</span>: The fetcher could not provide a message this time, but will make the source call the fetch method as soon as possible.</p>
                    </li>
                </ul>
            </div>
            <div>
                <h6>request_exit(self) method (optional)</h6>
                <p>If you use blocking operations within the <span class="Code" oldrole="parameter">fetch()</span> method, use <span class="Code" oldrole="parameter">request_exit()</span> to interrupt those operations (for example, to shut down a socket), otherwise <MadCap:variable name="General.OSE"></MadCap:variable> is not able to stop. Note that <MadCap:variable name="General.OSE"></MadCap:variable> calls the <span class="Code" oldrole="parameter">request_exit</span> method from a thread different from the source thread.</p>
            </div>
            <div>
                <h6>close(self) method (optional)</h6>
                <p>Close the connection to the target service. Usually it is called right before <span class="Code" oldrole="parameter">deinit()</span> when stopping or reloading <MadCap:variable name="General.OSE"></MadCap:variable>. It is also called when <span class="Code" oldrole="parameter">fecth()</span> fails.</p>
            </div>
            <MadCap:snippetBlock src="../../shared/chunk/python-method-deinit.htm">
            </MadCap:snippetBlock>
        </div>
        <p>For the list of available optional parameters, see <MadCap:xref href="reference-source-python.htm"><span style="color: #04aada;" class="mcFormatColor">python() and python-fetcher() source options</span></MadCap:xref>.</p>
    </body>
</html>