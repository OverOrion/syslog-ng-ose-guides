<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
    <head>
    </head>
    <body name="reference-regexp-types" oldrole="section">
        <h1 name="reference-regexp-types"><a name="reference-regexp-types"></a>Types and options of regular expressions</h1>
        <p>By default, syslog-ng uses PCRE-style regular expressions. To use other expression types, add the <span class="Code" oldrole="parameter">type()</span> option after the regular expression.</p>
        <p>The <MadCap:variable name="General.abbrev"></MadCap:variable> application supports the following expression types:</p>
        <ul oldrole="itemizedlist">
            <li oldrole="listitem">
                <p><a href="reference-regexp-types.htm">Perl Compatible Regular Expressions (PCRE)</a>
                </p>
            </li>
            <li oldrole="listitem">
                <p><a href="reference-regexp-types.htm">Literal string searches</a>
                </p>
            </li>
            <li oldrole="listitem">
                <p><a href="reference-regexp-types.htm">Glob patterns without regular expression support</a>
                </p>
            </li>
        </ul>
        <div>
            <h6 name="reference-regexp-pcre" oldrole="simplesect"><a name="reference-regexp-pcre"></a>pcre</h6>
            <MadCap:keyword term="pcre">
            </MadCap:keyword>
            <MadCap:keyword term="regular expressions:['pcre']">
            </MadCap:keyword>
            <p oldrole="para"><i oldrole="emphasis" role="bold">Description:</i> Use Perl Compatible Regular Expressions (PCRE).<MadCap:conditionaltext MadCap:conditions="General.pe"> Starting with <MadCap:variable name="General.abbrev"></MadCap:variable> version 3.1, PCRE expressions are supported on every platform.</MadCap:conditionaltext> If the <span class="Code" oldrole="parameter">type()</span> parameter is not specified, syslog-ng uses PCRE regular expressions by default.</p>
            <p oldrole="para">PCRE regular expressions have the following flag options:</p>
        </div>
        <div>
            <h6 oldrole="formalpara">global</h6>
            <MadCap:keyword term="global">
            </MadCap:keyword>
            <p oldrole="para">Usable only in rewrite rules: match for every occurrence of the expression, not only the first one.</p>
        </div>
        <div>
            <h6 oldrole="formalpara">ignore-case</h6>
            <MadCap:keyword term="ignore-case">
            </MadCap:keyword>
            <p oldrole="para">Disable case-sensitivity.</p>
        </div>
        <div>
            <h6 oldrole="formalpara">store-matches:</h6>
            <MadCap:keyword term="store-matches">
            </MadCap:keyword>
            <p oldrole="para">Store the matches of the regular expression into the <span class="Code" oldrole="userinput">$0, ... $255</span> variables. The <span class="Code" oldrole="userinput">$0</span> stores the entire match, <span class="Code" oldrole="userinput">$1</span> is the first group of the match (parentheses), and so on. Named matches (also called named subpatterns), for example, <span class="Code" oldrole="userinput">(?&lt;name&gt;...)</span>, are stored as well. Matches from the last filter expression can be referenced in regular expressions.</p>
        </div>
        <div>
            <h6 oldrole="formalpara">unicode</h6>
            <MadCap:keyword term="unicode">
            </MadCap:keyword>
            <p oldrole="para">Use Unicode support for UTF-8 matches: UTF-8 character sequences are handled as single characters.</p>
        </div>
        <div>
            <h6 oldrole="formalpara">utf8</h6>
            <MadCap:keyword term="utf8">
            </MadCap:keyword>
            <p oldrole="para">An alias for the <span class="Code" oldrole="parameter">unicode</span> flag.</p>
            <div class="Example">
                <h6 name="example-regexp-pcre" oldrole="example"><a name="example-regexp-pcre"></a>Example: Using PCRE regular expressions</h6><pre class="Code" oldrole="synopsis">rewrite r_rewrite_subst
        {subst("a*", "?", value("MESSAGE") flags("utf8" "global"));&#160;&#160;};</pre>
            </div>
        </div>
        <div>
            <h6 name="reference-regexp-string" oldrole="simplesect"><a name="reference-regexp-string"></a>string</h6>
            <MadCap:keyword term="string">
            </MadCap:keyword>
            <p oldrole="para"><i oldrole="emphasis" role="bold">Description:</i> Match the strings literally, without regular expression support. By default, only identical strings are matched. For partial matches, use the <span class="Code" oldrole="userinput">flags("prefix")</span> or the <span class="Code" oldrole="userinput">flags("substring")</span> flags.</p>
        </div>
        <div>
            <h6 name="reference-regexp-glob" oldrole="simplesect"><a name="reference-regexp-glob"></a>glob</h6>
            <MadCap:keyword term="glob">
            </MadCap:keyword>
            <MadCap:keyword term="glob patterns">
            </MadCap:keyword>
            <p oldrole="para"><i oldrole="emphasis" role="bold">Description:</i> Match the strings against a pattern containing '*' and '?' wildcards, without regular expression and character range support. The advantage of glob patterns to regular expressions is that globs can be processed much faster.</p>
            <ul oldrole="variablelist">
                <li oldrole="varlistentry"><span class="Code" oldrole="command">*</span>
                    <li oldrole="listitem">
                        <p oldrole="para">matches an arbitrary string, including an empty string</p>
                    </li>
                </li>
                <li oldrole="varlistentry"><span class="Code" oldrole="command">?</span>
                    <li oldrole="listitem">
                        <p oldrole="para">matches an arbitrary character</p>
                    </li>
                </li>
            </ul>
            <table cellspacing="0" class="TableStyle-NoteTable_Blue_DoNotEdit" oldrole="note" style="width: 100%;mc-table-style: url('../../../Resources/TableStyles/NoteTable_Blue_DoNotEdit.css');">
                <col class="TableStyle-NoteTable_Blue_DoNotEdit-Column-Column1" style="width: 0.3in;">
                </col>
                <col class="TableStyle-NoteTable_Blue_DoNotEdit-Column-Column2">
                </col>
                <tbody>
                    <tr class="TableStyle-NoteTable_Blue_DoNotEdit-Body-Body1">
                        <td class="TableStyle-NoteTable_Blue_DoNotEdit-BodyB-Column1-Body1">
                            <p>
                                <img src="../../../Resources/Images/Common/note.png" />
                            </p>
                        </td>
                        <td class="TableStyle-NoteTable_Blue_DoNotEdit-BodyA-Column2-Body1"><span class="AllNoteStyles">NOTE: </span>
                            <ul oldrole="itemizedlist">
                                <li oldrole="listitem">
                                    <p oldrole="para">The wildcards can match the <span class="Code" oldrole="userinput">/</span> character.</p>
                                </li>
                                <li oldrole="listitem">
                                    <p oldrole="para">You cannot use the <span class="Code" oldrole="userinput">*</span> and <span class="Code" oldrole="userinput">?</span> literally in the pattern.</p>
                                </li>
                            </ul>
                        </td>
                    </tr>
                </tbody>
            </table>
        </div>
    </body>
</html>