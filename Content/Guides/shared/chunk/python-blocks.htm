<?xml version="1.0" encoding="UTF-8"?>

<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd"><body oldrole="topic">
<ul oldrole="itemizedlist" version="5.0" xmlns="http://docbook.org/ns/docbook">
<!-- Applies to Python template functions and Python parsers -->
<li oldrole="listitem">
<p oldrole="para">Available in &abbrev; version <MadCap:conditionaltext MadCap:conditions="ose">3.10</MadCap:conditionaltext><MadCap:conditionaltext MadCap:conditions="pe">7.0.2</MadCap:conditionaltext> and later.</p>
</li>
<li oldrole="listitem">
<p oldrole="para">Currently only Python 2.7 is supported.</p>
<MadCap:snippetBlock src="../../shared/wnt/warning-rhel6-python.htm"></MadCap:snippetBlock>
</li>
<li oldrole="listitem">
<p oldrole="para">The Python block must be a top-level block in the &abbrev; configuration file. If you store the Python code in a separate Python file and only include it in the &abbrev; configuration file, make sure that the PYTHON_PATH environment variable includes the path to the Python file, and export the PYTHON_PATH environment variable. For example: <b oldrole="command">export PYTHONPATH=/opt/syslog-ng/etc</b></p>
</li>
<li oldrole="listitem">
<p oldrole="para">The Python object is initiated only once, when &abbrev; is started or reloaded. That means it keeps the state of internal variables while &abbrev; is running.</p>
</li>
<li oldrole="listitem">
<p oldrole="para">The Python block can contain multiple Python functions.</p>
</li>
<li oldrole="listitem">
<p oldrole="para">Using Python code in &abbrev; can significantly decrease the performance of &abbrev;, especially if the Python code is slow.</p>
</li>
<li oldrole="listitem">
<p oldrole="para">Validate and lint the Python code before using it. The &abbrev; application does not do any of this.</p>
</li>
<li condition="pe" oldrole="listitem">
<h6 oldrole="formalpara">Support disclaimer:</h6>

<p oldrole="para">Using Python in &abbrev; is recommended only if you are familiar with both Python and &abbrev;. Product support applies only to &abbrev;: that is, until the entry point of the Python code and passing the specified arguments to the Python code. &vendor; is not responsible for the quality, resource requirements, or any bugs in the Python code, nor any &abbrev; crashes, message losses, or any other damage caused by the improper use of this feature, unless explicitly stated in a contract with &vendor;.</p>
</li>
</ul>
</body></html>
