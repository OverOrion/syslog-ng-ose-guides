<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
    <head>
    </head>
    <body oldrole="topic">
        <p>When <MadCap:variable name="General.abbrev" /> starts up, it always connects to the primary server first. In the <span class="Code">failover()</span> option there is a possibility to customize the failover modes.</p>
        <p>Depending on how you set the <span class="Code">failback()</span> option, <MadCap:variable name="General.abbrev" /> behaves as follows:</p>
        <ul>
            <li>
                <p><b>round-robin mode</b>: If <span class="Code">failback()</span> is not set, <MadCap:variable name="General.abbrev" /> does not attempt to return to the primary server even if it becomes available. In case the failover server fails, <MadCap:variable name="General.abbrev" /> attempts to connect the next failover server in the list in round-robin fashion.<span MadCap:conditions="General.pe"> This is the default behavior in <MadCap:variable name="General.abbrev" /> version 7.0.9 and earlier.</span></p>
                <div class="Example">
                    <h6 oldrole="example">Example: round-robin mode</h6>
                    <p>In the following example <MadCap:variable name="General.abbrev" /> handles the logservers in round-robin fashion if the primary logserver becomes inaccessible (therefore <span class="Code" oldrole="parameter">failback()</span> option is not set).</p><pre class="Code" oldrole="synopsis" xml:space="preserve">destination d_network {
     network(
          "primary-server.com"
          port(601)
          failover( servers("failover-server1", "failover-server2") )
);  
};</pre>
                </div>
            </li>
            <li>
                <p><b>failback mode</b>: If <span class="Code">failback()</span> is set, <MadCap:variable name="General.abbrev" /> attempts to return to the primary server.</p>
                <p>After <MadCap:variable name="General.abbrev" /> connects a secondary server during a failover, it sends a probe every <span class="Code" oldrole="parameter">tcp-probe-interval()</span> seconds towards the primary server. If the primary logserver responds with a TCP ACK packet, the probe is successful. When the number of successful probes reaches the value set in the <span class="Code" oldrole="parameter">successful-probes-required()</span> option, <MadCap:variable name="General.abbrev" /> tries to connect the primary server using the last probe.</p>
                <table style="width: 100%;">
                    <col style="width: 0.3in;" />
                    <col />
                    <tbody>
                        <tr>
                            <td>
                                <p class="TableNoHyphen">
                                    <img src="../../../Resources/Images/Common/note.png" />
                                </p>
                            </td>
                            <td>
                                <p class="TableHyphen"><span class="AllNoteStyles">NOTE:</span><![CDATA[  ]]><MadCap:variable name="General.abbrev" /> always waits for the result of the last probe before sending the next message. So if one connection attempt takes longer than the configured interval, that is, it waits for connection time out, you may experience longer intervals between actual probes.</p>
                            </td>
                        </tr>
                    </tbody>
                </table>
                <div class="Example">
                    <h6 oldrole="example">Example: failback mode</h6>
                    <p>In the following example <MadCap:variable name="General.abbrev"></MadCap:variable> attempts to return to the primary logserver, as set in the <span class="Code" oldrole="parameter">failback()</span> option: it will check if the server is accessible every <span class="Code" oldrole="parameter">tcp-probe-interval()</span> seconds, and reconnect to the primary logserver after three successful connection attempts.</p><pre class="Code" oldrole="synopsis" xml:space="preserve">destination d_network_2 {
     network(
          "primary-server.com"
          port(601)
          failover( 
		servers("failover-server1", "failover-server2")
               failback(
                    successful-probes-required()
                    tcp-probe-interval()
               )
          )
);  
};</pre>
                </div>
            </li>
        </ul>
    </body>
</html>