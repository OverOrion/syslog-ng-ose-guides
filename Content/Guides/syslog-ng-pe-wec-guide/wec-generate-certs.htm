<?xml version="1.0" encoding="UTF-8"?>





  %entities;
  ]
 &gt;
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd"><body name="wec-generate-certs" oldrole="procedure">
<h1 name="wec-generate-certs">Generate SSL certificates for &wec;</h1>
<h6 oldrole="formalpara">Purpose:</h6>

<p oldrole="para">When the Windows-based host and the &wec; start communicating for the first time, they authenticate each other by exchanging and verifying each other's certificates. The process begins with the Windows host requesting and verifying the &wecabbrev; tool's certificates. After successful verification, the Windows host sends its own certificates for verification to &wecabbrev;.</p>
<table cellspacing="0" class="TableStyle-NoteTable_Blue_DoNotEdit" oldrole="tip" style="width: 100%;mc-table-style: url('../../Resources/TableStyles/NoteTable_Blue_DoNotEdit.css');"><col class="TableStyle-NoteTable_Blue_DoNotEdit-Column-Column1" style="width: 0.3in;"></col><col class="TableStyle-NoteTable_Blue_DoNotEdit-Column-Column2"></col><tbody><tr class="TableStyle-NoteTable_Blue_DoNotEdit-Body-Body1"><td class="TableStyle-NoteTable_Blue_DoNotEdit-BodyB-Column1-Body1"><p><img src="../../Resources/Images/Common/note.png"/></p></td><td class="TableStyle-NoteTable_Blue_DoNotEdit-BodyA-Column2-Body1"><span class="AllNoteStyles">TIP: </span><p oldrole="para">If the Windows host fails to authenticate the &wecabbrev; tool's certificates for some reason, check the Windows event logs for details.</p><p oldrole="para">For details on which event logs to look at, see <MadCap:xref href="wec-troubleshoot.htm#wec-troubleshoot"></MadCap:xref>.</p></td></tr></tbody></table>
<p oldrole="para">The example described in this section uses OpenSSL for certificate generation. Note, however, that you can generate certificates using the Windows Public Key Infrastructure (PKI).</p>
<p oldrole="para">To generate the SSL certificates for &wecabbrev;, complete the following steps:</p>
<h6 oldrole="formalpara">Steps:</h6>

<ol oldrole="procedure"><li oldrole="step">
<p oldrole="para">Create two certificate template files for both the server and the client(s).</p>
<table cellspacing="0" class="TableStyle-NoteTable_Blue_DoNotEdit" oldrole="note" style="width: 100%;mc-table-style: url('../../Resources/TableStyles/NoteTable_Blue_DoNotEdit.css');"><col class="TableStyle-NoteTable_Blue_DoNotEdit-Column-Column1" style="width: 0.3in;"></col><col class="TableStyle-NoteTable_Blue_DoNotEdit-Column-Column2"></col><tbody><tr class="TableStyle-NoteTable_Blue_DoNotEdit-Body-Body1"><td class="TableStyle-NoteTable_Blue_DoNotEdit-BodyB-Column1-Body1"><p><img src="../../Resources/Images/Common/note.png"/></p></td><td class="TableStyle-NoteTable_Blue_DoNotEdit-BodyA-Column2-Body1"><span class="AllNoteStyles">NOTE: </span><p oldrole="para">The templates shown here are examples only. Not all elements of the example <span class="Code" oldrole="filename">*opts.cnf</span> files are mandatory, for example, you do not need to define two DNS instances.</p></td></tr></tbody></table>
<p oldrole="para">The contents of <span class="Code" oldrole="filename">server-certopts.cnf</span>:</p>
<pre class="Code" oldrole="synopsis">[req]
default_bits = 4096
default_md = sha256
req_extensions = req_ext
keyUsage = keyEncipherment,dataEncipherment
basicConstraints = CA:FALSE
distinguished_name = dn

[ req_ext ]
subjectAltName = @alt_names
extendedKeyUsage = serverAuth,clientAuth

[ alt_names ]
DNS.1 = &lt;1st DNS hostname of server (preferably FQDN)&gt;
...
DNS.&lt;N&gt; = &lt;Nth DNS hostname of server (preferably FQDN)&gt;
IP.1 = &lt;1st IP of server&gt;
...
IP.&lt;N&gt; = &lt;Nth IP of server&gt;

[dn]</pre>
<p oldrole="para">For example:</p>
<pre class="Code" oldrole="synopsis">[req]
default_bits = 4096
default_md = sha256
req_extensions = req_ext
keyUsage = keyEncipherment,dataEncipherment
basicConstraints = CA:FALSE
distinguished_name = dn

[ req_ext ]
subjectAltName = @alt_names
extendedKeyUsage = serverAuth,clientAuth

[ alt_names ]
DNS.1 = windowseventcollector.widgits
DNS.2 = wec.widgits
IP.1 = 10.64.10.2

[dn]</pre>
<p oldrole="para">The contents of <span class="Code" oldrole="filename">client-certopts.cnf</span>:</p>
<pre class="Code" oldrole="synopsis">[req]
default_bits = 4096
default_md = sha256
req_extensions = req_ext
keyUsage = keyEncipherment,dataEncipherment
basicConstraints = CA:FALSE
distinguished_name = dn

[ req_ext ]
subjectAltName = @alt_names
extendedKeyUsage = serverAuth,clientAuth

[ alt_names ]
DNS.1 = &lt;1st DNS hostname of client (preferably FQDN)&gt;
...
DNS.&lt;N&gt; = &lt;Nth DNS hostname of client (preferably FQDN)&gt;
IP.1 = &lt;1st IP of client&gt;
...
IP.&lt;N&gt; = &lt;Nth IP of client&gt;

[dn]</pre>
<p oldrole="para">For example:</p>
<pre class="Code" oldrole="synopsis">[req]
default_bits = 4096
default_md = sha256
req_extensions = req_ext
keyUsage = keyEncipherment,dataEncipherment
basicConstraints = CA:FALSE
distinguished_name = dn

[ req_ext ]
subjectAltName = @alt_names
extendedKeyUsage = serverAuth,clientAuth

[ alt_names ]
DNS.1 = windowsclient01.widgits
DNS.2 = client01.widgits
IP.1 = 10.64.10.11

[dn]</pre>
</li><li oldrole="step">
<p oldrole="para">Generate the certificate authority (CA):</p>
<pre class="Code" oldrole="synopsis">$ openssl genrsa -out ca.key 4096

$ openssl req -x509 -new -nodes -key ca.key -days 3650 -out ca.crt -subj '&lt;subject name for CA cert (must be formatted as /type0=value0/type1=value1/type2=..., characters may be escaped by \ (backslash), no spaces are skipped)&gt;'</pre>
<p oldrole="para">For example:</p>
<pre class="Code" oldrole="synopsis">$ openssl genrsa -out ca.key 4096

$ openssl req -x509 -new -nodes -key ca.key -days 3650 -out ca.crt -subj '/C=AU/ST=Victoria/L=Melbourne/O=Internet Widgits Pty Ltd/OU=Operations/CN=Operations Root CA'</pre>
<p oldrole="para">Place a copy of the <span class="Code" oldrole="filename">ca.crt</span> file in a directory of your choice. Take a note of the directory because you need to reference it in the <a href="option-cadir.htm"><span class="Code" oldrole="parameter">cadir</span></a> option of the &wecabbrev; configuration file.</p>
</li><li name="step-thumbprint-CA" oldrole="step" xreflabel="use the CA thumbprint you saved earlier">
<p oldrole="para">Save the thumbprint of the CA:</p>
<pre class="Code" oldrole="synopsis">$ openssl x509 -in ca.crt -fingerprint -sha1 -noout | sed -e 's/\://g'</pre>
</li><li oldrole="step">
<p oldrole="para">Create the server certificate:</p>
<table cellspacing="0" class="TableStyle-NoteTable_Blue_DoNotEdit" oldrole="note" style="width: 100%;mc-table-style: url('../../Resources/TableStyles/NoteTable_Blue_DoNotEdit.css');"><col class="TableStyle-NoteTable_Blue_DoNotEdit-Column-Column1" style="width: 0.3in;"></col><col class="TableStyle-NoteTable_Blue_DoNotEdit-Column-Column2"></col><tbody><tr class="TableStyle-NoteTable_Blue_DoNotEdit-Body-Body1"><td class="TableStyle-NoteTable_Blue_DoNotEdit-BodyB-Column1-Body1"><p><img src="../../Resources/Images/Common/note.png"/></p></td><td class="TableStyle-NoteTable_Blue_DoNotEdit-BodyA-Column2-Body1"><span class="AllNoteStyles">NOTE: </span><p oldrole="para">The Common Name must be the FQDN (or IP address) of the &wec; server.</p></td></tr></tbody></table>
<pre class="Code" oldrole="synopsis">$ openssl req -new -newkey rsa:4096 -nodes -out server.csr -keyout server.key -subj '&lt;subject name for server cert (must be formatted as /type0=value0/type1=value1/type2=..., characters may be escaped by \ (backslash), no spaces are skipped)&gt;'

$ openssl x509 -req -in server.csr -out server.crt -CA ca.crt -CAkey ca.key -CAcreateserial -extfile server-certopts.cnf -extensions req_ext -days 365</pre>
<p oldrole="para">For example:</p>
<pre class="Code" oldrole="synopsis">$ openssl req -new -newkey rsa:4096 -nodes -out server.csr -keyout server.key -subj '/C=AU/ST=Victoria/L=Melbourne/O=Internet Widgits Pty Ltd/OU=Operations/CN=windowseventcollector.widgits'

$ openssl x509 -req -in server.csr -out server.crt -CA ca.crt -CAkey ca.key -CAcreateserial -extfile server-certopts.cnf -extensions req_ext -days 365</pre>
</li><li oldrole="step">
<p oldrole="para">Create client(s') certificates:</p>
<table cellspacing="0" class="TableStyle-NoteTable_Blue_DoNotEdit" oldrole="note" style="width: 100%;mc-table-style: url('../../Resources/TableStyles/NoteTable_Blue_DoNotEdit.css');"><col class="TableStyle-NoteTable_Blue_DoNotEdit-Column-Column1" style="width: 0.3in;"></col><col class="TableStyle-NoteTable_Blue_DoNotEdit-Column-Column2"></col><tbody><tr class="TableStyle-NoteTable_Blue_DoNotEdit-Body-Body1"><td class="TableStyle-NoteTable_Blue_DoNotEdit-BodyB-Column1-Body1"><p><img src="../../Resources/Images/Common/note.png"/></p></td><td class="TableStyle-NoteTable_Blue_DoNotEdit-BodyA-Column2-Body1"><span class="AllNoteStyles">NOTE: </span><p oldrole="para">The Common Name must be the FQDN (or IP address) of the client.</p></td></tr></tbody></table>
<pre class="Code" oldrole="synopsis">$ openssl req -new -newkey rsa:4096 -nodes -out client.csr -keyout client.key -subj '&lt;subject name for client cert (must be formatted as /type0=value0/type1=value1/type2=..., characters may be escaped by \ (backslash), no spaces are skipped)&gt;'

$ openssl x509 -req -in client.csr -out client.crt -CA ca.crt -CAkey ca.key -CAcreateserial -extfile client-certopts.cnf -extensions req_ext -days 365</pre>
<p oldrole="para">For example:</p>
<pre class="Code" oldrole="synopsis">$ openssl req -new -newkey rsa:4096 -nodes -out client.csr -keyout client.key -subj '/C=AU/ST=Victoria/L=Melbourne/O=Internet Widgits Pty Ltd/OU=Operations/CN=windowsclient01.widgits'

$ openssl x509 -req -in client.csr -out client.crt -CA ca.crt -CAkey ca.key -CAcreateserial -extfile client-certopts.cnf -extensions req_ext -days 365</pre>
</li><li oldrole="step">
<p oldrole="para">Export the client(s') certificate(s) to the format recognized by the Windows Certificate Manager tool.</p>
<pre class="Code" oldrole="synopsis">$ openssl pkcs12 -export  -inkey client.key -in client.crt -certfile ca.crt -out client.p12</pre>
</li></ol></body></html>
